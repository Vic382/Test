#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*****************************************************************************
# CREATEUR : CTY
# DATE DE CREATION : 07/07/2023
# DESCRIPTION DU PROCESSUS : Création d'un axe temps avec mise à jour des dates
# /!\ ATTENTION /!\ Ce processus efface et reconstruit la données !
# Ce processus construit la dimension temps en fonction des données présentent dans
# le cube Param_Periode
# /!\ ATTENTION /!\ 
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# MODIFICATION:
#*****************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ;
nDebug = 0 ; 
vFlagErreur  = 0 ;
vMessage   = '' ;
nErreurs = 0 ;

#***********************************************************************************************************
#                                  Initialisation des variables
#***********************************************************************************************************

sCubeAttrMois = '}ElementAttributes_Mois' ;
sDimMois = 'Mois' ;
sDimPeriode = 'Periode';

sAnnee_Debut = pAnneeDebut ;
sAnnee_Fin = pAnneeFin ;

sMoisDebut = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisDebut ) , 2 , 2 ) ;
sMoisFin = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisFin ) , 2 , 2 ) ;

#**********************************************   Déclaration des variables  ***************************************************

## Remise à 0
IF ( DimensionExists ( sDimPeriode ) = 0 ) ;
  DimensionCreate ( sDimPeriode ) ;
ENDIF ;
DimensionDeleteAllElements( sDimPeriode );

sToday = TimSt( Now, '\Y-\m-\d');
DimensionElementInsertDirect ( sDimPeriode , '' , sToday , 'N' ) ;

sAnneeMax = pAnneeFin ;
nAnneeMax = StringToNumber(sAnneeMax) ;
sDateMin = pDateMin ; 
nDateMin = DAYNO (sDateMin) ;

#sDateMin = sAnneeDebut  | '-01-01' ;
#nDateMinNum = DAYNO( sAnneeDebut ) ;

sMoisFin = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisFin ) , 2 , 2 ) ;

nNbJours = CellGetN ( sCubeAttrMois , pMoisFin , 'NB_DAYS' ) ;
sNbJours = NumberToString ( nNbJours ) ;
sDateMax = sAnnee_Fin | '-' | sMoisFin | '-' | sNbJours  ;  

sAnneeDebut = pAnneeDebut ;
sMoisDebut = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisDebut ) , 2 , 2 ) ;



## Permet de traiter les semaines qui change d'exercice (ex: Se48 % Se49)
sDateDebutAnneeMin =  sAnneeDebut  | '-01-01' ;
# 0 = Dimanche, 1 = Lundi to 6 = Samedi.   21915 = jours entre 01/01/1900 et 01/01/1960
nTypeJourDebutAnneeMin =  Mod ( DayNo( sDateDebutAnneeMin ) + 21915, 7) ;

IF ( nTypeJourDebutAnneeMin = 0 ) ;
  nTypeJour = 1 ;
ELSEIF ( nTypeJourDebutAnneeMin = 1 ); 
  nTypeJour = 7 ;
ELSEIF ( nTypeJourDebutAnneeMin = 2 ); 
  nTypeJour = 6 ;
ELSEIF ( nTypeJourDebutAnneeMin = 3 ); 
  nTypeJour = 5 ;
ELSEIF ( nTypeJourDebutAnneeMin = 4); 
  nTypeJour = 4 ;
ELSEIF ( nTypeJourDebutAnneeMin = 5 ); 
  nTypeJour = 3 ;
ELSEIF ( nTypeJourDebutAnneeMin = 6 ); 
  nTypeJour = 2 ;
ENDIF;

nRatSem = nTypeJour ;
nRatSemData = nTypeJour ;
nTrouve = 0 ;
nUnique = 0 ;

###########################


## Insertion des éléments
DIMENSIONELEMENTINSERT( sDimPeriode ,'', 'Total_Periode' ,'C');
DIMENSIONSORTORDER( sDimPeriode , 'BYINPUT' ,'ASCENDING', 'BYHIERARCHY'  ,'ASCENDING');

## Remise à 0 des attributs
AttrDelete ( sDimPeriode , 'Libelle' );
AttrDelete ( sDimPeriode , 'Nom_Jour' );
AttrDelete ( sDimPeriode , 'Exercice' );
AttrDelete ( sDimPeriode , 'Semestre' );
AttrDelete ( sDimPeriode , 'Trimestre' );
AttrDelete ( sDimPeriode , 'Libelle_Semaine' );
AttrDelete ( sDimPeriode , 'Jour_Ferie' );
AttrDelete ( sDimPeriode , 'Libelle_Jour_Ferie' );
AttrDelete ( sDimPeriode , 'Num_Annee' );
AttrDelete ( sDimPeriode , 'Num_Semaine' );
AttrDelete ( sDimPeriode , 'Num_Mois' );
AttrDelete ( sDimPeriode , 'Num_Mois_Suivant' );
AttrDelete ( sDimPeriode , 'Num_Mois_Precedant' );

## Création des Attributs
AttrInsert ( sDimPeriode , '' , 'Libelle' , 'A' );
AttrInsert ( sDimPeriode , '' , 'Nom_Jour' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Exercice' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Semestre' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Trimestre' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Libelle_Semaine' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Jour_Ferie' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Libelle_Jour_Ferie' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Num_Annee' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Semaine' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Mois' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Mois_Suivant' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Mois_Precedant' , 'N' );

# Référence du mois d'attache pour les semaines à cheval sur 2 mois
AttrInsert ( sDimPeriode , '' , 'Flag_Decallage' , 'S' );

###########################################
## Creation vue source sur 'Param_Periode'
###########################################
sCubeSource = 'Param_Periode' ;

sDimSource1 = 'Annee_Calendaire';
sDimSource = 'm_Param_Periode';

sVueSource = 'zTI_' | GetProcessName();

IF( ViewExists( sCubeSource , sVueSource ) = 1 );
  ViewDestroy( sCubeSource , sVueSource );
ENDIF;
ViewCreate( sCubeSource , sVueSource , nDebug   );

# ANNEE_CALENDAIRE
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 ) ;
  SubsetDestroy( sDimSource1 , sVueSource ) ;
ENDIF ;

SubsetCreate( sDimSource1 , sVueSource , nDebug  );

sElementMax = DIMIX ( sDimSource1 , sDateMax ) ;
sElementMin = DIMIX ( sDimSource1 , sDateDebutAnneeMin ) ;
WHILE( sElementMin <= sElementMax );
  sElement  =  DIMNM ( sDimSource1 , sElementMin ) ; 
  IF ( ELLEV ( sDimSource1 , sElement  ) = 0 & sElement @<> ''  ) ;
    SubsetElementInsert( sDimSource1 , sVueSource , sElement , 1 ) ;
  ENDIF;
sElementMin = sElementMin +1 ;
END ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource1 , sVueSource );

# M_PARAM_PERIODE
IF( SubsetExists( sDimSource , sVueSource ) = 1 );
  SubsetDestroy( sDimSource , sVueSource );
ENDIF;
SubsetCreate( sDimSource , sVueSource , nDebug  );
SubsetElementInsert( sDimSource , sVueSource , 'Num_Semaine' , 1 );
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource , sVueSource );

DatasourceCubeview= sVueSource ;
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 0) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

### Metadonnées n°1 : Récupération des variables d'attributs
# Annee
nAnnee = StringToNumber (CellGetS ( sCubeSource , Annee_Calendaire, 'Annee' ))  ;
sAnnee = SUBST( Annee_Calendaire , 1 , 4 ) ;
sAnneePrec = NumberToString ( StringToNumber( sAnnee )  - 1) ;

# Exercice
sExercice = CellGetS ( sCubeSource , Annee_Calendaire, 'Exercice' )  ;
nExerciceParam = StringToNumber (SUBST(sExercice,1,4)) ;

# Jour/Semaine
sJour = SUBST( Annee_Calendaire , 9 , 2 ) ;
sSemaineAnnee = CellGetS ( sCubeSource , Annee_Calendaire , 'Num_Semaine' ) | '-' | sExercice ; 
sNumSemaine = CellGetS ( 'Param_Periode' , Annee_Calendaire , 'Num_Semaine' ) ;

# Mois
sMois = SUBST( Annee_Calendaire , 6 , 2 ) ;
sMoisAttr = 'M' | sMois ;
nMois = ATTRN('Mois' , sMoisAttr , 'NUM_MONTH') ;
sMoisPrev = ATTRS('Mois' , sMoisAttr , 'PREVIOUS_MONTH') ;
sMoisJour = sMois | '-' | sJour ;

# MoisAnnee
sMoisAnnee = sMois| '-' | sExercice ;
sMoisAnneePrev = subst(sMoisPrev,2,2) | '-' | sExercice ;

# Trimestre/Semestre
sSemestre =   AttrS ( 'Mois' , sMoisAttr , 'SEMESTER' ) ;
sTrimestre =  AttrS (  'Mois', sMoisAttr ,'QUARTER' ) ;
sSemestreAnnee = sSemestre | '-' | sExercice ; 
sTrimestreAnnee = sTrimestre | '-' | sExercice ; 

### Metadonnées n°2 : Définition du périmètre
IF ( DAYNO( Annee_Calendaire) <  DAYNO( sDateMin ) ) ;
  nRatSem = nRatSem - 1 ;
  IF ( nRatSem <= 0 );
    nRatSem = 7 ;
  ENDIF;
  ItemSkip;
ENDIF;

# Pour ne pas créer d'élement sur l'execice max
IF ( nAnnee > nAnneeMax ) ;
#  ItemSkip;
ENDIF;

IF ( DAYNO(Annee_Calendaire) < DAYNO(sDateMin) );
  ItemSkip;
ENDIF;



### Metadonnées n°3 : Alimentation 
# Ajouts des niveaux : Total_Periode -> 2018 -> S1-2018 -> T1-2018 -> 2018-01 -> 2018-Se01  -> 2018-04-06
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', Annee_Calendaire ,'N' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sSemaineAnnee  ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sMoisAnnee  ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sTrimestreAnnee ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sSemestreAnnee ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sExercice ,'C' );


# Spécifité de rattachement pour la 1ère semaine de l'année, doit etre rattaché sur sAnneeMois précedant
# Distinction des lignes par Exercice 2019_2020 différent de l'année 2020
# Identification des lignes de décallage spécifique
IF(nAnnee <> nExerciceParam ) ;
   AttrPutS('Annee', sDimPeriode, Annee_Calendaire , 'Flag_Decallage');
ELSE ; 
   #AttrPutS('Non', sDimPeriode, Annee_Calendaire , 'Flag_Decallage');
ENDIF ;

### Définition de la hierarchie
# Niv0 : Date enfant de Semaine_Exercice : 2020-01-01 -> Se01-2020_2021
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sSemaineAnnee , Annee_Calendaire ,1 );

# Niv1 : Semaine enfant de Mois_Exercice : Se01-2020_2021 -> 01-2020_2021
# Rattachement semaine/mois que sur les lundis pour éviter les doublons
sJour = CellGetS( sCubeSource ,Annee_Calendaire,'Nom_Jour');
nJour = CellGetN( sCubeSource ,Annee_Calendaire,'Type_Jour');

#IF(sJour @='Lundi' % sMoisJour @='01-01');
IF(sJour @='Lundi');
   DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sMoisAnnee , sSemaineAnnee ,1 );
ENDIF;

# Niv2 : Mois_Exercice enfant de Trimestre_Exercice : 01-2020_2021 -> T2-2020_2021
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sTrimestreAnnee , sMoisAnnee ,1 );

# Niv3 : Trimestre_Exercice enfant de Semestre_Exercice
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sSemestreAnnee , sTrimestreAnnee ,1 );

# Niv4 : Trimestre_Exercice enfant de Exercice
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sExercice , sSemestreAnnee ,1 );

# Niv5 : Exercice enfant de 'Total_Periode'
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , 'Total_Periode' , sExercice ,1 );


#ASCIIOutput( '..\DEBUG\sMoisPrev.csv', Annee_Calendaire, sSemaineAnnee, sMoisAnneePrev, sTrimestreAnnee, sMoisAnnee);
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# Boucle par semaine sur le périmetre de temps choisi en param
IF ( DAYNO( Annee_Calendaire) <  DAYNO( sDateMin ) ) ;
  nRatSemData = nRatSemData - 1 ;
  IF ( nRatSemData <= 0 );
    nRatSemData = 7 ;
  ENDIF;
  ItemSkip;
ENDIF;
  
## Pour ne pas créer d'élement sur l'execice max.
IF ( nAnnee >  nAnneeMax ) ;
#  ItemSkip;
ENDIF;

IF ( DAYNO(Annee_Calendaire) < DAYNO(sDateMin) );
  ItemSkip;
ENDIF;


## Libelle 
sDateFormat = SUBST ( Annee_Calendaire , 9 , 2 ) | '/' | SUBST ( Annee_Calendaire , 6 , 2 ) | '/' | SUBST ( Annee_Calendaire , 1 , 4 ) ;
AttrPutS (  sDateFormat , sDimPeriode , Annee_Calendaire ,  'Libelle' );
AttrPutS ( 'Total Période', sDimPeriode ,  'Total_Periode'  , 'Libelle' ) ;

# Num_Annee
nAnnee = StringToNumber ( SUBST ( Annee_Calendaire , 1 , 4 ) );
AttrPutN ( nAnnee , sDimPeriode , Annee_Calendaire , 'Num_Annee' ) ;

## Semaine : Se01 -> Se052 le 31/03
sNumSemaine = CellGetS ( sCubeSource , Annee_Calendaire, 'Num_Semaine') ;
AttrPutS ( Valeur , sDimPeriode , Annee_Calendaire , 'Libelle_Semaine' ) ;
nNumSemaine = StringToNumber(SUBST( Valeur, 3,2)) ;
AttrPutN ( nNumSemaine , sDimPeriode , Annee_Calendaire , 'Num_Semaine' ) ;

# Jour Ferie
nJourFerie = CellGetN( sCubeSource , Annee_Calendaire , 'Jour_Ferie' );
AttrPutN ( nJourFerie , sDimPeriode , Annee_Calendaire , 'Jour_Ferie' ) ;
sLibFerie = CellGetS( sCubeSource , Annee_Calendaire , 'Libelle_Jour_Ferie' );
AttrPutS ( sLibFerie , sDimPeriode , Annee_Calendaire , 'Libelle_Jour_Ferie' ) ;

# Nom Jour
sNomJour = CellGetS ( sCubeSource , Annee_Calendaire , 'Nom_Jour' );
AttrPutS ( sNomJour , sDimPeriode , Annee_Calendaire , 'Nom_Jour' ) ;

# Exercice
sExercice = CellGetS ( sCubeSource , Annee_Calendaire, 'Exercice' )  ;
AttrPutS ( sExercice , sDimPeriode , Annee_Calendaire , 'Exercice' ) ;

# Num_Mois
nMois = StringToNumber( SUBST ( Annee_Calendaire , 6 , 2 ) ) ;
AttrPutN ( nMois , sDimPeriode , Annee_Calendaire , 'Num_Mois' ) ;

# Num_Mois_Suivant
IF(nMois = 12);
   nMoisSuivant = 1;
ELSE; 
   nMoisSuivant = nMois + 1;
ENDIF;

# Prob sur cette ligne avec nouveau perim date
AttrPutN ( nMoisSuivant , sDimPeriode , Annee_Calendaire , 'Num_Mois_Suivant' ) ;

# Num_Mois_Precedant
IF(nMois = 1);
   nMoisPrecedant = 12 ;
ELSE; 
   nMoisPrecedant = nMois - 1 ; 
ENDIF;
AttrPutN ( nMoisPrecedant , sDimPeriode , Annee_Calendaire , 'Num_Mois_Precedant' ) ;

# Trimestre
sTrimestre = CellGetS( sCubeSource , Annee_Calendaire , 'Trimestre' ) ;
AttrPutS ( sTrimestre , sDimPeriode , Annee_Calendaire , 'Trimestre' ) ;

# Semestre
sSemestre = CellGetS( sCubeSource , Annee_Calendaire , 'Semestre' ) ;
AttrPutS ( sSemestre , sDimPeriode , Annee_Calendaire , 'Semestre' ) ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Création des sous-ensemble par niv sur la dimension période 
ExecuteProcess('zSubset','pDimension', 'Periode');

#endregion