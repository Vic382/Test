#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 12/01/2024
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# Alimentation du cube INHOUSE_COSTS_PIECES_HFM à partir du cube TRAVEL
#***********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;
sCubeParamF = 'ParametresFonctionnels' ;

sCubePallocTemps = 'P_ALLOC_TEMPS' ;
sCubeTemps = 'TEMPS' ;

sCubeAttrScenario = '}ElementAttributes_Scenario' ; 
#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Permet de définir l'écriture dans le bac à sable actif de l'utilisateur
SetUseActiveSandboxProperty(1) ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# nDebug pour créer des ss-ensemble et vue temporaire
# Si 1 les ss-ensemble et vue temporaire si 0 les ss-ensemble et vue ne seront pas supprimés
nDebug = 1 ;

nCpteurMTP = 1;


#**********************************************************************************************************
#                                  DEBUT ALIM CUBE
#**********************************************************************************************************
###***Définition de la phase en cours 
sExercice = CellGetS ( sCubeParamF , 'ExerciceEnCours' , 'ValeurS' ) ; 
sVersion = CellGetS ( sCubeParamF , 'VersionEnCours' , 'ValeurS' ) ;
sScenario = pScenario ;

sMoisFrcst =  CellGetS ( sCubeAttrScenario , sScenario , 'Mois_Prevesionnels' ) ; 
nNumMoisFrcst  = DIMIX ( 'MOIS', sMoisFrcst )  ;

sDimPieceHFM = 'PIECES_HFM' ;
sDimPieceHFM_CC = 'PIECES_HFM_CENTRE_COUT' ;
sCubeTemps = 'TEMPS_CENTRE_COUT_MOIS' ;

###########################################
## Creation vue zero
###########################################

# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | Today (0) | '_' | GetProcessName () ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | Today (0) | '_' | GetProcessName () ; 

# Declaration des variables du cube cible
sCubeCible = 'INHOUSE_COSTS_PIECES_HFM' ;
sDimCible1 = 'EXERCICES' ;
sDimCible2 = 'Scenario' ;
sDimCible3 = 'Version' ;
sDimCible4 = 'PIECES_HFM' ;
sDimCible5 = 'COMPTES' ;
sDimCible6 = 'CENTRES_ANALYTIQUES' ;
sDimCible7 = 'TYPE_TEMPS' ;
sDimCible8 = 'MOIS' ;
sDimCible = 'm_INHOUSE_COSTS_PIECES_HFM' ;

IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );


#Création des sous-ensembles des dimensions du cube

# EXERCICES
IF( SubsetExists( sDimCible1 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible1 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible1 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sVueZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sVueZero ) ; 

# Scenario
IF( SubsetExists( sDimCible2 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible2 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible2 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sVueZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sVueZero ) ; 

# Version
IF( SubsetExists( sDimCible3 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible3 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible3 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sVueZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sVueZero ) ; 

# PIECES_HFM
IF( SubsetExists( sDimCible4 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible4 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible4|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible4 , sVueZero );

# COMPTES
IF( SubsetExists( sDimCible5 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible5 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible5|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible5 , sVueZero );

#CENTRES_ANALYTIQUES
IF( SubsetExists( sDimCible6 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible6 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible6|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible6 , sVueZero );

# TYPE_TEMPS
IF( SubsetExists( sDimCible7 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible7 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible7|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible7 , sVueZero );

# MOIS
IF( SubsetExists( sDimCible8 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible8 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible8 , sVueZero , nDebug ) ; 

i = 1 ;

nTailleBoucle = Dimsiz ( sDimCible8 ) ;

WHILE ( nTailleBoucle >= i ) ;

  sElement = DIMNM ( sDimCible8 , i ) ;

  IF ( ELLEV ( sDimCible8 , sElement ) = 0 ) ;

    nNumMois =  DIMIX ( sDimCible8 , sElement )  ;  

    IF ( nNumMois >= nNumMoisFrcst ) ;

      SubsetElementInsert ( sDimCible8 , sVueZero , sElement , nDebug ) ;

    ENDIF; 

  ENDIF;

  i = i + 1 ;

END;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible8 , sVueZero ) ; 

# m_INHOUSE_COST
IF( SubsetExists( sDimCible , sVueZero ) = 1 );
 SubsetDestroy( sDimCible , sVueZero );
ENDIF;
SubsetCreate ( sDimCible , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sVueZero , 'MONTANT' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sVueZero ) ; 


# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero ) ;



###########################################
## Creation vue Source
###########################################

# Declaration des variables du cube source

sCubeSource = 'TRAVEL' ; 
sDimSource1 = 'CENTRES_ANALYTIQUES' ; 
sDimSource2 = 'SUIVI_ALLOCATION' ;
sDimSource3 = 'EXERCICES' ;
sDimSource4 = 'MOIS' ;
sDimSource5 = 'MOIS_YTD' ;
sDimSource6 = 'Scenario' ;
sDimSource7 = 'Version' ;
sDimSource = 'm_TRAVEL' ;


# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 

# Destruction pour recréation de la vue
 ViewDestroy ( sCubeSource , sVueSource ) ;
 ViewCreate ( sCubeSource , sVueSource , nDebug ) ; 

# Création des sous-ensembles des dimensions du cube

# CENTRES_ANALYTIQUES
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource1 , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource ,'{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimSource1|'] )}, 0)}, ['|sDimSource1|'].[CC_Transmission] = "X")}' , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource1 , sVueSource );

# SUIVI_ALLOCATION
IF( SubsetExists( sDimSource2 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource2 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource2 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sVueSource , 'AP_A' , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource2 , sVueSource );

# EXERCICES
IF( SubsetExists( sDimSource3 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource3 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource3 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sVueSource , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sVueSource ) ; 

# MOIS
IF( SubsetExists( sDimSource4 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource4 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource4 , sVueSource , nDebug ) ; 

i = 1 ;
nTailleBoucle = Dimsiz ( sDimSource4 ) ;

WHILE ( nTailleBoucle >= i ) ;
  sElement = DIMNM ( sDimSource4 , i ) ;

  IF ( ELLEV ( sDimSource4 , sElement ) = 0 ) ;
    nNumMois =  DIMIX ( sDimSource4 , sElement )  ;  

    IF ( nNumMois >= nNumMoisFrcst ) ;
      SubsetElementInsert ( sDimSource4 , sVueSource , sElement , nDebug ) ;
    ENDIF; 


  ENDIF;
  i = i + 1 ;

END;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sVueSource ) ; 

# MOIS_YTD
IF( SubsetExists( sDimSource5 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource5 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource5 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource5 , sVueSource , 'M' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sVueSource ) ; 

# Scenario
IF( SubsetExists( sDimSource6 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource6 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource6 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource6 , sVueSource , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sVueSource ) ; 


# Version
IF( SubsetExists( sDimSource7 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource7 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource7 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource7 , sVueSource , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource7 , sVueSource ) ; 

# m_TRAVEL
IF( SubsetExists( sDimSource , sVueSource ) = 1 );
  SubsetDestroy( sDimSource , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource , '{ EXCEPT( {TM1SUBSETALL( [m_TRAVEL] )}, { [m_TRAVEL].[NB_KM], [m_TRAVEL].[IND_KM], [m_TRAVEL].[TOTAL_TRAVEL] }) }' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sVueSource ) ; 

#### Uniquement pour une vue source ####
ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 0 );

#Définition de la source
DataSourceNameForServer = sCubeSource ;
DatasourceCubeView = sVueSource ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


## récupération du paramétrage d'allocation du centre de cout dans le cube d'allocation 
sTypeTemps = CELLGETS ( sCubePallocTemps , CENTRES_ANALYTIQUES  , 'TYPE_TEMPS' ) ;
IF ( sTypeTemps @<> '' ) ; 
### 1- traitement du mois 08 pas de fabricatin
### Les montants du mois 08 sont allouées sur le mois 09
	IF ( MOIS @='08' ) ;
		IF ( sTypeTemps @=  'ASSY' );            
			##Rmise à zéro des variables
			sCubeTemps = 'TEMPS_PIECES_HFM_CENTRE_COUT_MOIS' ;
			nTempsPieceHFM = 0;
			nTempsTotalPieceHFM =0;
			nTempsTotalPieceHFM = CELLGETN ( sCubeTemps , sExercice , '09' , sScenario , CENTRES_ANALYTIQUES , sTypeTemps ) ; 
			nCpteur =1;
			nMaxCpteur = ElementComponentCount( sDimPieceHFM_CC , '', CENTRES_ANALYTIQUES);
			WHILE ( nCpteur <= nMaxCpteur);
				sElement = ElementComponent ( sDimPieceHFM_CC , '', CENTRES_ANALYTIQUES , nCpteur );
				nTempsPieceHFM = CELLGETN ( sCubeTemps , sExercice , '09' , sScenario , sElement , sTypeTemps ) ;
				nProportion = nTempsPieceHFM \ nTempsTotalPieceHFM ;
				nTravel = Value * nProportion ;                                 
				IF ( m_TRAVEL @<> 'MONTANT_KM'  ) ;
					CellIncrementN( nTravel  , sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , '09' , 'MONTANT' ) ;
				ENDIF ;
				IF ( m_TRAVEL @= 'MONTANT_KM'  ) ;
					CellIncrementN( nTravel , sCubeCible , sExercice , sScenario , sVersion , sElement , '625100' , CENTRES_ANALYTIQUES  ,  sTypeTemps , '09' , 'MONTANT' ) ;
				ENDIF ;
			nCpteur = nCpteur +1;
			END;
		ELSE;
			sCubeTemps = 'TEMPS_PIECES_HFM' ;
			nTempsPieceHFM = 0;
			nTempsTotalPieceHFM =0;
			nCpteur =1;
			nMaxCpteur = Dimsiz ( sDimPieceHFM ) ;
			WHILE ( nCpteur <= nMaxCpteur ) ;
				sElement = DIMNM (sDimPieceHFM , nCpteur ) ;
				IF ( ELLEV ( sDimPieceHFM , sElement ) = 0 ) ; 
				 	nTempsPieceHFM = CELLGETN ( sCubeTemps , sExercice , '09' , sScenario , sElement , sTypeTemps ) ; 
					nTempsTotalPieceHFM = CELLGETN ( sCubeTemps , sExercice , '09' , sScenario , 'TOTAL_PIECES_HFM' , sTypeTemps ) ; 
					nProportion = nTempsPieceHFM \ nTempsTotalPieceHFM ;
					nTravel = Value * nProportion ; 
					IF ( m_TRAVEL @<> 'MONTANT_KM'  ) ;
						CellIncrementN( nTravel  , sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , '09' , 'MONTANT' ) ;
					ENDIF ;
					IF ( m_TRAVEL @= 'MONTANT_KM'  ) ;
						CellIncrementN( nTravel , sCubeCible , sExercice , sScenario , sVersion , sElement , '625100' , CENTRES_ANALYTIQUES  ,  sTypeTemps , '09' , 'MONTANT' ) ;
					ENDIF ;
				ENDIF;
			 nCpteur = nCpteur + 1 ;
			END;
		ENDIF;
	ELSE ;
		IF ( sTypeTemps @=  'ASSY' );
			sCubeTemps = 'TEMPS_PIECES_HFM_CENTRE_COUT_MOIS' ;
		    
			nTempsPieceHFM = 0;		    
			nTempsTotalPieceHFM =0;
			nTempsTotalPieceHFM = CELLGETN ( sCubeTemps , sExercice , Mois , sScenario , CENTRES_ANALYTIQUES  , sTypeTemps ) ; 
			nCpteur =1;
			nMaxCpteur = ElementComponentCount( sDimPieceHFM_CC , '', CENTRES_ANALYTIQUES);
			WHILE ( nCpteur <= nMaxCpteur);
				sElement = ElementComponent ( sDimPieceHFM_CC , '', CENTRES_ANALYTIQUES , nCpteur );
				nTempsPieceHFM = CELLGETN ( sCubeTemps , sExercice , Mois , sScenario , sElement , sTypeTemps ) ;
				nProportion = nTempsPieceHFM \ nTempsTotalPieceHFM ;
				nTravel = Value * nProportion ;                                 
				IF ( m_TRAVEL @<> 'MONTANT_KM'  ) ;
					CellIncrementN( nTravel  , sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , MOIS , 'MONTANT' ) ;
					#ASCIIOutput ( '../DEBUG/testbns.txt'  , '0' ,  sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , MOIS , 'MONTANT' , NumberToString (  nTravel )   ) ;
				ENDIF ;
				IF ( m_TRAVEL @= 'MONTANT_KM'  ) ;
					CellIncrementN( nTravel , sCubeCible , sExercice , sScenario , sVersion , sElement , '625100' , CENTRES_ANALYTIQUES  ,  sTypeTemps , MOIS , 'MONTANT' ) ;
				ENDIF ;
			nCpteur = nCpteur +1;
			END;
		ELSE;
			sCubeTemps = 'TEMPS_PIECES_HFM' ;
			nTempsPieceHFM = 0;
			nTempsTotalPieceHFM =0;
			nCpteur =1;
			nMaxCpteur = Dimsiz ( sDimPieceHFM ) ;
			WHILE ( nCpteur <= nMaxCpteur ) ;
				sElement = DIMNM ( sDimPieceHFM , nCpteur ) ;
				IF ( ELLEV ( sDimPieceHFM , sElement ) = 0 ) ;
					nTempsPieceHFM = CELLGETN ( sCubeTemps , sExercice , Mois , sScenario , sElement , sTypeTemps ) ; 
					nTempsTotalPieceHFM = CELLGETN ( sCubeTemps , sExercice , Mois , sScenario , 'TOTAL_PIECES_HFM' , sTypeTemps ) ; 
					nProportion = nTempsPieceHFM \ nTempsTotalPieceHFM ;
				 	nTravel = Value * nProportion ;
					IF ( m_TRAVEL @<> 'MONTANT_KM'  ) ;
						CellIncrementN( nTravel  , sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , MOIS , 'MONTANT' ) ;
						#ASCIIOutput ( '../DEBUG/testbns.txt'  , '1' ,  sCubeCible , sExercice , sScenario , sVersion , sElement , m_TRAVEL , CENTRES_ANALYTIQUES  , sTypeTemps , MOIS , 'MONTANT' , NumberToString (  nTravel )   ) ;
					ENDIF ;
					IF ( m_TRAVEL @= 'MONTANT_KM'  ) ;
						CellIncrementN( nTravel , sCubeCible , sExercice , sScenario , sVersion , sElement , '625100' , CENTRES_ANALYTIQUES  ,  sTypeTemps , MOIS , 'MONTANT' ) ;
					ENDIF ;
				ENDIF;
			nCpteur = nCpteur + 1 ;
			END;
		ENDIF;
	ENDIF;
ENDIF;
	


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#------------------------------------------------ MONITORING  ------------------------------------------------#

## DECLARATION DES VARIABLES #

# Statut
Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');

# Fin d'exécution
Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

## EXECUTION DU MONITORING #

# UTILISATEUR
Z_UTILISATEUR = TM1User;

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

#################################
# Informations sur le processus                          #
#################################

# STATUT
CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );

# TIME
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');

# UTILISATEUR
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );


#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

#endregion