#region Prolog

#***********************************************************************************************
# CREATEUR : CTY
# DATE DE CREATION : 17/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Valide la saisie faite dans Investissement_Saisie et bascule dans Investissement
# 
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEntete = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;

###############################   FIN MONITORING   #################################
# Périmètre : Exerice / Scenario et Version en cours
sExerciceEnCours = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) );
sScenarioEnCours = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) );
sVersionEnCours  = DimensionElementPrincipalName ( 'Version'  , CellGetS( 'ParametresFonctionnels', 'VersionEnCours'  , 'ValeurS' ) );


# Si scénario réel, on fait rien
IF(sScenarioEnCours @= 'Reel');
  ItemReject( 'Impossible de saisir sur le réel' );
  ProcessBreak;
ENDIF;

################  Debut de la vue SOURCE   ################
sCubeSource = 'Investissement_Saisie'; 

### 1. Définition de la source du processus
sDimSource1 = 'Exercice' ; 
sDimSource2 = 'Version' ;
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Immobilisation' ; 
sDimSource5 = 'Magasin' ; 
sDimSource = 'm_Investissement_Saisie' ; 

# Définition nom de vue / sous-ensemble
sVueSource = 'Vue_Source_' | GetProcessName () ;

# Remise à 0 de la vue
IF( ViewExists( sCubeSource , sVueSource ) = 1 );
    ViewDestroy( sCubeSource , sVueSource );
ENDIF;
ViewCreate ( sCubeSource , sVueSource , nDebug ) ; 

### 2. Création des sous-ensembles des dimensions du cube source Investissement_Saisie
# Dim 1 : Exercice : sur l'exercice en cours
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource1 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource1 , sVueSource , nDebug) ; 
SubsetElementInsert ( sDimSource1 , sVueSource , sExerciceEnCours , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sVueSource ) ; 

# Dim 2 : Version : sur la version en cours
IF( SubsetExists( sDimSource2 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource2 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource2 , sVueSource , nDebug) ; 
SubsetElementInsert ( sDimSource2 , sVueSource , sVersionEnCours , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sVueSource ) ; 

# Dim 3 : Scenario : sur le scenario en cours
IF( SubsetExists( sDimSource3 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource3 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource3 , sVueSource , nDebug) ; 
SubsetElementInsert ( sDimSource3 , sVueSource , sScenarioEnCours, nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sVueSource ) ; 

# Dim 4 : Immobilisation : seulement les immo fictives
SubsetDestroy ( sDimSource4 , sVueSource ) ; 
SubsetCreate ( sDimSource4 , sVueSource , nDebug) ; 
SubsetMDXSet( sDimSource4, sVueSource, '{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Immobilisation] )}, 0)}, [Immobilisation].[Fictif] = "FICTIF")}');
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sVueSource ) ; 

# Dim 5 : Magasin : tous les niv0
SubsetDestroy ( sDimSource5 , sVueSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource5 | ' ] ) } , 0 ) }' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sVueSource ) ; 

# Dim  : m_Investissement_Saisie : uniquement sur Cout_Immo
SubsetDestroy ( sDimSource , sVueSource ) ; 
SubsetCreate ( sDimSource , sVueSource , nDebug) ; 
SubsetElementInsert ( sDimSource , sVueSource , 'Cout_Immo', nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sVueSource ) ; 

### 3. Périmètre de calcul (0 = Inclure / 1 = Exclure)
# On ne traite PAS les croisements égaux à zéro :
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1 ) ; 
# On ne traite PAS les croisements concernés par des règles de calculs
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSourCe , 1 ) ;
# On ne traite PAS les croisements concernés par des cellules consolidéees 
ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 1 ) ; 

### 4. Définition de la source du processus : 
DataSourceNameForServer  = sCubeSource ; 
DataSourceCubeView = sVueSource ; 

################  Fin de la vue SOURCE   ################


################  Debut de la vue CIBLE  ################
sCubeCible = 'Investissement';

### 0. Définition des variables
sDimCible1 = 'Exercice' ; 
sDimCible2 = 'Version' ;
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Immobilisation' ;
sDimCible6 = 'Magasin' ;
sDimCible = 'm_Investissement' ;

### 1. Creation vue CIBLE sur Investissement
sVueZero = 'Vue_Cible' | GetProcessName();

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

IF( ViewExists( sCubeCible , sVueZero ) = 1 );
  ViewDestroy( sCubeCible , sVueZero );
ENDIF; 
ViewCreate( sCubeCible , sVueZero, nDebug );

# Dim 1 : Exercice : sur l'exercice en cours
IF( SubsetExists( sDimCible1 , sSubsetZero ) = 1 );
  SubsetDestroy ( sDimCible1 , sSubsetZero ) ; 
ENDIF;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceEnCours , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Dim 2 : Version : sur la version en cours
SubsetDestroy ( sDimCible2 , sSubsetZero ) ; 
SubsetCreate ( sDimCible2 , sSubsetZero ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionEnCours , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Dim 3 : Scenario : sur le sScenarioEnCours
SubsetDestroy ( sDimCible3 , sSubsetZero ) ; 
SubsetCreate ( sDimCible3 , sSubsetZero ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioEnCours , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Dim 4 : Mois 
# Au budget : Ecriture sur tout le niv 0 
# Au pilotage : Ecriture seulement sur les mois après le mois en cours
# Au réel : Aucune écriture
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 

# Au réel, on copie rien
IF ( sScenarioEnCours @= 'Reel' ) ;
   ProcessBreak;

# Au budget, on copie sur tous les mois   
ELSEIF ( sScenarioEnCours @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;

# Au previsionnel, récupération du 1er mois de simulation dans les attributs
ELSE ;
  SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioEnCours , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimCible4 );
  i = 1 ;
  WHILE ( i <= nTailleBoucle ) ;
    sMois = DIMNM( sDimCible4 , i );
    
    # Contrôle avec l'index du 1er mois simulation
    # Vue inverse que dans Imp_Data_Investissement
    # Ex : dans Att1, on veux copier les données saisie/budget uniquement après avril soit i >= sMoisPrev(M05)
    IF ( ELLEV ( sDimCible4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimCible4 , sSubsetZero , sMois , nDebug );
    ENDIF ;
    i = i + 1 ;
  END ;
ENDIF ;

ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Dim 5 : Immobilisation : que les immo fictives
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
SubsetCreate ( sDimCible5 , sSubsetZero , nDebug) ; 
SubsetMDXSet( sDimCible5, sSubsetZero, '{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Immobilisation] )}, 0)}, [Immobilisation].[Fictif] = "FICTIF")}');
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Dim 6 : Magasin : Tous les élements de niv 0
SubsetDestroy ( sDimCible6 , sSubsetZero ) ; 
SubsetCreateByMDX ( sSubsetZero , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible6 | ' ] ) } , 0 ) }' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# DimCible : m_Investissement: Tous les élements de niv 0
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreateByMDX ( sSubsetZero , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible | ' ] ) } , 0 ) }' , nDebug) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ; 

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );

########    Fin de la vue CIBLE   ########
#endregion
#region Data

# Si scénario réel, on fait rien
IF(sScenarioEnCours @= 'Reel');
  ProcessBreak;
  ItemReject( 'Impossible de saisir sur le réel' );
ENDIF;

### VARIABLES

# Variables sources
sCubeSource = 'Investissement_Saisie';
nCoutImmo = Value;
nDuree = CellGetN(sCubeSource, Exercice, Version, Scenario, Immobilisation, Magasin, 'Duree_Amortissement');
sDate_Debut = CellGetS(sCubeSource, Exercice, Version, Scenario, Immobilisation, Magasin, 'Date_Debut');
sDate_Fin = CellGetS(sCubeSource, Exercice, Version, Scenario, Immobilisation, Magasin, 'Date_Fin');
nAmortComplet = nCoutImmo / (nDuree * 12) ;

# Exercice Initial et Exercice Final
sExerciceInitial = ELPAR( 'Periode', sDate_Debut, 5 );
sExerciceFinal = ELPAR( 'Periode', sDate_Fin, 5 );

# 1ère date de l'immo
nDateDebutImmo = DayNo( sDate_Debut );

# derniere date de l'immo
nDateFinImmo = DayNo( sDate_Fin );

# 1ère date de l'exercice
sAnnee1 = SUBST(sExerciceEnCours, 1, 4 );
sDateDebutExercice = sAnnee1 |'-04-01';
nDateDebutExercice = DayNo( sDateDebutExercice ) ;

# dernière date de l'exercice
sAnnee2 = SUBST(sExerciceEnCours, 6, 4 );
sDateFinExercice = sAnnee2 |'-03-31';
nDateFinExercice = DayNo( sDateFinExercice ) ;

### PERIMETRE

# Mise en place d'un fichier de rejet si les dates d'immobilisations ne sont pas cohérentes
IF ( nEntete = 0 ) ;
  ASCIIOutput ( sRejet , 'Code_Immo' , 'Motif_Rejet', 'Date_Debut', 'Date_Fin' ) ;
  nEntete = 1 ;
ENDIF ;

# ItemSkip si le debut de l'immo commence après l'exercice en cours
IF (nDateDebutImmo > nDateFinExercice ) ;
  #ItemReject( 'L'| CHAR(39)|'immobilisation : '|Immobilisation|' a une date de début posterieur à la fin de l'| CHAR(39)|'exercice en cours');
  ASCIIOutput( sRejet, Immobilisation, 'Achat immo trop tard',sDate_Debut, sDateFinExercice);
  nError = nError + 1 ;
  ItemSkip;

# ItemReject si la fin de l'immo arrive avant l'exercice en cours
ELSEIF ( nDateFinImmo < nDateDebutExercice ) ;
  #ItemReject( 'L'| CHAR(39)|'immobilisation : '|Immobilisation|' a une date de fin antérieur au début de l'| CHAR(39)|'exercice en cours');
  ASCIIOutput( sRejet, Immobilisation, 'Achat immo trop tôt',sDate_Debut, sDateFinExercice);
  nError = nError + 1 ;
  ItemSkip;
ENDIF;


 
# Boucle sur les 12 mois de l'année
nTailleBoucle = 12;
i = 1;

WHILE (i <= nTailleBoucle);
     
  # Reconstitution du mois à parcourir format 'M01'
  sNum = NumberToString(i);
  IF (LONG( sNum ) = 1);
     sMois = 'M0' | sNum;
  ELSE ; 
     sMois = 'M' |sNum;
  ENDIF;
  
   # Premier jour du mois format YYYY-MM-DD / DayNo
  IF( i = 1 % i = 2 % i = 3);
    sDate_PremierJourDuMois =  sAnnee2|'-'| SUBST(sMois,2,2) |'-01' ;
  ELSE;
    sDate_PremierJourDuMois =  sAnnee1|'-'| SUBST(sMois,2,2) |'-01' ;
  ENDIF;  
  nPremierJourDuMois = Dayno(sDate_PremierJourDuMois) ;
  
  # Dernière jour du mois format YYYY-MM-DD / DayNo
  nJourMois = ATTRN( 'Mois', sMois, 'NB_DAYS');
  sJourMois = NumberToString(nJourMois);
  IF( i = 1 % i = 2 % i = 3);
    sDate_DernierJourDuMois =  sAnnee2|'-'| SUBST(sMois,2,2) |'-'| sJourMois ;
  ELSE;
    sDate_DernierJourDuMois =  sAnnee1|'-'| SUBST(sMois,2,2) |'-'| sJourMois ;
  ENDIF;  
  nDernierJourDuMois = Dayno(sDate_DernierJourDuMois) ;
 
  ### Application d'un prorata en fonction des situations
  # Si l'immo n'a pas commencée ou si elle est en fin d'amort. 
  IF( (nDateDebutImmo > nDernierJourDuMois) % (nDateFinImmo < nPremierJourDuMois) ); 
     nProrata = 0;

  # Si achat pendant le mois
  ELSEIF( ( nDateDebutImmo >= nPremierJourDuMois ) & (nDateDebutImmo <= nDernierJourDuMois) );
    # Prorata sur 1er mois
    sMoisDebut = 'M' | SUBST(sDate_Debut, 6, 2 );
    nJourDebut = StringToNumber (SUBST(sDate_Debut, 9, 2 )); 
    nJourMoisDebut = ATTRN( 'Mois', sMoisDebut, 'NB_DAYS');
    nProrata =  (nJourMoisDebut + 1 - nJourDebut) / nJourMoisDebut ;
    
  # Si fin amort pendant le mois
  ELSEIF( (nDateFinImmo < nDernierJourDuMois) & (nDateFinImmo >= nPremierJourDuMois) );
    # Prorata sur dernier mois
    sMoisFin = 'M' | SUBST(sDate_Fin, 6, 2 );
    nJourFin = StringToNumber (SUBST(sDate_Fin, 9, 2 )); 
    nJourMoisFin = ATTRN( 'Mois', sMoisFin, 'NB_DAYS');
    nProrata =  nJourFin / nJourMoisFin; 

  # Sinon 1 
  ELSE; 
     nProrata = 1;
  ENDIF;
  
  ### Ecriture sur le cube cible Investissement sur le mois parcouru
  # Gestion des scénarios
  sMoisPrev = ATTRS( 'Scenario', sScenarioEnCours, 'Premier_Mois_Prev' );
  iMoisPrev = DIMIX( 'Mois', sMoisPrev );
  iMoisLu = DIMIX( 'Mois', sMois ); 
    
  # Si scénario réel   
  IF(sExerciceEnCours @= 'Reel');
     ProcessBreak;
    
  # Si scénario prévisionnel
  ELSEIF(SUBST(sScenarioEnCours,1, 3) @= 'Att');
    
    # Vue inverse que dans Imp_Data_Investissement
    # Ex : dans Att1, on veux copier les données saisie/budget uniquement après avril soit >= sMoisPrev(M05)
    # iMoisLu = 1 (Avril)
    # iMoisPrev = 2 (Mai)
    IF ( iMoisLu >= iMoisPrev );
      CellPutN( nAmortComplet * nProrata , sCubeCible, sExerciceEnCours, sVersionEnCours, sScenarioEnCours, sMois, Immobilisation, Magasin, 'Montant' );
    ENDIF;
   
  # Sinon ecriture sur tous les mois pour Budget ou autres futurs scénarios
  ELSE;
    CellPutN( nAmortComplet * nProrata , sCubeCible, sExerciceEnCours, sVersionEnCours, sScenarioEnCours, sMois, Immobilisation, Magasin, 'Montant' );
  ENDIF;
  
  #ASCIIOutput( '..\DEBUG\Investissement_Investissement_Saisie.csv',sMois, NumberToString( nAmortFull * nProrata ), NumberToString(nProrata), sDate_DernierJourDuMois, sDate_Debut, sMoisDebut, sMoisFin, NumberToString( nJourMoisFin ), NumberToString(nProrataDebut), NumberToString(nProrataFin), sCubeCible, Exercice, Version, Scenario, Immobilisation, Magasin );
  #ASCIIOutput( '..\DEBUG\Investissement_Investissement_Saisie_Prorata.csv', NumberToString(nProrata), sMois, sDate_Debut, sMoisDebut, NumberToString( nJourMoisDebut ), NumberToString(nProrataDebut), sDate_Fin, sMoisFin, NumberToString( nJourMoisFin ), NumberToString(nProrataFin), Immobilisation, Magasin );
 
  i = i + 1;
END;

#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

IF (sScenarioEnCours @= 'Reel');
    CELLPUTS( 'Impossible de saisir sur : '|sScenarioEnCours, sCubeParamS , cMainProcName ,'DernRef' );
ELSE;
    CELLPUTS( sVersionEnCours|'-'|sScenarioEnCours|'-'|sExerciceEnCours, sCubeParamS , cMainProcName ,'DernRef' );
ENDIF;

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Message si erreur du processus
IF ( nError > 0 ) ;
  sMessage = 'Les dates d"immobilisations ne sont pas cohérentes, des rejets ont été générés, veuillez consulter le répertoire pour plus de détail' ;
  ItemReject( sMessage );
ENDIF ;
#endregion