#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 15/10/2020
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : ce processus permet de transformer une vue privé en vue publique 
# /!\ C'est le propriétaire de la vue privée qui doit lancer le processus
#************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# Pour échanger avec Process_Log_Create
NumericGlobalVariable ('zLogNumero') ;

nFatalErrors = 0 ;

sCubeTotal = '}Cubes' ;

#***********************************************************************************************************
#                                  Initialisation des variables
#***********************************************************************************************************
zLogNumero        = 1 ;
nFatalErrors = 0 ;

#***********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************
ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'START' ,
	'pV2' , pVue ,  'pV3' , 'Publication de vue' ) ;


#***********************************************************************************************************
#                                  Contrôle des paramètres
#***********************************************************************************************************

IF ( pCube @= '' % pVue @= '' ) ;
  nFatalErrors = nFatalErrors  + 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nFatalErrors , 'pV1' , 'Un ou plusieurs paramètres ne sont pas renseignés' ) ;
  ProcessBreak;
ENDIF ;

IF ( DIMIX ( sCubeTotal  , pCube ) = 0 ) ;
  nFatalErrors = nFatalErrors  + 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nFatalErrors , 'pV1' , 'Le cube ' | pCube | ' n' | CHAR(39) | 'existe pas' ) ;
  ProcessBreak;
ENDIF ;

#__________________________________________________________________________________________
#
#           Désactivation du logging IBM ( à réactiver dans Epilogue )
#__________________________________________________________________________________________

sLogChanges = CubeGetLogChanges( pCube );
CubeSetLogChanges( pCube , 0 );
 
 
#####***Publication de la vue****

PublishView ( pCube , pVue , 1 , 1 ) ;

#Publishsubset
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#__________________________________________________________________________________________
#
#                                 Contrôle des erreurs                                            
#__________________________________________________________________________________________

IF ( nFatalErrors = 0 ) ;
  ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'INFO' , 
  	'pV1' , 'La vue privée ' | pVue | ' a bien été publiée en public dans le cube ' | pCube ) ;
ENDIF ;

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'END' ) ;

IF ( nFatalErrors = 0 ) ;
ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , If ( GetProcessErrorFilename @= '' , 'OK' , 'KO' ) ,
	'pV1' , 'Process exécuté en ' , 'pV2' , cUtilisateur ) ;
ENDIF ;
	
#__________________________________________________________________________________________
#
#                                 Création des fichiers de suivi depuis le cube Processes_Log et envoi email                         
#__________________________________________________________________________________________

	
ExecuteProcess( 'Process_Log_Export' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess ) ;

#__________________________________________________________________________________________
#
#           Réactivation du logging IBM ( désactiver dans Prologue )
#__________________________________________________________________________________________

IF ( nFatalErrors = 0 ) ;
  sLogChanges = CubeGetLogChanges( pCube );
  CubeSetLogChanges( pCube , 1 );
ENDIF ;

IF ( nFatalErrors > 0 ) ;
  ProcessQuit();
ENDIF ;
#endregion