#region Prolog

#*****************************************************************************
# CREATEUR : Dimo Software - Charles THIERRY
# DATE DE CREATION : 31/08/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : ../../2023
# DESCRIPTION DU PROCESSUS : 
# Alimente le cube MS_Horaire à partir de MS_Reel
# Récupération des heures par poste (salaire, sup, maladie ...)
# Répartition par semaines
#*****************************************************************************

### 0.Définition des variables du monitoring
sCubeParamT	        = 'ParametrageT' ;
sCubeParamP         = 'ParametresSources' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE         = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
nDebug = 1 ; 

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

### 1. Déclaration des variables
sCubeCible = 'MS_Horaire';
sCubeSource = 'MS_Reel';
sExercice = CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours', 'ValeurS' )  ;
#endregion
#region Metadata

### 0. Définition des variables
sDim1 = 'Exercice' ; 
sDim2 = 'Version' ;
sDim3 = 'Scenario' ; 
sDim4 = 'Magasin' ;
sDim5 = 'Semaine' ;
sDim = 'm_MS_Horaire' ;

### 1. Creation vue CIBLE sur MS_Horaire
sVueCible = 'Vue_Cible' | Today (0) | GetProcessName();

IF( ViewExists( sCubeCible , sVueCible ) = 1 );
  ViewDestroy( sCubeCible , sVueCible );
ENDIF; 
ViewCreate( sCubeCible , sVueCible );

# Dim 1 : Exercice : sur l'exercice en cours
IF( SubsetExists( sDim1 , sVueCible ) = 1 );
  SubsetDestroy ( sDim1 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDim1 , sVueCible ) ; 
SubsetElementInsert ( sDim1 , sVueCible , sExercice , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDim1 , sVueCible ) ; 

# Dim 2 : Version : sur la version correspondant au param saisi
IF( SubsetExists( sDim2 , sVueCible ) = 1 );
  SubsetDestroy ( sDim2 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDim2 , sVueCible ) ; 
SubsetElementInsert ( sDim2 , sVueCible , 'VO' , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDim2 , sVueCible ) ; 

# Dim 3 : Scenario : sur le mois correspondant au param de saisi
IF( SubsetExists( sDim3 , sVueCible ) = 1 );
  SubsetDestroy ( sDim3 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDim3 , sVueCible ) ; 
SubsetElementInsert ( sDim3 , sVueCible , 'Reel' , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDim3 , sVueCible ) ; 

# Dim 4 : Magasin : Tous les élements de niv 0
IF( SubsetExists( sDim4 , sVueCible ) = 1 );
  SubsetDestroy ( sDim4 , sVueCible ) ; 
ENDIF;
SubsetCreateByMDX ( sVueCible , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim4 | ' ] ) } , 0 ) }' ) ;

# Dim 5 : Semaine : Toutes les semaines enfants de l'exerice
IF( SubsetExists( sDim5 , sVueCible ) = 1 );
  SubsetDestroy ( sDim5 , sVueCible ) ; 
ENDIF;
SubsetCreateByMDX ( sVueCible , '{TM1FILTERBYLEVEL ( { DESCENDANTS (Semaine.['|sExercice|']) }, 0 ) }' ) ;

# Dim 6 : m_MS_Horaire : Tous les élements de niv 0
IF( SubsetExists( sDim , sVueCible ) = 1 );
  SubsetDestroy ( sDim , sVueCible ) ; 
ENDIF;
SubsetCreateByMDX ( sVueCible , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim | ' ] ) } , 0 ) }' ) ;

# Suppression des vues et sous-ensembles
ViewDestroy( sCubeCible , sVueCible ) ;
SubsetDestroy( sDim1 , sVueCible ) ;
SubsetDestroy( sDim2 , sVueCible ) ;
SubsetDestroy( sDim3 , sVueCible ) ;
SubsetDestroy( sDim4 , sVueCible ) ;
SubsetDestroy( sDim5 , sVueCible ) ;
SubsetDestroy( sDim , sVueCible ) ;

########    Fin de la vue CIBLE   ########
########  Debut de la vue SOURCE  ########

### 1. Définition de la source du processus
sDimSource1 = 'Exercice' ; 
sDimSource2 = 'Contrat' ;
sDimSource3 = 'Mois' ; 
sDimSource4 = 'Poste' ; 
sDimSource5 = 'Magasin' ; 
sDimSource6 = 'Salarie' ; 
sDimSource = 'm_MS_Reel' ; 

# Définition nom de vue / sous-ensemble
sVueSource = 'Vue_Source' | Today (0) | '_' | GetProcessName () ;
sSubsetSource = 'Source_Subset_' | Today (0) | '_' | GetProcessName () ; 

# Remise à 0 de la vue
ViewDestroy ( sCubeSource , sVueSource ) ;
ViewCreate ( sCubeSource , sVueSource ) ; 

### 2. Création des sous-ensembles des dimensions du cube source MS_Reel
# Dim 1 : Exercice : sur l'exercice en cours
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExercice , nDebug ) ;

# Dim 2 : Contrat : tous les niv0
SubsetDestroy ( sDimSource2 , sSubsetSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource2 | ' ] ) } , 0 ) }' ) ;

# Dim 3 : Mois : tous les mois niv0 si param vide, sinon mois du param
SubsetDestroy ( sDimSource3 , sSubsetSource ) ; 

IF(pMois @= '');
   SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource3 | ' ] ) } , 0 ) }' ) ;
ELSE; 
   SubsetElementInsert ( sDimSource3 , sSubsetSource , sExercice , nDebug ) ;
ENDIF;

# Dim 4 : Poste : tous les niv0
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource4 | ' ] ) } , 0 ) }' ) ;

# Dim 5 : Magasin : tous les niv0
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource5 | ' ] ) } , 0 ) }' ) ;

# Dim 6 : Salarie : tous les niv0
SubsetDestroy ( sDimSource6 , sSubsetSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource6 | ' ] ) } , 0 ) }' ) ;

# Dim  : m_MS_Reel : tous les niv0
SubsetDestroy ( sDimSource6 , sSubsetSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource | ' ] ) } , 0 ) }' ) ;

### 3. Périmètre de calcul (0 = Inclure / 1 = Exclure)
# On ne traite PAS les croisements égaux à zéro :
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1 ) ; 
# On ne traite PAS les croisements concernés par des règles de calculs
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSourCe , 1 ) ;
# On ne traite PAS les croisements concernés par des cellules consolidéees 
ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 1 ) ; 

### 4. On assigne les sous-ensembles à leur vue
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ; 

### 5. Définition de la source du processu : 
DataSourceNameForServer  = sCubeSource ; 
DataSourceCubeView = sVueSource ; 
#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#
# Declaration variables et constantes
Z_FIN_EXE = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE = Subst(TODAY(1),1,4) | subst(TODAY(1),6,2);
Z_STATUS = IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION = Z_FIN_EXE - Z_DEBUT_EXE;
Z_LOCAL_TIME =   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       
CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );
#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion