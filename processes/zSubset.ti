#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : DIMO SOFTWARE - CTY
# DATE DE CREATION : 07/08/2023
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Création de sous-ensembles pour les dimensions non techniques
#************************************************************************************************

### 0.Définition des variables du monitoring

sCubeParamT	             = 'ParametrageT' ;
sCubeParamP              = 'ParametresSources' ;

cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

zLogNumero        = 1 ;
nErrors = 0 ;

#***********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************

sDimtech = '}Dimensions' ;
#Fichier Debug
vFichierRepDebug = 'D:\IBM\Instances\GENERIQUE\DEBUG\';

#définition des variables
sDim = pDimension;
IF (TRIM(sDim) @= '' );
  nErrors = nErrors + 1 ;
  PROCESSERROR();
ENDIF;
IF ( pDimension  @<> '*' ); 
  IF ( DIMIX ( sDimtech , TRIM(sDim) ) = 0 );
    nErrors = nErrors + 1 ;
    PROCESSERROR();
  ENDIF;
ENDIF;


If ( pDimension  @= '*' ) ; 

# Boucle sur la dimension "}Dimensions"
nTailleBoucle = DimSiz ( '}Dimensions' ) ;
While ( nTailleBoucle > 0 ) ;
	sDim = DimNm ( '}Dimensions' , nTailleBoucle ) ; 
	sPremierCar = SubSt ( sDim , 1 ,1 ) ; 
	If ( sPremierCar @<> '}'  & DimSiz(sDim) > 0 ) ;
		sDeuxPremiersCar = SubSt ( sDim , 1 , 2 ) ;
		
		# Il existe différents types de libellés : 
		# - Description
		# - Description_Court
		# Si l'un d'eux existe, on l'attribue pour les sous-ensembles
		nLib = 0 ; 
		sDimAttr = '}ElementAttributes_' | sDim ; 
		If ( DimIx ( sDimAttr ,  'Description' ) <> 0 ) ;
			sLib = 'Description' ; 
			nLib = 1 ;
		ElseIf ( DimIx ( sDimAttr ,  'Description_Court' ) <> 0 ) ;
			sLib = 'Description_Court' ;
			nLib = 1 ;
		EndIf ; 
			
		If ( sDeuxPremiersCar @= 'm_' ) ; 
			If ( SubsetExists ( sDim , 'Par Défaut' ) = 0 ) ; 
				SubsetCreateByMdx ( 'Par Défaut' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
				If ( nLib = 1 ) ;
					SubsetAliasSet ( sDim , 'Par Défaut' , sLib ) ; 
				EndIf ;
			EndIf ; 

			# Boucle sur la dimension en question
			nTailleDim = DimSiz ( sDim ) ; 
			While ( nTailleDim > 0 ) ; 
				sElementDim = DimNm ( sDim , nTailleDim ) ; 
				nNivElem = ElLev ( sDim , sElementDim ) ; 
				sNomSub = 'Niv' | NumberToString ( nNivElem ) ;
				If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
					SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
				EndIf ; 
				If ( nLib = 1 ) ;
					sNomSub = 'Niv' | NumberToString ( nNivElem ) | '_Desc.' ;
					If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
						SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
					EndIf ; 
					SubsetAliasSet ( sDim , sNomSub , sLib ) ; 
				EndIf ; 
				
				nTailleDim = nTailleDim - 1 ; 
			End ; 

		Else ; 	
			
			If ( SubsetExists ( sDim , 'Par Défaut' ) = 0 ) ; 
				SubsetCreateByMdx ( 'Par Défaut' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
				If ( nLib = 1 ) ;
					SubsetAliasSet ( sDim , 'Par Défaut' , sLib ) ; 
				EndIf ; 
			EndIf ; 
			
			If ( SubsetExists ( sDim , 'Tous' ) = 0 ) ;
				SubsetCreateByMdx ( 'Tous' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
			EndIf ; 
			
			If ( nLib = 1 ) ;
				If ( SubsetExists ( sDim , 'Tous_Desc.' ) = 0 ) ;
					SubsetCreateByMdx ( 'Tous_Desc.' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
					SubsetAliasSet ( sDim , 'Tous_Desc.' , sLib ) ; 
				EndIf ; 				
			EndIf ; 

			
			# Boucle sur la dimension en question
			nTailleDim = DimSiz ( sDim ) ; 
			While ( nTailleDim > 0 ) ; 
				sElementDim = DimNm ( sDim , nTailleDim ) ; 
				nNivElem = ElLev ( sDim , sElementDim ) ; 
				sNomSub = 'Niv' | NumberToString ( nNivElem ) ;
				If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
					SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
				EndIf ; 
				If ( nLib = 1 ) ;
					sNomSub = 'Niv' | NumberToString ( nNivElem ) | '_Desc.' ;
					If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
						SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
					EndIf ; 
					SubsetAliasSet ( sDim , sNomSub , sLib ) ; 
				EndIf ; 
				
				nTailleDim = nTailleDim - 1 ; 
			End ; 					

		EndIf ; 
	EndIf ; 

	nTailleBoucle = nTailleBoucle - 1 ; 
End ;

ELSE;
# Boucle sur la dimension pApplication

	sDim = pDimension ; 
	sPremierCar = SubSt ( sDim , 1 ,1 ) ; 
	If ( sPremierCar @<> '}'  & DimSiz(sDim) > 0 ) ;
		sDeuxPremiersCar = SubSt ( sDim , 1 , 2 ) ;
		
		# Il existe différents types de libellés : 
		# - Description
		# - Description_Court
		# Si l'un d'eux existe, on l'attribue pour les sous-ensembles
		nLib = 0 ; 
		sDimAttr = '}ElementAttributes_' | sDim ; 
		If ( DimIx ( sDimAttr ,  'Description' ) <> 0 ) ;
			sLib = 'Description' ; 
			nLib = 1 ;
		ElseIf ( DimIx ( sDimAttr ,  'Description_Court' ) <> 0 ) ;
			sLib = 'Description_Court' ;
			nLib = 1 ;
		EndIf ; 
			
		If ( sDeuxPremiersCar @= 'm_' ) ; 
			If ( SubsetExists ( sDim , 'Par Défaut' ) = 0 ) ; 
				SubsetCreateByMdx ( 'Par Défaut' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
				If ( nLib = 1 ) ;
					SubsetAliasSet ( sDim , 'Par Défaut' , sLib ) ; 
				EndIf ;
			EndIf ; 

			# Boucle sur la dimension en question
			nTailleDim = DimSiz ( sDim ) ; 
			While ( nTailleDim > 0 ) ; 
				sElementDim = DimNm ( sDim , nTailleDim ) ; 
				nNivElem = ElLev ( sDim , sElementDim ) ; 
				sNomSub = 'Niv' | NumberToString ( nNivElem ) ;
				If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
					SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
				EndIf ; 
				If ( nLib = 1 ) ;
					sNomSub = 'Niv' | NumberToString ( nNivElem ) | '_Desc.' ;
					If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
						SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
					EndIf ; 
					SubsetAliasSet ( sDim , sNomSub , sLib ) ; 
				EndIf ; 
				
				nTailleDim = nTailleDim - 1 ; 
			End ; 

		Else ; 	
			
			If ( SubsetExists ( sDim , 'Par Défaut' ) = 0 ) ; 
				SubsetCreateByMdx ( 'Par Défaut' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
				If ( nLib = 1 ) ;
					SubsetAliasSet ( sDim , 'Par Défaut' , sLib ) ; 
				EndIf ; 
			EndIf ; 
			
			If ( SubsetExists ( sDim , 'Tous' ) = 0 ) ;
				SubsetCreateByMdx ( 'Tous' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
			EndIf ; 
			
			If ( nLib = 1 ) ;
				If ( SubsetExists ( sDim , 'Tous_Desc.' ) = 0 ) ;
					SubsetCreateByMdx ( 'Tous_Desc.' , '{TM1SubsetAll ( [' | sDim | '] ) }' ) ;
					SubsetAliasSet ( sDim , 'Tous_Desc.' , sLib ) ; 
				EndIf ; 				
			EndIf ; 

			
			# Boucle sur la dimension en question
			nTailleDim = DimSiz ( sDim ) ; 
			While ( nTailleDim > 0 ) ; 
				sElementDim = DimNm ( sDim , nTailleDim ) ; 
				nNivElem = ElLev ( sDim , sElementDim ) ; 
				sNomSub = 'Niv' | NumberToString ( nNivElem ) ;
				If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
					SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
				EndIf ; 
				If ( nLib = 1 ) ;
					sNomSub = 'Niv' | NumberToString ( nNivElem ) | '_Desc.' ;
					If ( SubsetExists ( sDim , sNomSub ) = 0 ) ; 
						SubsetCreateByMdx ( sNomSub , '{TM1FILTERBYLEVEL ( {TM1SubsetAll ( [' | sDim | '] ) } , ' | NumberToString ( nNivElem ) | ' )}' ) ;
					EndIf ; 
					SubsetAliasSet ( sDim , sNomSub , sLib ) ; 
				EndIf ; 
				
				nTailleDim = nTailleDim - 1 ; 
			End ; 					

		EndIf ; 
	EndIf ; 

	nTailleBoucle = nTailleBoucle - 1 ; 

ENDIF;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE = Subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS = IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION = Z_FIN_EXE - Z_DEBUT_EXE;
Z_LOCAL_TIME =   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
Z_UTILISATEUR = TM1User;


# Ecriture des informations sur le processus dans le cube ParametresSources                       

CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion