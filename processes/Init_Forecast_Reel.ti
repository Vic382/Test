#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*****************************************************************************
# CREATEUR : Dimo Software - VRT
# DATE DE CREATION : 14/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : ../../2023
# DESCRIPTION DU PROCESSUS : 
# Initialisation des mois réels pour le Forecast
#*****************************************************************************

### 0.Définition des variables du monitoring
sCubeParamT	        = 'ParametrageT' ;
sCubeParamS         = 'ParametresSources' ;
sCubeParamF         = 'ParametresFonctionnels' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE         = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
nDebug = 1 ; 
libRejets = 1; 
sListe = '';
nNouveauSalarie = 0;

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

###**Définition des variables
sDimCube = '}Cubes' ; 
sCubeAttrScenario = '}ElementAttributes_Scenario' ;
sDimMois  = 'Mois' ;
sDimVersion = 'Version' ; 
sDimAnnee = 'Annee' ;
sDimScenario = 'Scenario' ;
sDimExercice = 'Exercice' ;

###***Définition du périmètre source et cible
sScenarioSource = 'Reel' ; 
sScenarioCible = DimensionElementPrincipalName ( sDimScenario , CellgetS ( sCubeParamF ,  'ScenarioEnCours' , 'ValeurS' ) )  ; 

# Contrôle du scénario cible, doit être atterrissage
sScenarioCtrl = SUBST ( sScenarioCible , 1 , 3 ) ;
IF ( sScenarioCtrl @<> 'Att' ) ;
  ItemSkip;
ENDIF ;

##***sElementMapping permet de définir les différents éléments de mapping ( Scenario , Exercice , Version )  pour le processus "Bedrock.Cube.Data.Copy.IntraCube"
sElementMapping = 'Scenario:' | sScenarioSource | '->' | sScenarioCible ; 

#On définit la taille de notre boucle en fonction du nombre de cube
##**Remise à vide la variable sFilter
sFilter = '' ;


## Initialisation d'une boucle sur les cubes, on va initialiser uniquement les mois réel en fonction du scénario cible

i = 1 ;
nTailleBoucle = Dimsiz ( sDimCube ) ;
WHILE ( nTailleBoucle >= i ) ;

  ############## TO UPDATE ############## 
  sNomCube = DIMNM ( sDimCube , i ) ;
  
  # Initialisation d'une 2ème boucle pour tester la présence de la dimension scenario
  
  nTailleBoucleScenario = CubeDimensionCountGet( sNomCube );
  j = 1 ;
  
  WHILE ( nTailleBoucleScenario >= j ) ;
  
    sDim = TABDIM( sNomCube , j );
    IF ( sDim @= 'Scenario' ) ;
      sTestScenario = 'Oui' ;
    ENDIF ;
    
    j = j + 1 ;
    
  END ;

  l = 1 ;
  nNombreElement = Dimsiz ( sDimMois ) ; 
  WHILE ( nNombreElement >= l ) ; 
    
    sMois = DIMNM(sDimMois , l );
      
    nIndexMois = DIMIX ( sDimMois , sMois ) ;
      
    sMoisPrev = CellGetS ( '}ElementAttributes_Scenario' , sScenarioCible , 'Premier_Mois_Prev') ;
    nIndexMoisPrev = DIMIX ( sDimMois , sMoisPrev ) ;    
      
    IF ( ELLEV ( sDimMois , sMois ) = 0 & nIndexMois < nIndexMoisPrev ) ;

      sFilter = sDimMois | ':' | sMois ;  
      
      IF ( sTestScenario @= 'Oui' ) ;
        #Lancement du processus bedrock
        RunProcess ( 'Bedrock.Cube.Data.Copy.IntraCube' , 'pCube' , sNomCube , 'pView' , '' , 'pFilter' , sFilter , 'pElementMapping' , sElementMapping , 'pFactor' , 1 , 'pDimensionDelim' , '&' , 'pElementStartDelim' , ':' ,
        'pElementDelim' , '+' , 'pMappingDelimiter' , '->' , 'pZeroTarget' , 1 , 'pZeroSource' , 0 , 'pDeleteViewsAndSubsets' , 1 , 'pSuppressConsol' , 1 , 'pSuppressRules' , 1 , 'pAccumulate' , 0 ,
        'pDropAndReattachRules' , 0 , 'pCopyDataViaClonedCube' , 0 , 'pDebug' , 0 ) ;
      ENDIF ;
    ENDIF ;
      
    l = l + 1 ;
  END;
  
  # RAZ du testscenario
  sTestScenario = '' ;
  i = i + 1 ;
END ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#
# Declaration variables et constantes
Z_FIN_EXE = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE = Subst(TODAY(1),1,4) | subst(TODAY(1),6,2);
Z_STATUS = IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION = Z_FIN_EXE - Z_DEBUT_EXE;
Z_LOCAL_TIME =   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
Z_UTILISATEUR = TM1User;

# Nettoyage -> CAMID("pans:u:cty@dimosoftware.com") into 'cty@dimosoftware.com'
nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
sUser = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

# Ecriture des informations sur le processus dans le cube ParametresSources                       
CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( sUser, sCubeParamS , cMainProcName ,'txt_Utilisateur' );
#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion