#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 19/09/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : MAJ des données du cube Cout_Elec
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEntete = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;


###############################   FIN MONITORING   #################################

# Déclaration des variables 

# Cubes
sCubeTarifElec = 'Param_Tarif_Elec' ;

# Définition du périmètre
# que du Reel
sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) ) ;
sScenario = 'REEL' ;
sVersion = 'VF' ;

###########################################
## Définition du fichier source
###########################################

# Répertoire fichier source
sRepertoire = CellGetS ( sCubeParamS , cMainProcName , 'Txt_RepertoireSource' ) ;
sNomFichier = CellGetS ( sCubeParamS , cMainProcName , 'txt_NomFichier' ) ;

# Contrôle du répertoire

IF ( sRepertoire @= '' % sNomFichier @= '' ) ;
  ItemReject( 'Le répertoire ou le nom du fichier n'| CHAR(39)|'est pas renseigné dans le cube ParamètreSources' );
  ProcessBreak;
ENDIF ;

# Renommage du fichier source selon les paramètres utilisateur
sNomFichier = sNomFichier | '_' | sExercice | '_' | sScenario | '.csv'  ;
sNomComplet = sRepertoire | sNomFichier ;

# Controle de la présence du fichier source dans le répertoire
IF ( FileExists( sNomComplet ) = 0 ) ;
  ItemReject( 'Le fichier source ' | sNomFichier | ' n' | CHAR ( 39) | 'est pas présent dans le répertoire ' | sRepertoire );
  ProcessBreak;
ENDIF ;

# Définition du fichier comme source
DatasourceNameForServer = sNomComplet ;
DataSourceASCIIDelimiter = ';' ;


###########################################
## Creation vue CIBLE sur Cout_Elec
###########################################

### Déclaration des variables
sCubeCible = 'Cout_Elec';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Magasin' ; 
sDimCible = 'm_Cout_Elec';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
IF ( SubsetExists( sDimCible1, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible1, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExercice , nDebug ) ;

# Version
IF ( SubsetExists( sDimCible2, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible2, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersion , nDebug ) ;

# Scenario
IF ( SubsetExists( sDimCible3, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible3, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenario , nDebug ) ;


# Mois
IF ( SubsetExists( sDimCible4, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible4, sSubsetZero ) ;
ENDIF; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;


# Magasin
IF ( SubsetExists( sDimCible5, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible5, sSubsetZero ) ;
ENDIF;  
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;


# m_Cout_Elec
IF ( SubsetExists( sDimCible, sSubsetZero ) = 1);
  SubsetDestroy ( sDimCible, sSubsetZero ) ;
ENDIF;
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Consommation' , nDebug ) ;


# On assigne les sous-ensembles à leur vue
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# Controle du nombre de caractère code magasin ( doit être sur 3 caractère )
nLong = LONG( N_GIE );

IF ( nLong = 1 ) ;
  sMagasin = '00' | N_GIE ;
ELSEIF ( nLong = 2 ) ;
  sMagasin = '0' | N_GIE ;
ELSEIF ( nLong = 3 ) ;
  sMagasin = N_GIE ;
ENDIF ;

# Mise en place d'un fichier de rejet si des magasins n'existent pas dans la dimension magasin

IF ( nEntete = 0 ) ;
  ASCIIOutput ( sRejet , 'Code_Magasin' , 'Motif_Rejet' ) ;
  nEntete = 1 ;
ENDIF ;

IF ( DIMIX ( 'Magasin' , sMagasin ) =0 ) ;
  ASCIIOutput ( sRejet , sMagasin , 'Le magasin n' | CHAR ( 39 ) | 'est pas présent dans la dimension Magasin' ) ;
  nError = nError + 1 ;
  ItemSkip ;
ENDIF ;

CellPutN( M04 , sCubeCible , sExercice , sVersion , sScenario , 'M04' , sMagasin , 'Consommation' );
CellPutN( M05 , sCubeCible , sExercice , sVersion , sScenario , 'M05' , sMagasin , 'Consommation' );
CellPutN( M06 , sCubeCible , sExercice , sVersion , sScenario , 'M06' , sMagasin , 'Consommation' );
CellPutN( M07 , sCubeCible , sExercice , sVersion , sScenario , 'M07' , sMagasin , 'Consommation' );
CellPutN( M08 , sCubeCible , sExercice , sVersion , sScenario , 'M08' , sMagasin , 'Consommation' );
CellPutN( M09 , sCubeCible , sExercice , sVersion , sScenario , 'M09' , sMagasin , 'Consommation' );
CellPutN( M10 , sCubeCible , sExercice , sVersion , sScenario , 'M10' , sMagasin , 'Consommation' );
CellPutN( M11 , sCubeCible , sExercice , sVersion , sScenario , 'M11' , sMagasin , 'Consommation' );
CellPutN( M12 , sCubeCible , sExercice , sVersion , sScenario , 'M12' , sMagasin , 'Consommation' );
CellPutN( M01 , sCubeCible , sExercice , sVersion , sScenario , 'M01' , sMagasin , 'Consommation' );
CellPutN( M02 , sCubeCible , sExercice , sVersion , sScenario , 'M02' , sMagasin , 'Consommation' );
CellPutN( M03 , sCubeCible , sExercice , sVersion , sScenario , 'M03' , sMagasin , 'Consommation' );

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Message si erreur du processus
IF ( nError > 0 ) ;
  sMessage = 'Des rejets ont été générés, veuillez consulter le répertoire pour plus de détail' ;
  ItemReject( sMessage );
ENDIF ;
#endregion