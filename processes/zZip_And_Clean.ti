#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 09/11/2020
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Création de vues par défaut pour tous les cubes.
#************************************************************************************************

#************************************************************************************************
# Définition des cubes
#************************************************************************************************

sCubeParamT = 'ParametrageT' ;
sCubeParamP = 'ParametresSources' ;

#************************************************************************************************
# Définition des constantes
#************************************************************************************************

NumericGlobalVariable ('zLogNumero') ; 

cMainProcName	= GetProcessName();
cRepertoireRacine	= GetProcessErrorFileDirectory;
cTimeStamp	= TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt	= NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess	= cTimeStamp | '_' | cRandomInt;
cUtilisateur	= TM1User();

#************************************************************************************************
# Définition des variables
#************************************************************************************************

sLog = CellGetN ( sCubeParamP , cMainProcName , 'Log');
If( sLog <> 1 );
	sLog = 0 ;
EndIf;

sDebug = CellGetN ( sCubeParamP , cMainProcName , 'Debug');
If( sDebug <> 1 );
	sDebug = 0 ;
EndIf;

# Pour échanger avec Process.Log.Create
NumericGlobalVariable ('zLogNumero') ;

#***********************************************************************************************************
#                                  Initialisation des variables
#***********************************************************************************************************
zLogNumero        = 1 ;
nErrors                = 0 ;
nSelection             = 0 ;

# Repertoire de localisation des executables
sRepertoireExe = CellGetS(sCubeParamT , 'Txt_RepertoireExe', 'ValeurS' ) ;

# Repertoire de localisation des archives à creer
sRepCible = CellGetS(sCubeParamT , 'Txt_RepertoireArchive', 'ValeurS' ) ;

# Repertoire de localisation des Logs
sRepLogs = GetProcessErrorFileDirectory ;

#***********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************

ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'START' ,
	'pV1' , 'Zip And Clean' ) ;

IF ( pRepertoireDataSource @= '' % pNomEtExtensionFichierSource @= '' % pRepertoireDataLog @= '' % pNomEtExtensionFichierLog @= '' % pProcessName @= '' % pSuppFichierSource @= '' ) ;
  nErrors = nErrors + 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nErrors , 'pV1' , 'Un ou plusieurs paramètres ne sont pas renseignés' ) ;
  ProcessBreak;
ENDIF ;


##### Exécution du script d'archivage ######

sCubeParamP = 'ParametresSources' ;
sZip = CellGetN( sCubeParamP ,pProcessName, 'Zip' ) ; 

# Si 1 (Oui), création du Zip
IF ( sZip = 1 ) ;

   sCmd = 'cmd /c ' | sRepertoireExe | 'ZipAndClean.bat ' | pRepertoireDataSource | ' ' |  pNomEtExtensionFichierSource | ' ' | pRepertoireDataLog| ' ' | pNomEtExtensionFichierLog| ' ' | sRepCible | ' ' | pProcessName| ' ' | pSuppFichierSource;

   ExecuteCommand (sCmd, 0);

ENDIF ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

IF ( nErrors > 0 ) ;
  ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'WARN' ,
	'pRef' , nErrors , 'pV1' , 'Erreur(s) Mineure(s)'   ) ;
ENDIF ;

#__________________________________________________________________________________________
#
#                                 Contrôle des erreurs                                            
#__________________________________________________________________________________________

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'INFO' , 
	'pV1' , 'Traitement terminé' ) ;

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'END' ) ;


ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , If ( GetProcessErrorFilename @= '' , 'OK' , 'KO' ) ,
	'pV1' , 'Process exécuté en ' , 'pV2' , cUtilisateur ) ;
	
#__________________________________________________________________________________________
#
#                                 Création des fichiers de suivi depuis le cube Processes_Log et envoi email                         
#__________________________________________________________________________________________

	
#ExecuteProcess( 'Process_Log_Export' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess ) ;


IF ( nErrors > 0 ) ;
  ProcessQuit();
ENDIF ;

#endregion