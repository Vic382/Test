#region Prolog

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 09/10/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Initialisation des comptes exploitation selon méthode choisie dans le cube Param_Methode_Saisie
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;


###############################   FIN MONITORING   #################################

### 1. Déclaration des variables

# Cubes
sCubeParam_Methode = 'Param_Methode_Saisie' ;

# Dimensions
sDimMethode = 'Methode_Saisie' ;

# Définition du périmètre
# La source est toujours le Réel N-1 et la cible budget ou forecast

# On récupère l'exercice en cours dans le cube paramètrefonctionnel
sExerciceSource = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));

# On récupère l'index de l'exercice en cours pour récupérer l'exercice précédent dans la dimension
nIndex = DIMIX( 'Exercice', sExerciceSource );
sExerciceSource = DIMNM( 'Exercice', nIndex -1 );

sScenarioSource = 'REEL' ;
sVersionSource = 'VF' ;

sScenarioCible = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));

# Si le scénario est budget alors on récupère le buddget en cours sinon exercice en cours
IF ( sScenarioCible @= 'BUDGET' ) ;
  sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'BudgetEnCours' , 'ValeurS' ));
ELSE ;
  sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
ENDIF ;

sVersionCible = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

###########################################
## Creation vue SOURCE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeSource = 'Compte_Exploitation_Saisie';
sDimSource1 = 'Exercice';
sDimSource2 = 'Version' ; 
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Mois' ; 
sDimSource5 = 'Magasin' ; 
sDimSource6= 'Poste_Budgetaire' ; 
sDimSource = 'm_Compte_Exploitation';

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeSource, sVueSource ) = 1 );
  ViewDestroy( sCubeSource, sVueSource );
ENDIF;
ViewCreate( sCubeSource, sVueSource , nDebug );

# Exercice
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExerciceSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 

# Version
SubsetDestroy ( sDimSource2 , sSubsetSource ) ;
SubsetCreate ( sDimSource2 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sSubsetSource , sVersionSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 

# Scenario
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sSubsetSource , sScenarioSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 

# Mois
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource4 , sSubsetSource , 'Total_Mois' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 

# Magasin
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 

# Poste_Budgétaire
SubsetDestroy ( sDimSource6, sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sSubsetSource ) ; 

# m_Compte_Exploitation
SubsetDestroy ( sDimSource , sSubsetSource ) ; 
SubsetCreate ( sDimSource , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sSubsetSource , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ;

ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 0 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );

# Redéfinition de la source de donnée
DatasourceCubeview = sVueSource ;
DatasourceNameForServer = sCubeSource ;


###########################################
## Creation vue CIBLE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeCible = 'Compte_Exploitation_Saisie';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Magasin' ; 
sDimCible6= 'Poste_Budgetaire' ; 
sDimCible = 'm_Compte_Exploitation';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
IF ( sScenarioCible @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ELSE ;

  SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioCible , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimCible4 );
  i = 1 ;

  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimCible4 , i );
  
    # Contrôle avec l'index du 1er mois simulation
    IF ( ELLEV ( sDimCible4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimCible4 , sSubsetZero , sMois , 1 );
    ENDIF ;
  
    i = i + 1 ;
  
  END ;

ENDIF ;

ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Magasin
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Poste_Budgétaire
SubsetDestroy ( sDimCible6 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# m_Compte_Exploitation
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# Pas de RAZ car présent dans le master
#ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Data

# Récupération de la méthode de projection dans le cube de paramétrage
sMethodeSaisie = CellGetS( sCubeParam_Methode , sExerciceCible , sVersionCible , sScenarioCible , Poste_Budgetaire , 'Methode_Saisie' );

# Redéfinition du libellé en code
sMethodeSaisie = DimensionElementPrincipalName( sDimMethode , sMethodeSaisie );

# Si la méthode de saisie n'est pas renseigné, on skip
IF ( sMethodeSaisie @= '') ;
  ItemSkip;
ENDIF ;


# Méthode Saisie manuelle : initialisation à 0 ( fait par le RAZ donc itemskip )
IF ( sMethodeSaisie @= 'Saisie') ;
  Itemskip ;
  
# Méthode Saisie Import : Skip car géré dans un autre processus
ELSEIF ( sMethodeSaisie @= 'Import') ;
  Itemskip ;
  
# Méthode Recopié le N-1 : on récupère le montant exact du réel de référence
ELSEIF ( sMethodeSaisie @= 'N-1') ;

  # Boucle sur les mois
  nTailleBoucle = DIMSIZ( 'Mois' );
  i = 1 ;
  
  while( i <= nTailleBoucle );
  
    sMois = DIMNM( 'Mois' , i );
    
    IF ( ELLEV( 'Mois' , sMois ) = 0 & i >= nFirstMoisPrev );
    
      nMontant = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
      
      # Si le montant est négatif, on pousse 0
      IF ( nMontant < 0 ) ;
        nMontant = 0 ;
      ENDIF ;
      
      CellPutN ( nMontant , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
      
    ENDIF ;

    i = i + 1 ;
    
  END ;
  
# Méthode Charges annuelles N-1 : On récupère le total de l'année de référence et on le mensualise
ELSEIF ( sMethodeSaisie @= 'Charge_Annuel_N-1') ;

  nMontantAnnuel = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , 'Total_Mois' , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
  nMontant = nMontantAnnuel \ 12 ;
  
  # Boucle sur les mois pour répartir le total annuel
  nTailleBoucle = DIMSIZ( 'Mois' );
  i = 1 ;
  
  while( i <= nTailleBoucle );
  
    sMois = DIMNM( 'Mois' , i );
    
    IF ( ELLEV( 'Mois' , sMois ) = 0 & i >= nFirstMoisPrev );
      CellPutN ( nMontant , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
    ENDIF ;

    i = i + 1 ;
  END ;

# Méthode Trimestre annuelles N-1 : On récupère le total de chaque trimestre de l'année de référence et on le pose sur chaque trimestre
ELSEIF ( sMethodeSaisie @= 'Charge_Trim_N-1') ;

  # On récupère le montant de chaque trimestre
  nMontantT1 = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , 'T1' , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
  nMontantT2 = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , 'T2' , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
  nMontantT3 = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , 'T3' , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
  nMontantT4 = CellGetN ( sCubeSource , sExerciceSource , sVersionSource , sScenarioSource , 'T4' , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
  
  # On le rapporte au mois
  nMontantT1 = nMontantT1 \ 3 ; 
  nMontantT2 = nMontantT2 \ 3 ; 
  nMontantT3 = nMontantT3 \ 3 ; 
  nMontantT4 = nMontantT4 \ 3 ; 
  
  # Boucle sur les mois pour répartir le total Trimestre
  nTailleBoucle = DIMSIZ( 'Mois' );
  i = 1 ;
  
  while( i <= nTailleBoucle );
  
    sMois = DIMNM( 'Mois' , i );
    sTrim = ELPAR( 'Mois', sMois , 1 ) ;
        
    IF ( ELLEV( 'Mois' , sMois ) = 0 & i >= nFirstMoisPrev );
      IF ( sTrim @= 'T1' ) ;
        CellPutN ( nMontantT1 , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
      ELSEIF ( sTrim @= 'T2' ) ;
        CellPutN ( nMontantT2 , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;    
      ELSEIF ( sTrim @= 'T3' ) ;
        CellPutN ( nMontantT3 , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
      ELSEIF ( sTrim @= 'T4' ) ;        
        CellPutN ( nMontantT4 , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , sMois , Magasin , Poste_Budgetaire , m_Compte_Exploitation ) ;
      ENDIF ;
    ENDIF ;
    
    i = i + 1 ;
    
  END ;

ENDIF ;



#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion