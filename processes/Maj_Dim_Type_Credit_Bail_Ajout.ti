#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : BNS
# DATE DE CREATION : 17/10/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Ajout d'élément dans la dimension Type Credit Bail
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.txt' ;


###############################   FIN MONITORING   #################################

### Controle des paramètres  ###

# Les paramètres ne peuvent être vides
IF ( pType_Credit_Bail @= '' % pLibelle @= '' ) ;
  sMessage = 'Les paramètres ne peuvent être vides' ;
  ItemReject( sMessage );
  ProcessBreak ;
ENDIF ;

# Le code de l'élément a créer ne peut avoir de caractère spéciaux
IF ( SCAN( ' ' , pType_Credit_Bail ) <> 0 % SCAN( '&' , pType_Credit_Bail ) <> 0 % SCAN( '/' , pType_Credit_Bail ) <> 0 % SCAN( '%' , pType_Credit_Bail ) <> 0 % SCAN( CHAR ( 39 ) , pType_Credit_Bail ) <> 0 % SCAN( '"' , pType_Credit_Bail ) <> 0
% SCAN( '\' , pType_Credit_Bail ) <> 0 % SCAN( '(' , pType_Credit_Bail ) <> 0 % SCAN( ')' , pType_Credit_Bail ) <> 0 % SCAN( '@' , pType_Credit_Bail ) <> 0 % SCAN( '{' , pType_Credit_Bail ) <> 0 % SCAN( '}' , pType_Credit_Bail ) <> 0 
% SCAN( 'é' , pType_Credit_Bail ) <> 0 % SCAN( '$' , pType_Credit_Bail ) <> 0 % SCAN( '*' , pType_Credit_Bail ) <> 0 % SCAN( '|' , pType_Credit_Bail ) <> 0 % SCAN( ':' , pType_Credit_Bail ) <> 0 % SCAN( ',' , pType_Credit_Bail ) <> 0 
% SCAN( '!' , pType_Credit_Bail ) <> 0 % SCAN( '<' , pType_Credit_Bail ) <> 0 % SCAN( '>' , pType_Credit_Bail ) <> 0 % SCAN( '-' , pType_Credit_Bail ) <> 0 % SCAN( '+' , pType_Credit_Bail ) <> 0 % SCAN( '?' , pType_Credit_Bail ) <> 0
% SCAN( '~' , pType_Credit_Bail ) <> 0 % SCAN( ';' , pType_Credit_Bail ) <> 0 ) ;

  sMessage = 'Le code ' | pType_Credit_Bail | ' contient des caractères spéciaux' ;
  ItemReject( sMessage );
  ProcessBreak ;
ENDIF ;


# Variabilisation de la dim cible
sDim = 'Type_Credit_Bail' ;

# Définition de l'élément total de la dimension
sTotal = 'Total_Type_Credit_Bail' ;

# Création des attributs
AttrInsert( sDim , '' , 'Description', 'A' );

# Trie de la dimension
DimensionSortOrder( sDim , 'ByInput', 'Ascending', 'ByHierarchy', 'Ascending' );

# Alimentation de l'élément

DimensionElementInsertDirect( sDim , '', pType_Credit_Bail , 'N');
DimensionElementInsertDirect( sDim , '', sTotal , 'C');
DimensionElementComponentAddDirect( sDim , sTotal , pType_Credit_Bail , 1 );

# Alimentation de l'attribut en épilogue car élément pas encore présent même avec un InsertDirect

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Alimentation des attributs
AttrPutS( pLibelle , sDim , pType_Credit_Bail , 'Description' );
AttrPutS( 'Total Type Crédit Bail', sDim , sTotal , 'Description' );

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion