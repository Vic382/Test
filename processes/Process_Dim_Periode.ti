#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*****************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 02/11/2020
# DESCRIPTION DU PROCESSUS : Création d'un axe temps avec mise à jour des dates
# /!\ ATTENTION /!\ Ce processus efface et reconstruit la données !
# Ce processus construit la dimension temps en fonction des données présentent dans
# le cube Param_Periode
# /!\ ATTENTION /!\ 
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# MODIFICATION:
#*****************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# Pour échanger avec Process_Log_Create
NumericGlobalVariable ('zLogNumero') ;

sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ;

nDebug = 0 ; 


#***********************************************************************************************************
#                                  Initialisation des variables
#***********************************************************************************************************
zLogNumero         = 1 ;
vFlagErreur           = 0;
vMessage              = '';

sCubeAttrMois = '}ElementAttributes_Mois' ;
sDimMois = 'Mois' ;

sAnnee_Debut = pAnneeDebut ;
sAnnee_Fin = pAnneeFin ;

sMoisDebut = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisDebut ) , 2 , 2 ) ;
sMoisFin = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisFin ) , 2 , 2 ) ;


#***********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************



#***********************************************************************************************************
#                                  Contrôle des paramètres
#***********************************************************************************************************

IF ( pAnneeDebut @= '' % pAnneeFin @= '' % pMoisDebut @= '' % pMoisFin @= '' ) ;
  ProcessBreak;
ENDIF ;

IF ( StringToNumber( sAnnee_Fin ) < StringToNumber( sAnnee_Debut));
  ProcessBreak;
ENDIF;

#*******************************************************************************************************************************
#**********************************************   Déclaration des variables  ***************************************************
#*******************************************************************************************************************************

### Erreur ###
nErreurs = 0;

sDimPeriode = 'Periode';
sDimMois = 'Mois' ;


IF ( DimensionExists ( sDimPeriode ) = 0 ) ;
  DimensionCreate ( sDimPeriode ) ;
ENDIF ;

sToday = TimSt( Now, '\Y-\m-\d');
DimensionElementInsertDirect ( sDimPeriode , '' , sToday , 'N' ) ;
sActual = attrs( sDimPeriode , sToday , 'Code_Exercice') ;

nActual = StringToNumber ( sActual ) ;
#sAnneeMax =  DIMNM('Exercice', DIMSIZ('Exercice')) ;
sAnneeMax = pAnneeFin ;
nAnneeMax = StringToNumber(sAnneeMax) ;
sMoisFin = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisFin ) , 2 , 2 ) ;
nNbJours = CellGetN ( sCubeAttrMois , pMoisFin , 'NB_DAYS' ) ;
sNbJours = NumberToString ( nNbJours ) ;
sDateMax = sAnnee_Fin | '-' | sMoisFin | '-' | sNbJours  ;  

sAnneeDebut = pAnneeDebut ;
sMoisDebut = SUBST ( DimensionElementPrincipalName ( sDimMois , pMoisDebut ) , 2 , 2 ) ;
sDateMin = sAnneeDebut  | '-04-01' ;
nDateMinNum = DAYNO( sAnneeDebut ) ;

## Permet de traiter les semaines qui change d'exercice (ex: Se48 % Se49)
#sDateDebutAnneeMin =  sAnneeDebut  | '-' | sMoisDebut | '-01' ;
sDateDebutAnneeMin =  sAnneeDebut  | '-04-01' ;
 # 0 = Dimanche, 1 = Lundi to 6 = Samedi.   21915 = jours entre 01/01/1900 et 01/01/1960
nTypeJourDebutAnneeMin =  Mod ( DayNo( sDateDebutAnneeMin ) + 21915, 7) ;

IF ( nTypeJourDebutAnneeMin = 1 ) ;
  nTypeJour = 1 ;
ELSEIF ( nTypeJourDebutAnneeMin = 2 ); 
  nTypeJour = 2 ;
ELSEIF ( nTypeJourDebutAnneeMin = 3 ); 
  nTypeJour = 3 ;
ELSEIF ( nTypeJourDebutAnneeMin = 4 ); 
  nTypeJour = 4 ;
ELSEIF ( nTypeJourDebutAnneeMin = 5 ); 
  nTypeJour = 5 ;
ELSEIF ( nTypeJourDebutAnneeMin = 6 ); 
  nTypeJour = 6 ;
ELSEIF ( nTypeJourDebutAnneeMin = 7 ); 
  nTypeJour = 7 ;
ENDIF;

nRatSem = nTypeJour ;
nRatSemData = nTypeJour ;
nTrouve = 0 ;
nUnique = 0 ;



###########################

## Insertion des éléments
#DimensionDeleteAllElements( sDimPeriode );
DIMENSIONELEMENTINSERT( sDimPeriode ,'', 'Total_Periode' ,'C');
DIMENSIONELEMENTINSERT( sDimPeriode ,'', 'Total_Hier_Principale' ,'C');
#DIMENSIONELEMENTINSERT( sDimPeriode ,'', 'Total_Hier_Semaine' ,'C');

DIMENSIONSORTORDER( sDimPeriode , 'BYINPUT' ,'ASCENDING', 'BYHIERARCHY'  ,'ASCENDING');

## Création des Attributs

AttrInsert ( sDimPeriode , '' , 'Libelle' , 'A' );
AttrInsert ( sDimPeriode , '' , 'Nom Jour' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Jour Férié' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Numéro Semaine' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Exercice' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Code_Exercice' , 'S' );
AttrInsert ( sDimPeriode , '' , 'Num_Annee' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Semestre' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Trimestre' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Mois' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Num_Semaine' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Mois_Suivant' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Mois_Precedent' , 'N' );
AttrInsert ( sDimPeriode , '' , 'Nom_Semaine' , 'S' );

###########################################
## Creation vue zero sur MON CUBE
###########################################
sCubeSource = 'Param_Periode' ;

# Désactivation du logging -> Réactivation en Epilog
sLogChanges = CubeGetLogChanges( sCubeSource );
CubeSetLogChanges( sCubeSource  , 0 );

sDimSource1 = 'Annee_Calendaire';
sDimSource = 'm_Param_Periode';

sVueSource = 'zTI_' | GetProcessName();

IF( ViewExists( sCubeSource , sVueSource ) = 1 );
  ViewDestroy( sCubeSource , sVueSource );
ENDIF;
ViewCreate( sCubeSource , sVueSource , nDebug   );

# ANNEE_CALENDAIRE

IF( SubsetExists( sDimSource1 , sVueSource ) = 1 ) ;
  SubsetDestroy( sDimSource1 , sVueSource ) ;
ENDIF ;

SubsetCreate( sDimSource1 , sVueSource , nDebug  );

sElementMax = DIMIX ( sDimSource1 , sDateMax ) ;
sElementMin = DIMIX ( sDimSource1 , sDateDebutAnneeMin ) ;
WHILE( sElementMin <= sElementMax );
  sElement  =  DIMNM ( sDimSource1 , sElementMin ) ; 
  IF ( ELLEV ( sDimSource1 , sElement  ) = 0 ) ;
    SubsetElementInsert( sDimSource1 , sVueSource , sElement , 1 ) ;
  ENDIF;
sElementMin = sElementMin +1 ;
END ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource1 , sVueSource );

# M_PARAM_PERIODE
IF( SubsetExists( sDimSource , sVueSource ) = 1 );
  SubsetDestroy( sDimSource , sVueSource );
ENDIF;
SubsetCreate( sDimSource , sVueSource , nDebug  );
SubsetElementInsert( sDimSource , sVueSource , 'Num_Semaine' , 1 );
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource , sVueSource );

DatasourceCubeview= sVueSource ;
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 0) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

IF ( DAYNO( Annee_Calendaire) <  DAYNO( sDateMin ) ) ;
  nRatSem = nRatSem - 1 ;
  IF ( nRatSem <= 0 );
    nRatSem = 7 ;
  ENDIF;
  ItemSkip;
ENDIF;

## Annee
sAnnee = CELLGETS ( sCubeSource , Annee_Calendaire , 'Annee' ) ;
sAnneeSai = sAnnee | '_Sai' ;
sAnneeSem = sAnnee | '_Sem' ;
## Exercice
sExercice = CellGetS ( sCubeSource , Annee_Calendaire, 'Exercice' )  ;
sExerciceCourt = SUBST ( sExercice , 3 , 2 ) ;
sExerciceSem = sExercice | '_Sem' ;
nExercice = StringToNumber ( sExercice ) ;
## Divers 
sMois = SUBST( Annee_Calendaire , 6 , 2 ) ;
sJour = SUBST( Annee_Calendaire , 9 , 2 ) ;
sSemaine  = CELLGETS ( sCubeSource , Annee_Calendaire , 'Num_Semaine' ) ;
sSemaineCourt = SUBST ( sSemaine , 1 , 1 ) | SUBST ( sSemaine , 3 , 2 ) ;

## Pour ne pas créer d'élement sur l'execice max.
IF ( nExercice > nAnneeMax ) ;
  ItemSkip;
ENDIF;

## Annee Mois
sAnneeMois = sAnnee| '-' | sMois ;
sQuarter = CellGetS ( sCubeSource , Annee_Calendaire, 'Trimestre' ) | '-' | sExercice ;
sSemester =  CellGetS ( sCubeSource , Annee_Calendaire, 'Semestre' ) | '-' | sExercice ;

DIMENSIONELEMENTINSERT ( sDimPeriode ,'', Annee_Calendaire ,'N' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sAnneeMois  ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sQuarter ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sSemester ,'C' );
DIMENSIONELEMENTINSERT ( sDimPeriode ,'', sExercice ,'C' );
 
## Hierarchie Principale ##
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sAnneeMois , Annee_Calendaire ,1 );
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sQuarter , sAnneeMois ,1 );
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sSemester , sQuarter ,1 );
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , sExercice , sSemester ,1 );
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , 'Total_Hier_Principale' , sExercice ,1 );
DIMENSIONELEMENTCOMPONENTADD( sDimPeriode , 'Total_Periode' , 'Total_Hier_Principale' ,1 );



############################################################################
####################################
## Partie Attribut des éléments consolidés
####################################

sMoisAttr = 'M' | sMois ;
sSemestre =  SUBST ( AttrS ( 'Mois' , sMoisAttr , 'SEMESTER' ) , 2 , 1 ) ;
sTrimestre = SUBST ( AttrS (  'Mois', sMoisAttr ,'QUARTER' ) , 2 , 1 ) ;
sNumSemaine = CellGetS ( 'Param_Periode' , Annee_Calendaire , 'Num_Semaine' ) ;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

IF ( DAYNO( Annee_Calendaire) <  DAYNO( sDateMin ) ) ;
  nRatSemData = nRatSemData - 1 ;
  IF ( nRatSemData <= 0 );
    nRatSemData = 7 ;
  ENDIF;
  ItemSkip;
ENDIF;
  
sDateFormat = SUBST ( Annee_Calendaire , 9 , 2 ) | '/' | SUBST ( Annee_Calendaire , 6 , 2 ) | '/' | SUBST ( Annee_Calendaire , 1 , 4 ) ;
  
sAnnee = SUBST( Annee_Calendaire , 1 , 4 ) ;
sAnneePrec = NumberToString ( StringToNumber( sAnnee )  - 1) ;
sNumExercice = CellGetS ( sCubeSource , Annee_Calendaire, 'Exercice' )  ;
sExercice =  CellGetS ( sCubeSource , Annee_Calendaire, 'Exercice' )  ;
  
## Pour ne pas créer d'élement sur l'execice max.
IF ( nExercice >  nAnneeMax ) ;
  ItemSkip;
ENDIF;

sAnneePrec = NumberToString ( StringToNumber( sAnnee )  - 1) ;
nNumSemaineEnCours = StringToNumber ( SUBST ( Valeur, 3, 2 ) ) ;
  
## Libelle 
AttrPutS (  sDateFormat , sDimPeriode , Annee_Calendaire ,  'Libelle' );
## Num Semaine
AttrPutS ( Valeur , sDimPeriode , Annee_Calendaire , 'Numéro Semaine' ) ;
## Jour Ferie
nJourFerie = CellGetN( sCubeSource , Annee_Calendaire , 'Jour_Ferie' );
AttrPutN ( nJourFerie , sDimPeriode , Annee_Calendaire , 'Jour Férié' ) ;
## Nom Jour
sNomJour = CellGetS ( sCubeSource , Annee_Calendaire , 'Nom_Jour' );
AttrPutS ( sNomJour , sDimPeriode , Annee_Calendaire , 'Nom Jour' ) ;
##Exercice
AttrPutN ( StringToNumber ( sNumExercice ) , sDimPeriode , Annee_Calendaire , 'Exercice' ) ;
AttrPutS ( sNumExercice  , sDimPeriode , Annee_Calendaire , 'Code_Exercice' ) ;
AttrPutS ( 'Total Période', sDimPeriode ,  'Total_Periode'  , 'Libelle' ) ;
AttrPutS ( 'Total Hiérarchie Principale', sDimPeriode ,  'Total_Hier_Principale'  , 'Libelle' ) ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#endregion