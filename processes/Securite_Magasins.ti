#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 09/12/2021
# DERNIERE MODIFICATION FFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# Mise à jour de la sécurité pour la dimension magasin
#***********************************************************************************************************

#------------------------------------------------ MONITORING  ------------------------------------------------#

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

#**********************************************************************************************************
#                               MAJ SECURITY USER GROUP
#**********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;
sCubeParamS = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

##Définition des variables:

nDebug = 1 ;

##Définition du fichier source

# Récupération du fichier source
sNomFichier = CellGetS ( sCubeParamP , cMainProcName , 'Txt_NomFichier' ) ;
sRepertoireSource = CellGetS ( sCubeParamP , cMainProcName , 'Txt_RepertoireSource' ) ;
sFichierSource = sRepertoireSource | sNomFichier | '.csv' ;

DataSourceNameForServer = sFichierSource ;
DataSourceASCIIDelimiter = ';' ;


###########################################
## Creation vue zero sur MON CUBE
###########################################

###****Déclaration des variables

sCube = '}ElementSecurity_Magasin' ;
sDimMagasin = 'Magasin' ;
sDimGroupe = '}Groups';

sVueZero = 'zTI_' | cMainProcName | '_Zero';

IF( ViewExists( sCube, sVueZero ) = 1 );
  ViewDestroy( sCube, sVueZero );
ENDIF;
ViewCreate( sCube, sVueZero , nDebug );

sDimension = 'Magasin' ;
IF( SubsetExists( sDimension , sVueZero ) = 1 );
  SubsetDestroy( sDimension , sVueZero );
ENDIF;
StringMDX = 'TM1SUBSETALL( ['|sDimension |'] )';
SubsetCreatebyMDX( sVueZero , StringMDX , nDebug );
ViewSubsetAssign( sCube, sVueZero , sDimension , sVueZero );

sDimension = '}Groups';
IF( SubsetExists( sDimension , sVueZero ) = 1 );
  SubsetDestroy( sDimension , sVueZero );
ENDIF;
StringMDX = 'EXCEPT ( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [}Groups] )}, 0)}, { [}Groups].[ADMIN] , [}Groups].[SecurityAdmin] , [}Groups].[DataAdmin] , [}Groups].[OperationsAdmin] , [}Groups].[}tp_Everyone] } )';
SubsetCreatebyMDX( sVueZero , StringMDX , nDebug );
ViewSubsetAssign( sCube , sVueZero , sDimension , sVueZero );

ViewZeroOut( sCube, sVueZero );


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


##**Affectation des users par groupe.
IF ( ELLEV ( sDimMagasin  , Code_Magasin ) <> 0 ) ; 
  CellPutS ( 'READ' , sCube , Code_Magasin , Groupe ) ;
ELSE;
  CellPutS ( Droit , sCube , Code_Magasin , Groupe ) ;
ENDIF ;

nTailleBoucle = DIMSIZ ( sDimMagasin ) ; 
While ( nTailleboucle > 0 ) ;
  sMagasin = DIMNM ( sDimMagasin  , nTailleBoucle )  ;
  nParent = ELISANC(  sDimMagasin  , Code_Magasin , sMagasin ) ; 
  Asciioutput ( '..\debug\testSecu.txt'   ,  Code_Magasin  , sMagasin , NumberToString ( nParent ) )  ; 
  IF ( nParent = 1 )  ;
    IF ( ELLEV ( sDimMagasin  , sMagasin ) <> 0 ) ; 
      CellPutS ( 'READ' , sCube , sMagasin , Groupe ) ;
    ELSE ; 
      CellPutS ( Droit , sCube , sMagasin , Groupe ) ;
    ENDIF; 
  ENDIF ;
  nTailleBoucle = nTailleBoucle - 1 ; 
  # Fin des traitements de la boucle, on retourne au ‘’While’’ pour faire le test de condition	

End ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#------------------------------------------------ MONITORING  ------------------------------------------------#
# Declaration variables et constantes
Z_FIN_EXE = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE = Subst(TODAY(1),1,4) | subst(TODAY(1),6,2);
Z_STATUS = IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION = Z_FIN_EXE - Z_DEBUT_EXE;
Z_LOCAL_TIME =   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
Z_UTILISATEUR = TM1User;

# Nettoyage -> CAMID("pans:u:cty@dimosoftware.com") into 'cty@dimosoftware.com'
nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
sUser = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

# Ecriture des informations sur le processus dans le cube ParametresSources                       
CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( sUser, sCubeParamS , cMainProcName ,'txt_Utilisateur' );
#CELLPUTS( Mois, sCubeParamS , cMainProcName ,'DernRef' );
#------------------------------------------------ FIN - MONITORING  -------------------------------------------#
#endregion