#region Prolog

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 23/10/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Initialisation des quantités budget dans le cube Achat_Sac
# Récupération des ventes budget sur 2 mois
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;


###############################   FIN MONITORING   #################################

# Définition des variables

# Variables
nNombreMagasin = 0 ;
nTotalMontant = 0 ;
nTotalMontantSuivant = 0 ;

# Cubes
sCubeAttrMois = '}ElementAttributes_Mois' ;
sCubeParamCond = 'Param_Conditionnement_Sac' ;

# Définition du périmètre
# La source et la cible sont toujours le prévisionnel

sScenario = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));
sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
sVersion = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

# Controle du scénario cible
# Si Réel, on ne fait rien
nErrorScenario = 0 ;

IF ( sScenario @= 'REEL' ) ;
    nErrorScenario = 1 ;
    ProcessBreak;
ENDIF ;

###########################################
## Creation vue SOURCE sur Vente_Sac
###########################################

### Déclaration des variables
sCubeSource = 'Vente_Sac';
sDimSource1 = 'Exercice';
sDimSource2 = 'Version' ; 
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Mois' ; 
sDimSource5 = 'Type_Sac' ; 
sDimSource6 = 'Magasin' ; 
sDimSource = 'm_Vente_Sac';

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeSource, sVueSource ) = 1 );
  ViewDestroy( sCubeSource, sVueSource );
ENDIF;
ViewCreate( sCubeSource, sVueSource , nDebug );

# Exercice
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 

# Version
SubsetDestroy ( sDimSource2 , sSubsetSource ) ;
SubsetCreate ( sDimSource2 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sSubsetSource , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 

# Scenario
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sSubsetSource , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
IF ( sScenario @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ELSE ;

  SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenario , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimSource4 );
  i = 1 ;

  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimSource4 , i );
  
    # Contrôle avec l'index du 1er mois simulation
    IF ( ELLEV ( sDimSource4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimSource4 , sSubsetSource , sMois , 1 );
    ENDIF ;
  
    i = i + 1 ;
  
  END ;

ENDIF ;

ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 

# Type Sac
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 

# Magasin : Tous les magasins exceptés ceux qui ont une date d'ouverture sur le mois budget
SubsetDestroy ( sDimSource6 , sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sSubsetSource ) ; 

# m_Vente_Sac
SubsetDestroy ( sDimSource , sSubsetSource ) ; 
SubsetCreate ( sDimSource , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sSubsetSource , 'Quantite' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ;

ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 0 );

# Redéfinition de la source de donnée
DatasourceCubeview = sVueSource ;
DatasourceNameForServer = sCubeSource ;


###########################################
## Creation vue CIBLE sur Achat_Sac
###########################################

### Déclaration des variables
sCubeCible = 'Achat_Sac';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Type_Sac' ; 
sDimCible6 = 'Magasin' ; 
sDimCible = 'm_Achat_Sac';

# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
IF ( sScenario @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ELSE ;

  SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenario , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimCible4 );
  i = 1 ;

  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimCible4 , i );
  
    # Contrôle avec l'index du 1er mois simulation
    IF ( ELLEV ( sDimCible4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimCible4 , sSubsetZero , sMois , 1 );
    ENDIF ;
  
    i = i + 1 ;
  
  END ;

ENDIF ;

ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Type Sac
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Magasin
SubsetDestroy ( sDimCible6 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# m_Achat_Sac
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Quantite' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Data

# Récupération de la date d'ouverture
sDateOuv = CellGetS ( '}ElementAttributes_Magasin' , Magasin , 'Date_Ouverture' ) ;
 
# Redéfinition de la date au format AAAA-MM-JJ
sAnneeDateOuv = SUBST ( sDateOuv , 7 , 4 ) ;
sMoisDateOuv = SUBST ( sDateOuv , 4 , 2 ) ;
sJourDateOuv = SUBST ( sDateOuv , 1 , 2 ) ; 
 
sDateOuv = sAnneeDateOuv | '-' | sMoisDateOuv | '-' | sJourDateOuv ;
 
# Transformation de la date en valeur numérique pour comparaison
nDateOuv = DayNo( sDateOuv );
 
# Dénition de la date de début de mois parcouru
# L'exercice étant décalé de l'année civile, traitement différent si le mois est Janvier, Fevrier ou Mars
 
IF ( Mois @= 'M01' % Mois @= 'M02' % Mois @= 'M03') ;
  sDateDebut = SUBST ( Exercice , 6 , 4 ) | '-' | SUBST ( Mois , 2 , 2 ) | '-' | '01' ;
ELSE ;
  sDateDebut = SUBST ( Exercice , 1 , 4 ) | '-' | SUBST ( Mois , 2 , 2 ) | '-' | '01' ;
ENDIF ;
 
# Transformation de la date en valeur numérique pour comparaison
nDateDebut = DAYNO ( sDateDebut ) ;
 
# Dénition de la date de fin de mois parcouru
# L'exercice étant décalé de l'année civile, traitement différent si le mois est Janvier, Fevrier ou Mars
 
# Récupération du dernier jour du mois
sJour = CellGetS ( '}ElementAttributes_Mois' , Mois , 'NB_DAYS') ;
 
# Définition de la date de fin du mois en cours
IF ( Mois @= 'M01' % Mois @= 'M02' % Mois @= 'M03') ;
  sDateFin = SUBST ( Exercice , 6 , 4 ) | '-' | SUBST ( Mois , 2 , 2 ) | '-' | sJour ;
ELSE ;
  sDateFin = SUBST ( Exercice , 1 , 4 ) | '-' | SUBST ( Mois , 2 , 2 ) | '-' | sJour ;
ENDIF ;
 
# Transformation de la date en valeur numérique pour comparaison
nDateFin = DAYNO ( sDateFin ) ;  


################# Traitement des magasins avec une date d'ouverture supérieure au mois en cours #################

IF ( nDateOuv > nDateFin ) ;
  ItemSkip ;
ENDIF ;


################# Traitement des magasins avec une date d'ouverture sur le mois en cours #################

# Si la date d'ouverture du magasin est supérieur au 1er du mois parcouru et inférieur au dernier jour du mois parcouru
IF ( nDateOuv >= nDateDebut & nDateOuv <= nDateFin ) ;

  # Récupération du nombre de carton défini pour une ouverture de magasin
  nCarton = CellGetN ( sCubeParamCond , Exercice , Version , Scenario , Type_Sac , 'Nb_Carton_Ouverture' ) ;
  nSacCarton = CellGetN ( sCubeParamCond , Exercice , Version , Scenario , Type_Sac , 'Nb_Sac_Carton' ) ;
  
  nMontant = nSacCarton * nCarton ;
  
  CellPutN ( nMontant , sCubeCible , Exercice , Version , Scenario , Mois , Type_Sac , Magasin , 'Quantite' ) ;
  
ELSE ;

################# Traitement des magasins avec une date d'ouverture antérieure au mois en cours #################

  # Si le mois est paire, on récupère le montant du mois suivant pour additionner les 2 mois
  IF ( Mois @= 'M04' % Mois @= 'M06' % Mois @= 'M08' % Mois @= 'M10' % Mois @= 'M12' % Mois @= 'M02' ) ;
  
    sMoisSuivant = CellGetS( sCubeAttrMois , Mois , 'Mois_Suivant' );
  
    # On récupère le montant du mois suivant pour l'addition
    nMontantSuivant = CellGetN ( sCubeSource , Exercice , Version , Scenario , sMoisSuivant , Type_Sac , Magasin , m_Vente_Sac ) ;
    nMontantTotal  = Value + nMontantSuivant ;
    
    # Si la somme des 2 mois est égale à 0, on prend la moyenne des 2 mois des magasins ouvert avant la date fixé dans le cube de paramétrage
    # Mais si le magasin ouvre durant le mois parcouru, on initialise les achats avec le nombre de sac renseigné dans le cube de paramétrage
    IF ( nMontantTotal = 0 ) ;
    
      # Récupération de la date de référence dans le cube parametre fonctionnel
      sDateRef = CellGetS ( 'ParametresFonctionnels', 'Date_Reference_Achat_Sac' , 'ValeurS' ) ;
      
      # Redéfinition de la date au format AAAA-MM-JJ
      sAnneeDateRef = SUBST ( sDateRef , 7 , 4 ) ;
      sMoisDateRef = SUBST ( sDateRef , 4 , 2 ) ;
      sJourDateRef = SUBST ( sDateRef , 1 , 2 ) ;  
      
      sDateRef = sAnneeDateRef | '-' | sMoisDateRef | '-' | sJourDateRef ;
      
      # Transformation de la date en valeur numérique pour comparaison
      nDateRef = DayNo( sDateRef );  
          
      # Boucle sur les magasins afin de faire une moyenne des magasins
      i = 1 ;
      nTailleBoucle = DIMSIZ( 'Magasin' );
  
      WHILE ( i <= nTailleBoucle ) ;
      
        sMagasin = DIMNM( 'Magasin' , i );
  
        # On ne traite que les éléments fins de la dimension Magasin
        IF ( ELLEV ( 'Magasin' , sMagasin ) = 0 ) ;
  
          # Récupération de la date d'ouverture
          sDateOuv = CellGetS ( '}ElementAttributes_Magasin' , sMagasin , 'Date_Ouverture' ) ;
        
          # Redéfinition de la date au format AAAA-MM-JJ
          sAnneeDateOuv = SUBST ( sDateOuv , 7 , 4 ) ;
          sMoisDateOuv = SUBST ( sDateOuv , 4 , 2 ) ;
          sJourDateOuv = SUBST ( sDateOuv , 1 , 2 ) ;  
      
          sDateOuv = sAnneeDateOuv | '-' | sMoisDateOuv | '-' | sJourDateOuv ;
  
          # Transformation de la date en valeur numérique pour comparaison
          nDateOuv = DayNo( sDateOuv );
            
          # Traitement seulement si les magasins ont des dates d'ouverture antérieure à la date de référence
          IF ( nDateOuv <= nDateRef ) ;
        
            # Récupération des montants pour le mois parcouru et le mois suivant
            nMontant = CellGetN ( sCubeSource , Exercice , Version , Scenario , Mois , Type_Sac , sMagasin , m_Vente_Sac ) ;
            nMontantSuivant = CellGetN ( sCubeSource , Exercice , Version , Scenario , sMoisSuivant , Type_Sac , sMagasin , m_Vente_Sac ) ;
            
            # Incrémentation d'un compteur pour faire la moyenne
            nNombreMagasin = nNombreMagasin + 1 ;
            
            # Incrémentation des ventes
            nTotalMontant = nTotalMontant + nMontant ;
            nTotalMontantSuivant = nTotalMontantSuivant + nMontantSuivant ;
  
          ENDIF ; 
           
        ENDIF ;
        
        i = i + 1 ;
        
      END ;
      
      nMoyenneMois = nTotalMontant \ nNombreMagasin ;
      nMoyenneMoisSuivant = nTotalMontantSuivant \ nNombreMagasin ;
    
      nMontantTotal = ROUND ( nMoyenneMois ) + ROUND ( nMoyenneMoisSuivant ) ;
  
    ENDIF ;
    
    # Récupération du nombre de sac par carton
    nSacCarton = CellGetN ( sCubeParamCond , Exercice , Version , Scenario , Type_Sac , 'Nb_Sac_Carton' ) ;
    nMargeCarton = CellGetN ( sCubeParamCond , Exercice , Version , Scenario , Type_Sac , 'Marge_Carton' ) ;
    nMargeSac = nMargeCarton * nSacCarton ;
      
    # Arrondi du montant à acheter en fonction du nombre de sac par carton
    # Exemple : Si 100 sacs par carton et que les quantités vendus prévisionnelles sont à 150, on arrondi à 200 car impossible de commander par sac
    nMontant = ROUND( nMontantTotal \ nSacCarton ) * nSacCarton + nMargeSac ;
    
    CellPutN ( nMontant , sCubeCible , Exercice , Version , Scenario , Mois , Type_Sac , Magasin , 'Quantite' ) ;
    
  ENDIF ;

ENDIF ;

# RAZ des compteurs
nMontant = 0 ;
nMontantSuivant = 0 ;
nNombreMagasin = 0 ;
nTotalMontant = 0 ;
nTotalMontantSuivant = 0 ;


#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Si le scénario n'est pas prévisionnel, on génère un message d'erreur
IF ( nErrorScenario <> 0 ) ;
    ItemReject( 'Le scénario sélectionné dans le cube Fonctionnel n' | CHAR ( 39 ) | 'est pas un scénario prévisionnel' ) ;
ENDIF ;
#endregion