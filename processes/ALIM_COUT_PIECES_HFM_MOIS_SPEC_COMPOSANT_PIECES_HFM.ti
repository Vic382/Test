#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 04/01/2024
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# A
#***********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;
sCubeParamF = 'ParametresFonctionnels' ;



#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Permet de définir l'écriture dans le bac à sable actif de l'utilisateur
SetUseActiveSandboxProperty(1) ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# nDebug pour créer des ss-ensemble et vue temporaire
# Si 1 les ss-ensemble et vue temporaire si 0 les ss-ensemble et vue ne seront pas supprimés
nDebug = 1 ;


#**********************************************************************************************************
#                                  DEBUT IMP DATA 
#**********************************************************************************************************
###***Définition de la phase en cours 
sExercice = CellGetS ( sCubeParamF , 'ExerciceEnCours' , 'ValeurS' ) ; 
sScenario = pScenario ;
sVersion = CellGetS ( sCubeParamF , 'VersionEnCours' , 'ValeurS' ) ;

sCubeStockComposant = 'STOCK_COMPOSANT_PIECES_HFM' ;
sDimComposant = 'COMPOSANT_PIECES_HFM' ;
###########################################
## Creation vue source SPEC_COMPOSANTS_PIECES_HFM
###########################################

###****Déclaration des variables

sCubeSource = 'SPEC_COMPOSANTS_PIECES_HFM' ;

sDimSource1 = 'EXERCICES' ;
sDimSource2 = 'Scenario' ;
sDimSource3 = 'Version' ;
sDimSource4 = 'PIECES_HFM' ;
sDimSource5 = 'FOURNISSEUR' ;
sDimSource6 = 'COMPOSANT_PIECES_HFM' ;
sDimSource7 = 'DEVISES' ;
sDimSource8 = 'MOIS' ;
sDimSource = 'm_SPEC_COMPOSANTS_PIECES_HFM' ;

sVueSource = 'zTI_' | cMainProcName | '_Source';

IF( ViewExists( sCubeSource , sVueSource ) = 1 );
  ViewDestroy( sCubeSource , sVueSource );
ENDIF;
ViewCreate( sCubeSource , sVueSource , nDebug );

# EXERCICES
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource1 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource1 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sVueSource , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sVueSource ) ; 

# Scenario
IF( SubsetExists( sDimSource2 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource2 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource2 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sVueSource , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sVueSource ) ; 

# Version
IF( SubsetExists( sDimSource3 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource3 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource3 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sVueSource , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sVueSource ) ; 

# PIECES_HFM
IF( SubsetExists( sDimSource4 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource4 , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimSource4|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource4 , sVueSource );

# Fournisseur
IF( SubsetExists( sDimSource5 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource5 , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimSource5|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource5 , sVueSource );

# COMPOSANT_PIECES_HFM
IF( SubsetExists( sDimSource6 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource6 , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimSource6|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource6 , sVueSource );

# Devise
IF( SubsetExists( sDimSource7 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource7 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource7 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource7 , sVueSource , 'EUR_HFM' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource7 , sVueSource ) ; 

# Mois
IF( SubsetExists( sDimSource8 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource8 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource8 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource8 , sVueSource , pMois , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource8 , sVueSource ) ; 

# m_SPEC_COMPOSANTS_PIECES_HFM
IF( SubsetExists( sDimSource , sVueSource ) = 1 );
  SubsetDestroy( sDimSource , sVueSource ); 
ENDIF;
SubsetCreate ( sDimSource , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sVueSource , 'Q_PIECE_COMPOSANT_PIECES_HFM', nDebug ) ; 
SubsetElementInsert ( sDimSource , sVueSource , 'Q_PIECES_HFM' , nDebug ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sVueSource ) ; 

#Définition de la source

ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 1);
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSource , 0);
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1);

DataSourceNameForServer = sCubeSource ;
DatasourceCubeView = sVueSource ;

###########################################
## Creation vue zero pour le cube COUTS_PIECES_HFM
###########################################


###****Déclaration des variables

sCube = 'COUTS_PIECES_HFM' ;

sDim1 = 'EXERCICES' ;
sDim2 = 'Scenario' ;
sDim3 = 'Version' ;
sDim4 = 'PIECES_HFM' ;
sDim5 = 'FOURNISSEUR' ;
sDim6 = 'COMPOSANT_PIECES_HFM' ;
sDim7 = 'DEVISES' ;
sDim8 = 'MOIS' ;
sDim = 'm_COUT_PIECES_HFM' ;


sVueZero = 'zTI_' | cMainProcName | '_Zero';

IF( ViewExists( sCube , sVueZero ) = 1 );
  ViewDestroy( sCube , sVueZero );
ENDIF;
ViewCreate( sCube , sVueZero , nDebug );

# EXERCICES
IF( SubsetExists( sDim1 , sVueZero ) = 1 );
  SubsetDestroy( sDim1 , sVueZero );
ENDIF;
SubsetCreate ( sDim1 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim1 , sVueZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCube , sVueZero , sDim1 , sVueZero ) ; 

# Scenario
IF( SubsetExists( sDim2 , sVueZero ) = 1 );
  SubsetDestroy( sDim2 , sVueZero );
ENDIF;
SubsetCreate ( sDim2 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim2 , sVueZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCube , sVueZero , sDim2 , sVueZero ) ; 

# Devise
IF( SubsetExists( sDim3 , sVueZero ) = 1 );
  SubsetDestroy( sDim3 , sVueZero );
ENDIF;
SubsetCreate ( sDim3 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim3 , sVueZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCube , sVueZero , sDim3 , sVueZero ) ; 

# PIECES_HFM
IF( SubsetExists( sDim4 , sVueZero ) = 1 );
  SubsetDestroy( sDim4 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim4|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCube , sVueZero , sDim4 , sVueZero );

# Fournisseur
IF( SubsetExists( sDim5 , sVueZero ) = 1 );
  SubsetDestroy( sDim5 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim5|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCube , sVueZero , sDim5 , sVueZero );

# COMPOSANT_PIECES_HFM
IF( SubsetExists( sDim6 , sVueZero ) = 1 );
  SubsetDestroy( sDim6 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim6|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCube , sVueZero , sDim6 , sVueZero );

# Devise
IF( SubsetExists( sDim7 , sVueZero ) = 1 );
  SubsetDestroy( sDim7 , sVueZero );
ENDIF;
SubsetCreate ( sDim7 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim7 , sVueZero , 'EUR_HFM' , nDebug ) ;
ViewSubsetAssign ( sCube , sVueZero , sDim7 , sVueZero ) ; 

# Mois
IF( SubsetExists( sDim8 , sVueZero ) = 1 );
  SubsetDestroy( sDim8 , sVueZero );
ENDIF;
SubsetCreate ( sDim8 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim8 , sVueZero , pMois , nDebug ) ;
ViewSubsetAssign ( sCube , sVueZero , sDim8 , sVueZero ) ; 

# m_COUT_PIECES_HFM
IF( SubsetExists( sDim , sVueZero ) = 1 );
  SubsetDestroy( sDim , sVueZero ); 
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim|'] )}, 0)}' , nDebug );
ViewSubsetAssign ( sCube , sVueZero , sDim , sVueZero ) ; 


ViewZeroOut( sCube , sVueZero );


###########################################
## Creation vue zero sur STOCK_COMPOSANT_PIECES_HFM
###########################################

###****Déclaration des variables

sCubeStock = 'STOCK_COMPOSANT_PIECES_HFM' ;

sDim1 = 'EXERCICES' ;
sDim2 = 'Scenario' ;
sDim3 = 'Version' ;
sDim4 = 'COMPOSANT_PIECES_HFM' ;
sDim5 = 'DEVISES' ;
sDim6 = 'MOIS' ;
sDim = 'm_STOCK_COMPOSANTS_PIECES_HFM' ;


sVueZero = 'zTI_' | cMainProcName | '_Zero_1';

IF( ViewExists( sCubeStock , sVueZero ) = 1 );
  ViewDestroy( sCubeStock , sVueZero );
ENDIF;
ViewCreate( sCubeStock , sVueZero , nDebug );

# EXERCICES
IF( SubsetExists( sDim1 , sVueZero ) = 1 );
  SubsetDestroy( sDim1 , sVueZero );
ENDIF;
SubsetCreate ( sDim1 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim1 , sVueZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeStock , sVueZero , sDim1 , sVueZero ) ; 

# Scenario
IF( SubsetExists( sDim2 , sVueZero ) = 1 );
  SubsetDestroy( sDim2 , sVueZero );
ENDIF;
SubsetCreate ( sDim2 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim2 , sVueZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeStock , sVueZero , sDim2 , sVueZero ) ; 

# Version
IF( SubsetExists( sDim3 , sVueZero ) = 1 );
  SubsetDestroy( sDim3 , sVueZero );
ENDIF;
SubsetCreate ( sDim3 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim3 , sVueZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeStock , sVueZero , sDim3 , sVueZero ) ; 

# COMPOSANT_PIECES_HFM
IF( SubsetExists( sDim4 , sVueZero ) = 1 );
  SubsetDestroy( sDim4 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim4|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCubeStock , sVueZero , sDim4 , sVueZero );

# Devise
IF( SubsetExists( sDim5 , sVueZero ) = 1 );
  SubsetDestroy( sDim5 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDim5|'] )}, 0)}' , nDebug );
ViewSubsetAssign( sCubeStock , sVueZero , sDim5 , sVueZero );

# Mois
IF( SubsetExists( sDim6 , sVueZero ) = 1 );
  SubsetDestroy( sDim6 , sVueZero );
ENDIF;
SubsetCreate ( sDim6 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim6 , sVueZero , pMois , nDebug ) ;
ViewSubsetAssign ( sCubeStock , sVueZero , sDim6 , sVueZero ) ;

# m_STOCK_COMPOSANTS_PIECES_HFM
IF( SubsetExists( sDim , sVueZero ) = 1 );
  SubsetDestroy( sDim , sVueZero ); 
ENDIF;
SubsetCreate ( sDim , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDim , sVueZero , 'CONSO_SI' , nDebug ) ;
SubsetElementInsert ( sDim , sVueZero , 'Q_STOCK' , nDebug ) ;
SubsetElementInsert ( sDim , sVueZero , 'Q_SPEC' , nDebug ) ;
ViewSubsetAssign ( sCubeStock , sVueZero , sDim , sVueZero ) ; 


ViewZeroOut( sCubeStock , sVueZero );








#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

IF ( m_SPEC_COMPOSANTS_PIECES_HFM @=  'Q_PIECE_COMPOSANT_PIECES_HFM' );

	ExecuteProcess ( 'ALIM_STOCK_COMPOSANT_PIECES_HFM' , 'pExercice' , sExercice , 'pScenario' , sScenario , 'pVersion' , Version , 'pPieces' , COMPOSANT_PIECES_HFM , 'pDevise' , DEVISES , 'pMois' , MOIS , 'pMTO' ,  PIECES_HFM , 'pFournisseur' , FOURNISSEUR , 'pQuantite' , Value );

	nQspecComposant   =  CellGetN( sCubeStock, sExercice, sScenario, Version, COMPOSANT_PIECES_HFM, DEVISES, MOIS, 'Q_SPEC' );

	nStockComposant   =  CELLGETN ( sCubeStock , sExercice , sScenario , Version , COMPOSANT_PIECES_HFM , DEVISES , MOIS ,  'Q_Stock' ) ;


	CELLINCREMENTN ( nQspecComposant  , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR ,  COMPOSANT_PIECES_HFM , DEVISES , MOIS  ,  'Q_Spec_PIECES_HFM' ) ;
	CELLINCREMENTN ( nStockComposant   , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR , COMPOSANT_PIECES_HFM , DEVISES , MOIS  ,  'Q_Stock' ) ;


	IF ( nQspecComposant <>0 ) ;
		nPU_SPEC = CELLGETN ( sCubeSource , sExercice , sScenario , Version ,PIECES_HFM ,  FOURNISSEUR , COMPOSANT_PIECES_HFM , DEVISES , MOIS ,  'PU_SPEC' ) ;
		CELLPUTN (  nPU_SPEC   , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR , COMPOSANT_PIECES_HFM , DEVISES , MOIS  ,  'PU_Spec_PIECES_HFM' ) ;
	ENDIF ;

	IF ( nStockComposant  <>0 ) ;
		nPu_Stock =  CELLGETN ( sCubeStock , sExercice , sScenario , Version , COMPOSANT_PIECES_HFM , DEVISES , MOIS ,  'PU_SI' ) ;
		CELLPUTN ( nPu_Stock , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR , COMPOSANT_PIECES_HFM , DEVISES , MOIS  ,   'PU_Stock' ) ;
	ENDIF;

	CELLPUTN ( Value  , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR , COMPOSANT_PIECES_HFM , DEVISES , MOIS ,  'Q_COMPOSANTS_PIECES_HFM' ) ;

ENDIF;


IF ( m_SPEC_COMPOSANTS_PIECES_HFM @=  'Q_PIECES_HFM' );

	CELLPUTN ( Value  , sCube , sExercice , sScenario , Version , PIECES_HFM , FOURNISSEUR , COMPOSANT_PIECES_HFM ,  DEVISES , MOIS  ,  'Q_Piece_HFM' ) ;

ENDIF;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#------------------------------------------------ MONITORING  ------------------------------------------------#

## DECLARATION DES VARIABLES #

# Statut
Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');

# Fin d'exécution
Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

## EXECUTION DU MONITORING #

# UTILISATEUR
Z_UTILISATEUR = TM1User;

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

#################################
# Informations sur le processus                          #
#################################

# STATUT
CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );

# TIME
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');

# UTILISATEUR
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );
#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion