#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 06/02/2024
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Saisie en masse sur plusieurs magasin
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.txt' ;

###############################   FIN MONITORING   #################################

### Déclaration des variables

# Contrôle des paramètres
IF ( Dimix ( 'Type_Credit_Bail' , pMotif ) = 0 ) ;
    ItemReject ( 'Le motif saisie n' | CHAR ( 39 ) | 'existe pas dans la dimension Type_Credit_Bail' ) ;
    ProcessBreak ;
ENDIF ;

IF ( Dimix ( 'm_Groupe_Magasin' , pGroupe ) = 0 ) ;
    ItemReject ( 'Le groupe saisie n' | CHAR ( 39 ) | 'existe pas dans la dimension m_Groupe_Magasin' ) ;
    ProcessBreak ;
ENDIF ;

# Redéfinition des paramètres
sMotif = DimensionElementPrincipalName( 'Type_Credit_Bail', pMotif  );

# Définition du périmètre
# Selon ParametresFonctionnels
sScenario = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));
sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
sVersion = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

###########################################
## Définition de la source
###########################################

DatasourceDimensionSubset = pGroupe ;
DatasourceNameForServer = 'Magasin' ;

###########################################
## Creation vue CIBLE sur Credit_Bail
###########################################

### Déclaration des variables
sCubeCible = 'Credit_Bail';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Type_Credit_Bail' ;
sDimCible5 = 'Magasin' ; 
sDimCible = 'm_Credit_Bail';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Type_Credit_Bail
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible4 , sSubsetZero , sMotif , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Magasin
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , pGroupe ) ; 

# m_Credit_Bail
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


# Découpage des dates de début
# sJourDeb = SUBST ( pDateDeb , 1 , 2 ) ;
# sMoisDeb = SUBST ( pDateDeb , 4 , 2 ) ;
sAnneeDeb = SUBST ( pDateDeb , 1 , 4 ) ;

# Découpage des dates de fin
# sJourFin = SUBST ( pDateFin , 1 , 2 ) ;
# sMoisFin = SUBST ( pDateFin , 4 , 2 ) ;
sAnneeFin = SUBST ( pDateFin , 1 , 4 ) ;

# Reconstruction des dates au format AAAA-MM-JJ pour fonction DayNo
# sDateDeb = sAnneeDeb | '-' | sMoisDeb | '-' | sJourDeb ;
nDateDeb = DayNo( pDateDeb );

# sDateFin = sAnneeFin | '-' | sMoisFin | '-' | sJourFin ;
nDateFin = DayNo( pDateFin );

# Définition de la date de début de l'exercice
sDateDebExercice = SUBST ( sExercice , 1 , 4 ) | '-04-01' ;
nDateDebExercice = DayNo( sDateDebExercice );

# Définition de la date de fin de l'exercice
sDateFinExercice = SUBST ( sExercice , 6 , 4 ) | '-03-31' ;
nDateFinExercice = DayNo( sDateFinExercice );

# Neutralisation des lignes ayant une date de début postérieur à l'exercice en cours
IF ( nDateDeb > nDateFinExercice ) ;
    ItemReject ( 'La date de début est postérieur à l' | CHAR ( 39 ) | 'exercice en cours') ;
    ProcessBreak ;    
ENDIF ;

# Neutralisation des lignes ayant une date de fin antérieure à l'exercice en cours
IF ( nDateFin < nDateDebExercice ) ;
    ItemReject ( 'La date de fin est antérieur à l' | CHAR ( 39 ) | 'exercice en cours') ;
    ProcessBreak ; 
ENDIF ;

############# Alimentation du cube Credit_Bail #############

# Calcul de la durée
nDuree = StringToNumber ( sAnneeFin ) - StringToNumber ( sAnneeDeb ) ;

CellPutS ( pDateDeb , sCubeCible , sExercice , sVersion , sScenario , sMotif , Magasin , 'Date_Debut' ) ;
CellPutS ( pDateFin , sCubeCible , sExercice , sVersion , sScenario , sMotif , Magasin , 'Date_Fin' ) ;
CellPutN ( pMensualite , sCubeCible , sExercice , sVersion , sScenario , sMotif , Magasin , 'Mensualite' ) ;
CellPutN ( nDuree , sCubeCible , sExercice , sVersion , sScenario , sMotif , Magasin , 'Duree' ) ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion