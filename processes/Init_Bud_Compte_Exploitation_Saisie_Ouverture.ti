#region Prolog

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 09/10/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Initialisation des comptes exploitation selon méthode choisie dans le cube Param_Methode_Saisie
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;


###############################   FIN MONITORING   #################################

### 1. Déclaration des variables

nMontant = 0 ;
nDiviseur = 0 ;

# Cubes
sCubeParam_Methode = 'Param_Methode_Saisie' ;

# Dimensions
sDimMethode = 'Methode_Saisie' ;

# Définition du périmètre
# La source est toujours le Réel N-1 et la cible budget ou forecast

# On récupère l'exercice en cours dans le cube paramètrefonctionnel
sExerciceSource = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));

# On récupère l'index de l'exercice en cours pour récupérer l'exercice précédent dans la dimension
nIndex = DIMIX( 'Exercice', sExerciceSource );
sExerciceSource = DIMNM( 'Exercice', nIndex -1 );
sExerciceSourceMagasin = DIMNM( 'Exercice', nIndex -2 );
sExerciceSourceMagasin = '2022_2023' ;

sScenarioSource = 'Atterrissage' ;
sVersionSource = 'VF' ;

sScenarioCible = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));
sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
sVersionCible = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

# Controle du scénario cible
# Si Réel, on ne fait rien
nErrorScenario = 0 ;

IF ( sScenarioCible @= 'REEL' ) ;
    nErrorScenario = 1 ;
    ProcessBreak;
ENDIF ;

###########################################
## Creation vue SOURCE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeSource = 'Compte_Exploitation_Saisie';
sDimSource1 = 'Exercice';
sDimSource2 = 'Version' ; 
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Mois' ; 
sDimSource5 = 'Magasin' ; 
sDimSource6= 'Poste_Budgetaire' ; 
sDimSource = 'm_Compte_Exploitation';

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeSource, sVueSource ) = 1 );
  ViewDestroy( sCubeSource, sVueSource );
ENDIF;
ViewCreate( sCubeSource, sVueSource , nDebug );

# Exercice
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExerciceSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 

# Version
SubsetDestroy ( sDimSource2 , sSubsetSource ) ;
SubsetCreate ( sDimSource2 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sSubsetSource , sVersionSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 

# Scenario
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sSubsetSource , sScenarioSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 

# Mois
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ; 
IF ( pMethode @= 'N-1' ) ;
    SubsetElementInsert ( sDimSource4 , sSubsetSource , pMois , nDebug ) ;
ELSEIF ( pMethode @= 'Charge_Annuel_N-1' ) ;
    SubsetElementInsert ( sDimSource4 , sSubsetSource , 'Total_Mois' , nDebug ) ;
ELSEIF ( pMethode @= 'Charge_Trim_N-1' ) ;
    sTrim = ELPAR( 'Mois', pMois , 1 );
    SubsetElementInsert ( sDimSource4 , sSubsetSource , sTrim , nDebug ) ;
ENDIF ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 

# Magasin
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
StringMDX = '{FILTER( {TM1SUBSETALL( ['| sDimSource5 | '] )}, ['| sDimSource5 | '].[Exercice_Ouverture] = "'|sExerciceSourceMagasin|'")}' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 

# Poste_Budgétaire : Si initalisation Globale alors tous les comptes
# Sinon, seulement les comptes topper dans le cube Param_Methode_Saisie
SubsetDestroy ( sDimSource6, sSubsetSource ) ;
SubsetCreate ( sDimSource6, sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource6 , sSubsetSource , pCompte , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sSubsetSource ) ; 

# m_Compte_Exploitation
SubsetDestroy ( sDimSource , sSubsetSource ) ; 
SubsetCreate ( sDimSource , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sSubsetSource , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ;

ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 0 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );

# Redéfinition de la source de donnée
DatasourceCubeview = sVueSource ;
DatasourceNameForServer = sCubeSource ;


###########################################
## Creation vue CIBLE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeCible = 'Compte_Exploitation_Saisie';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Magasin' ; 
sDimCible6= 'Poste_Budgetaire' ; 
sDimCible = 'm_Compte_Exploitation';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible4 , sSubsetZero , pMois , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Magasin
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
SubsetCreate ( sDimCible5 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible5 , sSubsetZero , pMagasin , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Poste_Budgétaire : Si initalisation Globale alors tous les comptes
# Sinon, seulement les comptes topper dans le cube Param_Methode_Saisie
SubsetDestroy ( sDimCible6, sSubsetZero ) ; 
SubsetCreate ( sDimCible6 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible6 , sSubsetZero , pCompte , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# m_Compte_Exploitation
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# Pas de RAZ car présent dans le master
#ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Metadata


# Moyenne des consos magasin n-1
nMontant = nMontant + Value ;
nDiviseur = nDiviseur + 1 ;

# Récupération du nombre de magasin dans la source
nNbreMagasin = SubsetGetSize( sDimCible5 , sSubsetSource );

# Si Le nombre de magasin du subset est égal au diviseur
# Alors calcul de la moyenne

nMoyenne = nMontant \ nDiviseur ;



#endregion
#region Data

sDate_Ouverture = CellGetS ( 'Param_Magasin', pMagasin, 'Date_Ouverture' ) ;
sAnneeOuverture = SUBST ( sDate_Ouverture , 7 , 4 ) ;
sMoisOuverture = SUBST ( sDate_Ouverture , 4 , 2 ) ;
sJourOuverture = SUBST ( sDate_Ouverture , 1 , 2 ) ;

sDateOuv = sAnneeOuverture | '-' | sMoisOuverture | '-' | sJourOuverture ;
nDateOuv = DAYNO ( sDateOuv ) ;

sJourParcouru = CellGetS( '}ElementAttributes_Mois', pMois , 'NB_DAYS' );
sMoisParcouru = SUBST ( pMois , 2 , 2 ) ;

IF ( pMois @= 'M01' % pMois @= 'M02' % pMois @= 'M03' ) ;
    sAnneeParcouru = SUBST ( sExerciceCible , 6 , 4 ) ;
ELSE ;
    sAnneeParcouru = SUBST ( sExerciceCible , 1 , 4 ) ;
ENDIF ;

sDateFinParcouru = sAnneeParcouru | '-' | sMoisParcouru | '-' | sJourParcouru ;
sDateDebParcouru = sAnneeParcouru | '-' | sMoisParcouru | '-' | '01' ;

nDateDebParcouru = DayNo( sDateDebParcouru );
nDateFinParcouru = DayNo( sDateFinParcouru );

IF ( nDateFinParcouru > nDateOuv ) ;


    IF ( nDateOuv > nDateDebParcouru ) ;
        nProrata =  StringToNumber ( sJourParcouru ) - StringToNumber ( sJourOuverture ) + 1 ;
        nProrata = nProrata \ StringToNumber ( sJourParcouru ) ;
    ELSE ;
        nProrata = 1 ;
    ENDIF ;

    IF ( pMethode @= 'N-1' ) ;

        CellPutN ( nMoyenne * nProrata , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , pMois , pMagasin , pCompte , m_Compte_Exploitation ) ;

    ELSEIF ( pMethode @= 'Charge_Annuel_N-1' ) ;


        nMoyenneMensuel = nMoyenne \ 12 ;

        CellPutN ( nMoyenneMensuel * nProrata , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , pMois , pMagasin , pCompte , m_Compte_Exploitation ) ;

    ELSEIF ( pMethode @= 'Charge_Trim_N-1' ) ;

        nMoyennetrim = nMoyenne \ 3 ;
        CellPutN ( nMoyennetrim * nProrata , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , pMois , pMagasin , pCompte , m_Compte_Exploitation ) ;
        
    ENDIF ;

ENDIF ;



#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Si le scénario n'est pas prévisionnel, on génère un message d'erreur
IF ( nErrorScenario <> 0 ) ;
    ItemReject( 'Le scénario sélectionné dans le cube Fonctionnel n' | CHAR ( 39 ) | 'est pas un scénario prévisionnel' ) ;
ENDIF ;




#endregion