#region Prolog
#***********************************************************************************************
# CREATEUR : YMD
# DATE DE CREATION : 09/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Import des données du cube Stock_Sac vers le cube Compte Exploitation
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEnteteMag = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

###############################   FIN MONITORING   #################################

# Déclaration des variables 

# Définition du périmètre

sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) ) ;
sScenario = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) ) ;
IF ( sScenario @= 'Reel') ;
    ProcessQuit;
ENDIF;
sVersion = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ) ) ;
sPosteBudgetaire = '603700' ;

#------------------------------------------
# Définition de la VUE SOURCE "Stock_Sac" :

sCubeSource = 'Stock_Sac'; 
sDim1 = 'Exercice' ; 
sDim2 = 'Version' ;
sDim3 = 'Scenario'; 
sDim4 = 'Mois' ;
sDim5 = 'Type_Sac' ;
sDim6 = 'Magasin' ; 
sDim = 'm_Stock_Sac' ; 

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 
# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | Today (0) | '_' | GetProcessName () ; 


# Destruction pour recréation de la vue
IF( ViewExists( sCubeSource, sVueSourCe ) = 1 );
  ViewDestroy( sCubeSource, sVueSourCe );
ENDIF;
ViewCreate( sCubeSource, sVueSourCe , nDebug );

# Exercice : ExerciceEnCours 
IF ( SubsetExists( sDim1, sSubsetSource ) = 1);
  SubsetDestroy ( sDim1, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim1 , sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim1 , sSubsetSource , sExercice , 1 ) ;

# Version : VersionEnCours
IF ( SubsetExists( sDim2, sSubsetSource ) = 1);
  SubsetDestroy ( sDim2, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim2, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim2 , sSubsetSource , sVersion , 1 ) ; 

# Scenario : ScenarioEnCours
IF ( SubsetExists( sDim3, sSubsetSource ) = 1);
  SubsetDestroy ( sDim3, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim3, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim3 , sSubsetSource , sScenario , 1 ) ;

# Mois : tous 
IF ( SubsetExists( sDim4, sSubsetSource ) = 1);
  SubsetDestroy ( sDim4, sSubsetSource ) ;
ENDIF;
SubsetCreateByMDX ( sSubsetSource,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim4 | '] ) } , 0 ) }', nDebug ) ; 

# Type_Sac : Total_Type_Sac 
IF ( SubsetExists( sDim5, sSubsetSource ) = 1);
  SubsetDestroy ( sDim5, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim5, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim5 , sSubsetSource , 'Total_Type_Sac' , 1 ) ;

# Magasin : tous 
IF ( SubsetExists( sDim6, sSubsetSource ) = 1);
  SubsetDestroy ( sDim6, sSubsetSource ) ;
ENDIF; 
SubsetCreateByMDX ( sSubsetSource,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim6 | '] ) } , 0 ) }', nDebug ) ; 


# m_Stock_Sac : Stock_Final
IF ( SubsetExists( sDim, sSubsetSource ) = 1);
  SubsetDestroy ( sDim, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim , sSubsetSource , 'Stock_Final', 1 ) ;



# On ne traite pas les croisements égaux à zéro :
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1 ) ; 
# On ne traite pas les croisements concernés par des règles de calculs
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSourCe , 0 ) ;
# On ne traite pas les croisements consolidés
ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 0 ) ; 

# On assigne les sous-ensembles à leur vue
ViewSubsetAssign ( sCubeSource , sVueSource , sDim1 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim2 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim3 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim4 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim5 , sSubsetSource ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDim6 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim , sSubsetSource ) ; 

# Définition de la source du processus : 
DataSourceNameForServer  = sCubeSource ; 
DataSourceCubeView = sVueSource ; 

# ---------------------------------------------------
# Remise à zéro de la vue CIBLE : Compte_Exploitation : 

sCubeCible = 'Compte_Exploitation' ; 
sDim1 = 'Exercice' ; 
sDim2 = 'Version' ;
sDim3 = 'Scenario'; 
sDim4 = 'Partenaire'; 
sDim5 = 'Mois' ; 
sDim6 = 'Magasin' ;
sDim7 = 'Poste_Budgetaire' ;
sDim = 'm_Compte_Exploitation' ;

# Le nom de la vue du cube :
sVueDestination = 'RàZ_vue_' | Today (0) | '_' | GetProcessName () ; 
# Le nom des sous-ensembles
sSubsetDestination = 'RàZ_Subset_' | Today (0) | '_' | GetProcessName () ; 


# Destruction pour recréation de la vue 

IF( ViewExists( sCubeCible, sVueDestination ) = 1 );
  ViewDestroy( sCubeCible, sVueDestination );
ENDIF;
ViewCreate( sCubeCible, sVueDestination , nDebug );


# Création des sous-ensembles des dimensions du cube

# Exercice : sExercice
if ( SubsetExists( sDim1, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim1 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim1 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim1 , sSubsetDestination , sExercice , 1 ) ;

# Exercice : sVersion
if ( SubsetExists( sDim2, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim2 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim2 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim2 , sSubsetDestination , sVersion , 1 ) ;

# Exercice : sScenario
if ( SubsetExists( sDim3, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim3 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim3 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim3 , sSubsetDestination , sScenario , 1 ) ;

# Partenaire : tous
if ( SubsetExists( sDim4, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim4 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim4  | ' ] ) } , 0 ) }' , nDebug) ;

# Mois : tous
if ( SubsetExists( sDim5, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim5 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim5  | ' ] ) } , 0 ) }', nDebug ) ;

# Magasin : tous
if ( SubsetExists( sDim6, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim6 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim6  | ' ] ) } , 0 ) }', nDebug ) ;

# Poste_Budgetaire : sPosteBudgetaire 
if ( SubsetExists( sDim7, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim7 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim7 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim7 , sSubsetDestination , sPosteBudgetaire  , 1 ) ;

# Dimension mesure : indicateur Montant
if ( SubsetExists( sDim, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim, sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim, sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim , sSubsetDestination , 'Montant' , 1 ) ;

# On assigne tous les sous-ensembles créés à la vue de cube
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim1 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim2 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim3 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim4 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim5 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim6 , sSubsetDestination ) ;
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim7 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim , sSubsetDestination ) ; 

# Suppression des données qui sont dans la vue sVueDestination
ViewZeroOut ( sCubeCible , sVueDestination ) ; 

#endregion
#region Metadata


#endregion
#region Data


# Mise à jour du cout electrique dans le cube Compte Exploitation reparti en fonction du partenaire
# utilisation du cube de paramétrage Param_Partenaire
# avec test Total_Partenaire = 100

nTotalTaux = CellGetN( 'Param_Partenaire', sExercice, sVersion, sScenario,  'Total_Partenaire', Magasin, 'Taux' );


IF ( nTotalTaux = 1 ) ;
	nmax = DIMSIZ ( 'Partenaire' );
	n=nmax;
	WHILE ( (n>0) & (nTotalTaux=1) ) ;
	sPartenaire = DimNM ('Partenaire', n ) ;
	IF (ElLev ( 'Partenaire' , sPartenaire ) = 0 ) ;
		taux = CellGetN( 'Param_Partenaire', sExercice, sVersion, sScenario, sPartenaire, Magasin, 'Taux' );
        nStockInital = CellGetN ( sCubeSource,sExercice, sVersion, sScenario, Mois, Type_Sac, Magasin, 'Stock_Initial' ) ;
		nMontant = (nStockInital-Value)*taux ;
        CellPutN ( nMontant, sCubeCible, sExercice, sVersion, sScenario, sPartenaire, Mois, Magasin, sPosteBudgetaire,'Montant' ) ;
	ENDIF ;
	n=n-1 ;
	END;

# Mise en place d'un fichier de rejet si le total des taux des partenaire est différent de 100
ELSE ;
   
	IF ( nEnteteMag = 0 ) ;
		ASCIIOutput ( sRejet , 'Param_Partenaire' , 'Motif_Rejet' ) ;
		nEnteteMag = 1 ;
	ENDIF ;
	ASCIIOutput ( sRejet , Magasin , 'Pour le magasin ' | Magasin |  ', le total des taux des partenaire est différent de 100' ) ;
	nError = nError + 1 ;

ENDIF;
#endregion
#region Epilog
#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Message si erreur du processus
IF ( nError > 0 ) ;
  sMessage = 'Des rejets ont été générés, veuillez consulter le répertoire pour plus de détail' ;
  ItemReject( sMessage );
ENDIF ;
#endregion