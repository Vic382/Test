#region Prolog

#***********************************************************************************************
# CREATEUR : CTY
# DATE DE CREATION : 17/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# Initialisation des Investissements dans le budget du cube Investissement
# Récupération du réel n-1 
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Cubes
sCubeInvest = 'Investissement' ;

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEntete = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;

###############################   FIN MONITORING   #################################
### Définition du périmètre Source & Cible
# La source est toujours le Réel N-1 VF et la cible est toujours le budget

### SOURCE
sScenarioSource = 'REEL' ;
sVersionSource = 'VF' ;

# Récupération de l'exercice précédant
sExerciceEnCours = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
nIndex = DIMIX( 'Exercice', sExerciceEnCours );
sExerciceSource = DIMNM( 'Exercice', nIndex -1 );

### CIBLE - Périmètre en cours
sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) );
sScenarioCible = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) );
sVersionCible  = DimensionElementPrincipalName ( 'Version'  , CellGetS( 'ParametresFonctionnels', 'VersionEnCours'  , 'ValeurS' ) ); 

### Controle du scénario cible
# Si Réel, on ne fait rien
IF ( sScenarioCible @= 'REEL' ) ;
  ItemReject( 'Le scénario sélectionné dans le cube Fonctionnel n' | CHAR ( 39 ) | 'est pas un scénario prévisionnel' ) ;
  ProcessBreak;
ENDIF ;

###########################################
## Creation vue SOURCE sur Investissement
###########################################

### Déclaration des variables
sCubeSource = 'Investissement';
sDimSource1 = 'Exercice';
sDimSource2 = 'Version' ; 
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Mois' ; 
sDimSource5 = 'Immobilisation' ; 
sDimSource6 = 'Magasin' ; 
sDimSource = 'm_Investissement';

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeSource, sVueSource ) = 1 );
  ViewDestroy( sCubeSource, sVueSource );
ENDIF;
ViewCreate( sCubeSource, sVueSource , nDebug );

# Exercice : Exercice précédant
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExerciceSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 

# Version : VF
SubsetDestroy ( sDimSource2 , sSubsetSource ) ;
SubsetCreate ( sDimSource2 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sSubsetSource , sVersionSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 

# Scenario : REEL
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sSubsetSource , sScenarioSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
IF ( sScenarioCible @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ELSE ;
  SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioCible , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimSource4 );
  i = 1 ;
  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimSource4 , i );
    # Contrôle avec l'index du 1er mois simulation
    # Identique que dans Maj_Data_Inv_Inv_Saisie / Inverse de Imp_Data_Investissement
    # Ex : dans Att1, on veux copier les données réelles N-1 uniquement après avril soit i >= sMoisPrev(M05)
    
    IF ( ELLEV ( sDimSource4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimSource4 , sSubsetSource , sMois , 1 );
    ENDIF ;
    
    i = i + 1 ;
  END ;
ENDIF ;

ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 

# Immobilisation : Tous les magasins 
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
SubsetCreate ( sDimSource5 , sSubsetSource , nDebug ) ; 
SubsetMDXSet( sDimSource5, sSubsetSource, '{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Immobilisation] )}, 0)}, [Immobilisation].[Fictif] = "REEL")}');
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 

# Magasin : Tous les magasins 
SubsetDestroy ( sDimSource6 , sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource6 , sSubsetSource ) ; 

# m_Investissement
SubsetDestroy ( sDimSource , sSubsetSource ) ; 
SubsetCreate ( sDimSource , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sSubsetSource , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ;

ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );

# Redéfinition de la source de donnée
DatasourceCubeview = sVueSource ;
DatasourceNameForServer = sCubeSource ;


###########################################
## Creation vue CIBLE sur Investissement
###########################################

### Déclaration des variables
sCubeCible = 'Investissement';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Immobilisation' ; 
sDimCible6 = 'Magasin' ; 
sDimCible = 'm_Investissement';

# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
IF ( sScenarioCible @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ELSE ;

  SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioCible , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimCible4 );
  i = 1 ;

  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimCible4 , i );
  
    # Contrôle avec l'index du 1er mois simulation
    IF ( ELLEV ( sDimCible4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimCible4 , sSubsetZero , sMois , 1 );
    ENDIF ;
  
    i = i + 1 ;
  
  END ;

ENDIF ;

ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Immobilisation : que les immos réelles
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
SubsetCreate ( sDimCible5 , sSubsetZero , nDebug) ; 
SubsetMDXSet( sDimCible5, sSubsetZero, '{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Immobilisation] )}, 0)}, [Immobilisation].[Fictif] = "REEL")}');
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Magasin
SubsetDestroy ( sDimCible6 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible6 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# m_Investissement
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );

#endregion
#region Metadata

#endregion
#region Data

# Variables date de sortie
sDateFin = ATTRS( 'Immobilisation', Immobilisation, 'Date_Fin');
nDateFinImmo = DayNo( sDateFin );
sDateDebut = ATTRS( 'Immobilisation', Immobilisation, 'Date_Debut');
nDateDebutImmo = DayNo( sDateDebut );
sJourFin = SUBST(sDateFin, 9, 2); 
sMoisFin = SUBST(sDateFin, 6, 2);
sMoisMFin = 'M' | SUBST(sDateFin, 6, 2 );
sAnneeFin = SUBST(sDateFin, 1, 4 ); 
sExerciceFin = DimensionElementPrincipalName( 'Periode', sDateFin );

# Première date de l'exercice
sAnnee1 = SUBST(sExerciceCible, 1, 4 );
sDateDebutExercice = sAnnee1 |'-04-01';
nDateDebutExercice = DayNo( sDateDebutExercice ) ;

# Dernière date de l'exercice
sAnnee2 = SUBST(sExerciceCible, 6, 4 );
sDateFinExercice = sAnnee2 |'-03-31';
nDateFinExercice = DayNo( sDateFinExercice ) ;

# Premier jour du mois format YYYY-MM-DD / DayNo
IF( Mois @= 'M01' % Mois @= 'M02' % Mois @= 'M03');
  sDate_PremierJourDuMois =  sAnnee2|'-'| SUBST(Mois,2,2) |'-01' ;
ELSE;
  sDate_PremierJourDuMois =  sAnnee1|'-'| SUBST(Mois,2,2) |'-01' ;
ENDIF;  
nPremierJourDuMois = Dayno(sDate_PremierJourDuMois) ;

# Dernier jour du mois format YYYY-MM-DD / DayNo
nJourMois = ATTRN( 'Mois', Mois, 'NB_DAYS');
sJourMois = NumberToString(nJourMois);
IF( Mois @= 'M01' % Mois @= 'M02' % Mois @= 'M03');
  sDate_DernierJourDuMois =  sAnnee2|'-'| SUBST(Mois,2,2) |'-'| sJourMois ;
ELSE;
  sDate_DernierJourDuMois =  sAnnee1|'-'| SUBST(Mois,2,2) |'-'| sJourMois ;
ENDIF;  
nDernierJourDuMois = Dayno(sDate_DernierJourDuMois) ;

### Application d'un prorata en fonction des situations
# Si l'immo est en fin d'amort. 
IF( nDateFinImmo < nPremierJourDuMois ); 
  nProrata = 0;

# Si achat pendant le mois
ELSEIF( ( nDateDebutImmo >= nPremierJourDuMois ) & (nDateDebutImmo <= nDernierJourDuMois) );
    # Prorata sur 1er mois
    sMoisDebut = 'M' | SUBST(sDateDebut, 6, 2 );
    nJourDebut = StringToNumber (SUBST(sDateDebut, 9, 2 )); 
    nJourMoisDebut = ATTRN( 'Mois', sMoisDebut, 'NB_DAYS');
    nProrata =  (nJourMoisDebut + 1 - nJourDebut) / nJourMoisDebut ;
    
# Si fin amort pendant le mois
ELSEIF( (nDateFinImmo < nDernierJourDuMois) & (nDateFinImmo >= nPremierJourDuMois) );
  # Prorata sur dernier mois
  nJourFin = StringToNumber (sJourFin); 
  nJourMoisFin = ATTRN( 'Mois', sMoisMFin, 'NB_DAYS');
  nProrata =  nJourFin / nJourMoisFin; 

# Sinon 1
ELSE;
  nProrata = 1; 
  
ENDIF;

# Alimentation du cube Investissement
nMontant = Value * nProrata;
CellPutN( nMontant, 'Investissement', sExerciceCible, sVersionCible, sScenarioCible, Mois, Immobilisation, Magasin, 'Montant' );
#ASCIIOutput( '..\DEBUG\Init_Bud_Invest.csv', NumberToString( nProrata ), NumberToString(nMontant), sCubeCible, sExerciceCible, sVersionCible, sScenarioCible, Mois, Immobilisation, Magasin, 'Montant'  );

#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );
CELLPUTS( sVersionCible |'-'| sScenarioCible|'-'|sExerciceCible, sCubeParamS , cMainProcName ,'DernRef' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion