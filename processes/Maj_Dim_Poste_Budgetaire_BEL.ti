#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 18/03/2024
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : MAJ de la dimension Poste_Budgetaire_N
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.txt' ;


###############################   FIN MONITORING   #################################


###########################################
## Définition du fichier source
###########################################

# Répertoire fichier source
sRepertoire = CellGetS ( sCubeParamS , cMainProcName , 'Txt_RepertoireSource' ) ;
sNomFichier = CellGetS ( sCubeParamS , cMainProcName , 'txt_NomFichier' ) ;

# Contrôle du répertoire

IF ( sRepertoire @= '' % sNomFichier @= '' ) ;
  ItemReject( 'Le répertoire ou le nom du fichier n'| CHAR(39)|'est pas renseigné dans le cube ParamètreSources' );
ENDIF ;

# Renommage du fichier source selon les paramètres utilisateur
sNomFichier = sNomFichier ;
sNomComplet = sRepertoire | sNomFichier | '.csv' ;

# Controle de la présence du fichier source dans le répertoire
IF ( FileExists( sNomComplet ) = 0 ) ;
  ItemReject( 'Le fichier source ' | sNomFichier | ' n' | CHAR ( 39) | 'est pas présent dans le répertoire ' | sRepertoire );
ENDIF ;

# Définition du fichier comme source
DatasourceNameForServer = sNomComplet ;
DataSourceASCIIDelimiter = ';' ;

# Définition de la dimension à charger
sDim = 'Poste_Budgetaire_BEL' ;

# Création de la dimension si elle n'existe pas
# On ne delete pas les éléments avant de charger pour conserver l'historique
IF ( DimensionExists( sDim ) = 0 );
  DimensionCreate( sDim ) ;
ENDIF ;

# Création attributs
AttrInsert( sDim , '', 'Description' , 'A' );
AttrInsert( sDim , '', 'Mapping' , 'S' );


# Trie de la dimension
DimensionSortOrder( sDim , 'ByInput', 'Ascending', 'ByHierarchy', 'Ascending' );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

DimensionElementInsertDirect ( sDim, '', Compte_dorigine , 'N' );
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

sLibelle = Compte_dorigine | ' - ' | Dsignation_dorigine ;

AttrPutS( sLibelle , sDim , Compte_dorigine , 'Description' );
AttrPutS( Compte_FR , sDim , Compte_dorigine , 'Mapping' );


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion