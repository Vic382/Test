#region Prolog

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 11/12/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Initialisation des Crédits-Baux pour les magasins ouvrants sur l'exercice
# Moyenne des ouvertures de l'année précédente pour la mensualisation et la durée
# Date de début 3 mois après la date d'ouverture
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;


###############################   FIN MONITORING   #################################

### 1. Déclaration des variables

# Variables
nMontant = 0 ;
nDureeFinal = 0 ;
nDiviseur = 0 ;
nDiviseurDuree = 0 ;
nCtrlBoucle = 0 ;

# Cubes
sCubeAttrMois = '}ElementAttributes_Mois' ;

# Définition du périmètre
# La source est toujours le Réel N-1 et la cible est toujours le budget

# On récupère l'exercice en cours dans le cube paramètrefonctionnel
sExerciceSource = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));

# On récupère l'index de l'exercice en cours pour récupérer l'exercice précédent dans la dimension
nIndex = DIMIX( 'Exercice', sExerciceSource );
sExerciceSource = DIMNM( 'Exercice', nIndex -1 );

sScenarioSource = 'REEL' ;
sVersionSource = 'VF' ;

sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
sScenarioCible = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));
sVersionCible = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

# Controle du scénario cible
# Si Réel, on ne fait rien
nErrorScenario = 0 ;

IF ( sScenarioCible @= 'REEL' ) ;
    nErrorScenario = 1 ;
    ProcessBreak;
ENDIF ;

###########################################
## Creation vue SOURCE sur Credit_Bail
###########################################

### Déclaration des variables
sCubeSource = 'Credit_Bail';
sDimSource1 = 'Exercice';
sDimSource2 = 'Version' ; 
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Type_Credit_Bail' ; 
sDimSource5 = 'Magasin' ; 
sDimSource = 'm_Credit_Bail';

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeSource, sVueSource ) = 1 );
  ViewDestroy( sCubeSource, sVueSource );
ENDIF;
ViewCreate( sCubeSource, sVueSource , nDebug );

# Exercice
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sSubsetSource , sExerciceSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sSubsetSource ) ; 

# Version
SubsetDestroy ( sDimSource2 , sSubsetSource ) ;
SubsetCreate ( sDimSource2 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sSubsetSource , sVersionSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sSubsetSource ) ; 

# Scenario
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sSubsetSource , sScenarioSource , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sSubsetSource ) ; 

# Type_Credit_Bail : On ne traite que les types ouvertures
SubsetDestroy ( sDimSource4 , sSubsetSource ) ; 
SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ; 
SubsetElementInsert ( sDimSource4 , sSubsetSource , 'Ouverture' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sSubsetSource ) ; 

# Magasin : Que les magasins ayant une ouverture sur l'exercice n-1
SubsetDestroy ( sDimSource5 , sSubsetSource ) ; 
StringMDX = '{FILTER( {TM1SUBSETALL( ['| sDimSource5 | '] )}, ['| sDimSource5 | '].[Exercice_Ouverture] = "'|sExerciceSource|'")}' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sSubsetSource ) ; 

# m_Credit_Bail
SubsetDestroy ( sDimSource , sSubsetSource ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetSource , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sSubsetSource ) ;

ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );

# Redéfinition de la source de donnée
DatasourceCubeview = sVueSource ;
DatasourceNameForServer = sCubeSource ;


###########################################
## Creation vue CIBLE sur Credit_Bail
###########################################

### Déclaration des variables
sCubeCible = 'Credit_Bail';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Type_Credit_Bail' ; 
sDimCible5 = 'Magasin' ; 
sDimCible = 'm_Credit_Bail';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Type_Credit_Bail : On ne traite que les types ouvertures
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible4 , sSubsetZero , 'Ouverture' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Magasin : que les magasisn ayant une date d'ouverture sur l'exercice budget
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
StringMDX = '{FILTER( {TM1SUBSETALL( ['| sDimCible5 | '] )}, ['| sDimCible5 | '].[Exercice_Ouverture] = "'|sExerciceCible|'")}' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# m_Credit_Bail
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Metadata

IF ( m_Credit_Bail @= 'Mensualite' ) ;
  
  nMensualite = StringToNumber ( Value ) ;

  # Moyenne des consos magasin n-1
  nMontant = nMontant + nMensualite ;
  nDiviseur = nDiviseur + 1 ;
  
  # Récupération du nombre de magasin dans la source
  nNbreMagasin = SubsetGetSize( sDimCible5 , sSubsetSource );
  
  IF ( nNbreMagasin = nDiviseur ) ;
    nMoyenne = nMontant \ nDiviseur ;
  ENDIF ;
  
  
ELSEIF ( m_Credit_Bail @= 'Duree' ) ;

  nDuree = StringToNumber ( Value ) ;
  
  # Moyenne des consos magasin n-1
  nDureeFinal = nDureeFinal + nDuree ;
  nDiviseurDuree = nDiviseurDuree + 1 ;
  
  # Récupération du nombre de magasin dans la source
  nNbreMagasin = SubsetGetSize( sDimCible5 , sSubsetSource );
  
  IF ( nNbreMagasin = nDiviseur ) ;
    nMoyenneDuree = nDureeFinal \ nDiviseur ;
  ENDIF ;
  
ENDIF ;

#endregion
#region Data

# Boucles sur les magasins avec une date d'ouverture sur l'exercice budget

nTailleBoucle = DIMSIZ( sDimCible5 );
i = 1 ;

IF ( nCtrlBoucle = 0 ) ;
  WHILE ( i <= nTailleBoucle ) ;

    sMagasin = DIMNM( sDimCible5 , i );
    sExeOuverture = CellGetS ( '}ElementAttributes_Magasin' , sMagasin , 'Exercice_Ouverture' ) ;

    IF ( sExeOuverture @= sExerciceCible & ELLEV( sDimCible5 , sMagasin ) = 0 ) ;
    
      # Alimentation des moyennes calculées dans le metadata
      CellPutN( nMoyenne , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , 'Ouverture' , sMagasin , 'Mensualite' );
      CellPutN( nMoyenneDuree , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , 'Ouverture' , sMagasin , 'Duree' );
       
      ###### Gestion des dates de début ( 3 mois après la date d'ouverture ) ######
      
      # Récupération de la date d'ouverture
      sDateOuv = CellGetS ( '}ElementAttributes_Magasin' , sMagasin , 'Date_Ouverture' ) ;
      
      # Découpage de la date d'ouverture
      sAnneeOuv = SUBST ( sDateOuv , 7 , 4 ) ;
      sMoisOuv = SUBST ( sDateOuv , 4 , 2 ) ;
      sJourOuv = SUBST ( sDateOuv , 1 , 2 ) ;

      # Redéfinition du mois au format MXX
      sMoisOuverture = 'M' | sMoisOuv ;  

      # Récupération de l'attribut num_ordre du mois d'ouverture  
      nMoisOuverture = CellGetN ( sCubeAttrMois , sMoisOuverture , 'NUM_ORDRE' ) ;

      # Ajout de plus 3 mois au NUM_ORDRE
      # /!\ Si num mois = 10 , 11 ou 12, +3mois = mois 1 , 2 , 3
      IF ( nMoisOuverture = 10 ) ;  
        nMoisOuv = 1 ;
      ELSEIF ( nMoisOuverture = 11 );
        nMoisOuv = 2 ;   
      ELSEIF ( nMoisOuverture = 12 ) ;
        nMoisOuv = 3 ;  
      ELSE ;
        nMoisOuv = nMoisOuverture + 3 ;   
      ENDIF ;    

      # Si le décalage à +3mois redéfini le mois à Janvier, Février ou Mars alors passage à l'année suivante
      IF ( nMoisOuv = 10 % nMoisOuv = 11 % nMoisOuv = 12 ) ;  
        sAnneeOuv = NumberToString ( StringToNumber ( sAnneeOuv ) + 1 ) ; 
      ELSE ;
        sAnneeOuv = sAnneeOuv ;
      ENDIF ;    
          
      # Initialisation d'une boucle sur la dimension Mois
      
      nTailleBoucle2 = DIMSIZ( 'Mois' );
      j = 1 ;

      while (j <= nTailleBoucle2 ); 
          
        sMois = DIMNM( 'Mois', j ) ;  

        IF ( ELLEV( 'Mois' , sMois ) = 0 ) ;
          nMois = CellGetN ( sCubeAttrMois , sMois , 'NUM_ORDRE') ;    

          IF ( nMois = nMoisOuv ) ;

            sMois = SUBST ( sMois , 2 , 2 ) ;
            sDateDeb = sJourOuv | '/' | sMois | '/' | sAnneeOuv ;  

            ### Définition de la date de fin

            # Transformation de la date de début au format AAAA-MM-JJ pour fonction DAyNo
            sDatedebut = sAnneeOuv | '-' | sMois | '-' | sJourOuv ;
            nDateDebut = DayNo ( sDateDebut ) ;

            nDateFin = nDateDebut + ( nMoyenneDuree * 365 ) ;
            sDateFin = TIMST( nDateFin , '\d/\m/\Y' );

            # Alimentation des durées
            CellPutS ( sDateDeb , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , 'Ouverture' , sMagasin , 'Date_Debut' ) ;
            CellPutS ( sDateFin , sCubeCible , sExerciceCible , sVersionCible , sScenarioCible , 'Ouverture' , sMagasin , 'Date_Fin' ) ;     
          ENDIF ;    
        ENDIF ;     
          
        j = j + 1 ;  
          
      end;        
      
    ENDIF ;

    i = i + 1 ;

  END ;
  
  # Incrémentation de la variable de controle
  nCtrlBoucle = 1 ;
  
ENDIF ;

#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------

# Si le scénario n'est pas prévisionnel, on génère un message d'erreur
IF ( nErrorScenario <> 0 ) ;
    ItemReject( 'Le scénario sélectionné dans le cube Fonctionnel n' | CHAR ( 39 ) | 'est pas un scénario prévisionnel' ) ;
ENDIF ;



#endregion