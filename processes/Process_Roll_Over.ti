#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************
# CREATEUR : LPE
# DATE DE CREATION : 03/12/2020
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Processus pour fonction de Roll Over
#************************************************************************************************


#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

#Definition des cubes
sCubeParamP = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;
sCubeParamF = 'ParametresFonctionnels' ;
#**********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;

# Gestion du lancement par tâche planifié
IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

cLenASCIICode = 3 ;

#**********************************************************************************************************
#                                  Définition des variables
#**********************************************************************************************************

StringGlobalVariable('sProcessReturnCode');
NumericGlobalVariable('nProcessReturnCode');

# Pour échanger avec Process.Log.Create
NumericGlobalVariable ('zLogNumero') ; 
         
#**********************************************************************************************************
#                                  Initialisation des variables
#**********************************************************************************************************

nProcessReturnCode= 0;
zLogNumero	= 1 ;
nDebug = 1 ; 

nDataCount	= 0 ;

nCountAttribut	= 0 ;
nCountParent	= 0 ;
nCountElement	= 0 ;
nCountWarn                  = 0 ;

nErrors		= 0 ;

pLegacy		= 0 ;
#pDelim	             	= TRIM(pDelim);
pLogOutput                    = 1 ;

#**********************************************************************************************************
#                                  Log start time
#**********************************************************************************************************

ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'START' ,
	'pV2' , 'chargement de données' , 'pV3' , 'Chargement du cube Devise' ) ;


IF (DimensionExists (pTemps) = 0 ) ; 
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
		'pV1' , 'La dimension '| pTemps |' est inexistante'  ) ;
ENDIF; 

Anneeencours = CellGetS ( sCubeParamF , 'AnneeEnCours' , 'ValeurS' ) ; 

NumAnneeencours = StringtoNumber (Anneeencours ) ; 
NextYear = NumAnneeencours +1 ; 
PreviousYear = NumAnneeencours -1 ; 
NumAnneeBudget = NumAnneeencours +1 ; 
AnneeBudget = NumbertoString (NumAnneeBudget) ; 
NextYearBud = NumAnneeBudget +1 ; 
PreviousYearBud = NumAnneeBudget -1 ; 
nCount = 0 ;
nCount2 = 0 ; 


IF ( DIMIX ( pTemps , Anneeencours )=0 ) ; 
  DimensionElementInsert ( pTemps , '' , Anneeencours , 'N' ) ; 
  nCount = 1 ;
ENDIF; 

IF (DIMIX ( pTemps  , AnneeBudget) =0 ) ; 
  DimensionElementInsert ( pTemps , '' , AnneeBudget , 'N' ) ; 
 nCount2 = 1 ; 
ENDIF; 
 


  


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

IF (nCount =1 ) ; 
  AttrPutS ( NumbertoString (NextYear) , pTemps , Anneeencours , 'NEXT_YEAR') ; 
  AttrPutS ( NumbertoString (PreviousYear) , pTemps , Anneeencours , 'PREVIOUS_YEAR' ) ; 
  AttrPutN ( NumAnneeencours , pTemps , Anneeencours , 'CURRENT_YEAR' ) ; 
  AttrPutS ( Anneeencours , pTemps , Anneeencours , 'FR' ) ; 
  AttrPutS ( Anneeencours , pTemps , Anneeencours , 'EN' ) ;
  ExecuteProcess ( 'Process_Master_Periode' , 'pAnneeDebut' , '2017' , 'pAnneeFin' , AnneeBudget , 'pMoisDebut' , 'M01' , 'pMoisFin' , 'M12' ) ; 
ENDIF ; 

IF ( nCount2 = 1 ) ; 
  AttrPutS ( NumbertoString (NextYearBud) , pTemps , AnneeBudget , 'NEXT_YEAR') ; 
  AttrPutS ( NumbertoString (PreviousYearBud) , pTemps , AnneeBudget , 'PREVIOUS_YEAR' ) ; 
  AttrPutN ( NumAnneeBudget , pTemps , AnneeBudget , 'CURRENT_YEAR' ) ; 
  AttrPutS ( AnneeBudget , pTemps , AnneeBudget , 'FR' ) ; 
  AttrPutS ( AnneeBudget , pTemps , AnneeBudget , 'EN' ) ;
  ExecuteProcess ( 'Process_Master_Periode' , 'pAnneeDebut' , '2017' , 'pAnneeFin' , AnneeBudget , 'pMoisDebut' , 'M01' , 'pMoisFin' , 'M12' ) ; 
ENDIF; 


#endregion