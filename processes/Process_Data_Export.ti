#region Prolog


#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************************
#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 27/10/2020
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : ce processus permet de générer des exports de data d'une manière 
# générique.
#***********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;

#***********************************************************************************************************
#                                  Définition des dimensions
#***********************************************************************************************************
sDimCube = '}Cubes' ;

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# Pour échanger avec Process_Log_Create
NumericGlobalVariable ('zLogNumero') ;

#**Fichier Debug
sFichierRepDebug = 'D:\IBM\Instances\GENERIQUE\DEBUG\' ;
sDebug = sFichierRepDebug | 'testBNS.txt' ;


#***********************************************************************************************************
#                                  Initialisation des variables
#***********************************************************************************************************
zLogNumero        = 1 ;
nErrorsExport  = 0 ;

#***********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************
ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'START' ,
'pV2' , 'Export data cube' ) ;

#***********************************************************************************************************
#                                  Controles des parametres chemins et fichiers
#***********************************************************************************************************


##***Définition du dossier d'export
# 1 - Définition du chemin du dossier dans lequel le fichier doit être exporté
sExport = CellGets ( sCubeParamP , cMainProcName , 'Txt_RepertoireExport' ) ;
# Si chemin export vide
IF ( sExport @= '' ) ;
  nErrorsExport = 1 + nErrorsExport  ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nErrorsExport , 'pV1' , 'Le chemin du fichier export est vide' ) ;
  ProcessBreak ;
ENDIF ;
# 2 - Définition du nom du fichier d'export
## Com : définir le nom de l'export dans le cube sCubeParamP 
sFichierExport = CellGets ( sCubeParamP , cMainProcName , 'txt_NomFichierExport' ) ;
IF ( sFichierExport  @= '' ) ;
  nErrorsExport = 1 + nErrorsExport  ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nErrorsExport , 'pV1' , 'Le nom du fichier export est vide' ) ;
  ProcessBreak ;
ENDIF ;

# Test des paramètres
IF ( pCube @= '' % pDelim @= '' % pQuote @= '' ) ;
  nErrorsExport = 1 + nErrorsExport  ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
  'pRef' , nErrorsExport , 'pV3' , 'Les paramètres obligatoires ne sont pas renseignés' ) ;
  ProcessBreak ;
ENDIF ;


#***********************************************************************************************************
#                                  Scripts
#***********************************************************************************************************

IF ( pCube @= '*' ) ;
  i=1 ;
  nTailleBoucle = Dimsiz ( sDimCube ) ;
  While ( nTailleBoucle >=  i ) ;
    sCube = DIMNM ( sDimCube , i ) ;
    IF ( subst ( sCube , 1 , 1 ) @<> 'z'  ) ;
      IF ( subst ( sCube , 1 , 1 ) @<> '}' ) ;
        sNomFichierExport =   sFichierExport | '_' | sCube ;
    
        ExecuteProcess( '}bedrock.cube.data.export' , 'pLogoutput' , pLogoutput , 'pCube' , sCube , 'pView' , '' , 'pFilter' , '' , 'pFilterParallel' , '' , 'pParallelThreads' , 0 , 'pDimDelim' , '' , 'pEleStartDelim' , '' , 'pEleDelim' , '' ,
        'pSuppressZero' , pSuppressZero , 'pSuppressConsol' , pSuppressConsol  , 'pSuppressRules' ,pSuppressRules   , 'pSuppressConsolStrings' , 0 , 'pZeroSource' , 0 , 'pCubeLogging' , 0 , ' pTemp' ,  0,  
        'pFilePath' ,  sExport , 'pFileName' , sNomFichierExport , 'pDelim' , pDelim , ' pQuote' ,  pQuote , ' pTitleRecord' ,  pTitleRecord ,' pSandbox' ,  '' ,   'pSubN' ,  0 ) ;

        ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'INFO' ,
        'pV3' , 'Vous avez exporté les données du cube ' | sCube ) ;

      ENDIF ;
    ENDIF ;
    i = i + 1 ;
  END ;

ELSE ;

  IF ( CubeExists( pCube ) = 0 );
    nErrorsExport = 1 + nErrorsExport  ;
    ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' ,
    'pRef' , nErrorsExport , 'pV3' , 'Le nom du cube ' | pCube | ' renseigné dans le paramétre n' |CHAR(39) | 'existe pas ' ) ;
  ENDIF;

  sNomFichierExport =   sFichierExport | '_' |  pCube ;
  ExecuteProcess( '}bedrock.cube.data.export' , 'pLogoutput' , pLogoutput , 'pCube' , pCube , 'pView' , '', 'pFilter' , '', 'pFilterParallel' , '' , 'pParallelThreads' , 0 , 'pDimDelim' , '' , 'pEleStartDelim' , '', 'pEleDelim' , '' ,
  'pSuppressZero' , pSuppressZero , 'pSuppressConsol' , pSuppressConsol , 'pSuppressRules' , pSuppressRules  , 'pSuppressConsolStrings' , 0 , 'pZeroSource' , 0 , 'pCubeLogging' , 0 , ' pTemp' ,  0 , 
  'pFilePath' ,  sExport , 'pFileName' , sNomFichierExport , 'pDelim' , pDelim , ' pQuote' ,  pQuote , ' pTitleRecord' ,  pTitleRecord ,' pSandbox' ,  '' ,   'pSubN' ,  0 ) ;

  IF ( nErrorsExport <>  1 ) ;
   
    ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'INFO' ,
    'pV3' , 'Vous avez exporté les données du cube ' | pCube ) ;

  ENDIF ;
   
ENDIF;










#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#__________________________________________________________________________________________
#
#                                 Contrôle des erreurs                                            
#__________________________________________________________________________________________

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'END' ) ;

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , If ( GetProcessErrorFilename @= '' , 'OK' , 'KO' ) ,
	'pV1' , 'Process exécuté en ' , 'pV2' , cUtilisateur ) ;

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'BYE' ) ;
	
#__________________________________________________________________________________________
#
#                                 Création des fichiers de suivi depuis le cube Processes_Log et envoi email                         
#__________________________________________________________________________________________

	
ExecuteProcess( 'Process_Log_Export' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess ) ;

#__________________________________________________________________________________________


IF ( nErrorsExport > 0 ) ;
  ProcessQuit();
ENDIF ;
#endregion