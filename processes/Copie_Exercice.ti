#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*****************************************************************************
# CREATEUR : Dimo Software - BNS
# DATE DE CREATION : 26/10/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : ../../2023
# DESCRIPTION DU PROCESSUS : 
# Processus permettant la copie d'un exercice sur une autre pour un même cube
#*****************************************************************************

### 0.Définition des variables du monitoring
sCubeParamT	        = 'ParametrageT' ;
sCubeParamS         = 'ParametresSources' ;
sCubeParamF         = 'ParametresFonctionnels' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE         = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
nDebug = 1 ; 
libRejets = 1; 
sListe = '';
nNouveauSalarie = 0;

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

###**Définition des variables
sDimCube = '}Cubes' ; 
sCubeAttrScenario = '}ElementAttributes_Scenario' ;
sDimMois  = 'Mois' ;
sDimVersion = 'Version' ; 
sDimExercice = 'Exercice' ;
sDimScenario = 'Scenario' ;

###***Définition du périmètre source et cible
sExerciceSource = DimensionElementPrincipalName ( sDimExercice , CellgetS ( sCubeParamF ,  'Exercice_Source' , 'ValeurS' ) )  ;
sExerciceCible = DimensionElementPrincipalName ( sDimExercice , CellgetS ( sCubeParamF ,  'Exercice_Cible' , 'ValeurS' ) )  ;
sScenarioSource = DimensionElementPrincipalName ( sDimScenario , CellgetS ( sCubeParamF ,  'Scenario_Source' , 'ValeurS' ) )  ; 
sScenarioCible = DimensionElementPrincipalName ( sDimScenario , CellgetS ( sCubeParamF ,  'Scenario_Cible' , 'ValeurS' ) )  ; 
sVersionSource = DimensionElementPrincipalName ( sDimVersion ,  CellGetS ( sCubeParamF , 'Version_Source' , 'ValeurS') ) ; 
sVersionCible = DimensionElementPrincipalName ( sDimVersion , CellGetS (  sCubeParamF  , 'Version_Cible' , 'ValeurS' ) )  ; 

#Création et définition du parametre permettant de connaître les version a copier et coller , il est nécessaire pour lancer le bedrock
sElementMapping = 'Exercice:'|sExerciceSource|'->'|sExerciceCible|'& Scenario:'|sScenarioSource|'->'|sScenarioCible |'& Version:'|sVersionSource |'->'|sVersionCible   ; 

#On définit la taille de notre boucle en fonction du nombre de cube
nTailleboucle = DIMSIZ ( '}Cubes' ) ; 

# Boucle sur les cubes pour vérifier si ils possèdent la dimension version, dans ce cas on execute le processus . 
WHILE ( nTailleboucle > 0 ) ; 
  sNomCube = DIMNM(  '}Cubes'  , nTailleboucle) ; 
  IF ( sNomCube @= 'Param_Prime'% sNomCube @= 'Param_Taux_Globaux'% sNomCube @= 'Param_Taux_Horaire' % sNomCube @= 'Param_Type_Magasin' )  ; 
    RunProcess ( 'Bedrock.Cube.Data.Copy.IntraCube' , 'pCube' , sNomCube , 'pView' , '' , 'pFilter' , '' , 'pElementMapping' , sElementMapping , 'pFactor' , 1 , 'pDimensionDelim' , '&' , 'pElementStartDelim' , ':' ,
    'pElementDelim' , '+' , 'pMappingDelimiter' , '->' , 'pZeroTarget' , 1 , 'pZeroSource' , 0 , 'pDeleteViewsAndSubsets' , 1 , 'pSuppressConsol' , 1 , 'pSuppressRules' , 1 , 'pAccumulate' , 0 ,
    'pDropAndReattachRules' , 0 , 'pCopyDataViaClonedCube' , 0 , 'pDebug' , 0 ) ;
     #ASCIIOUTPUT ('..\Copie.txt'  , 'pCube', sNomCube , 'pView', pView , 'pFilter' , pFilter , 'pElementMapping' , pElementMapping , 'pFactor' , NumberToString(pFactor) , 'pDimensionDelim', pDimensionDelim , 'pElementStartDelim' , pElementStartDelim , 'pElementDelim', pElementDelim , 'pMappingDelimiter', pMappingDelimiter , 'pZeroTarget', NumberToString(pZeroTarget) , 'pZeroSource' , NumberToString(pZeroSource) , 'pDeleteViewsAndSubsets' , NumberToString(pDeleteViewsAndSubsets) , 'pSuppressConsol' , NumberToString(pSuppressConsol) , 'pSuppressRules' , NumberToString(pSuppressRules) , 'pAccumulate' , NumberToString(pAccumulate) , 'pDropAndReattachRules' , NumberToString(pDropAndReattachRules) , 'pCopyDataViaClonedCube' , NumberToString(pCopyDataViaClonedCube) , 'pDebug' , NumberToString(pDebug) ) ;
  ENDIF ;      
  nTailleboucle = nTailleboucle - 1 ; 
END ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#
# Declaration variables et constantes
Z_FIN_EXE = StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE = Subst(TODAY(1),1,4) | subst(TODAY(1),6,2);
Z_STATUS = IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION = Z_FIN_EXE - Z_DEBUT_EXE;
Z_LOCAL_TIME =   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
Z_UTILISATEUR = TM1User;

# Nettoyage -> CAMID("pans:u:cty@dimosoftware.com") into 'cty@dimosoftware.com'
nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
sUser = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

# Ecriture des informations sur le processus dans le cube ParametresSources                       
CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( sUser, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#Ecriture des informations de copie d'exercice.

CELLPUTS( 'Les données de l'|CHAR(39)|'exercice ' |sExerciceSource |', du scénario ' | sScenarioSource | ' et de la version ' | sVersionSource | ' ont été copiées sur l'|CHAR(39)| 'exercice '|sExerciceCible | ', sur le scénario ' | sScenarioCible | ' et sur la version ' | sVersionCible | '.' , sCubeParamS , cMainProcName ,'Info_Copie_Exercice' ) ;



#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

### Màj des informations du périmètre de travail dans le cube "ParametresFonctionnels"
# Année de travail
CellPutS ( CellgetS ( sCubeParamF ,  'ExerciceCible' , 'ValeurS' ) , sCubeParamF  ,  'ExerciceEnCours' ,  'ValeurS'  ) ;

# Scenario de travail
CellPutS ( CellgetS ( sCubeParamF ,  'ScenarioCible' , 'ValeurS' ) , sCubeParamF  , 'ScenarioEnCours' , 'ValeurS'  ) ;

# Version de Travail
CellPutS ( CellgetS ( sCubeParamF ,  'VersionCible' , 'ValeurS' ) , sCubeParamF  ,  'VersionEnCours' , 'ValeurS'  ) ;

# Dernier mois réel 
#CellPutS ( CellgetS ( sCubeParamF ,  'DernierMoisReel' , 'ValeurS' ) , sCubeParamF  , 'DernierMoisReel' , 'ValeurS' ) ;

## Mise à jour de la sécurité
ExecuteProcess ( 'Securite_Refresh' ) ; 
#endregion