#region Prolog

#***********************************************************************************************
# CREATEUR : CTY
# DATE DE CREATION : 17/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# Initialisation des immos pour les magasins ouvert sur l'exercice en cours
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables
# Dimensions
sDimMagasin = 'Magasin';
sDimImmo = 'Immobilisation';

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEntete = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;

###############################   FIN MONITORING   #################################
# Définition du périmètre 
sExerciceSource = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) ) ;
sScenarioSource = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) ) ;
sVersionSource = DimensionElementPrincipalName ( 'Version'   , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ) );

sExerciceCible = DimensionElementPrincipalName ( 'Exercice'  , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) );
sScenarioCible = DimensionElementPrincipalName ( 'Scenario'  , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) );
sVersionCible = DimensionElementPrincipalName ( 'Version'    , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ) );

# Les immos sont fictives donc pas de copie sur le réel
IF(sScenarioCible @= 'Reel');
  ProcessBreak;
Endif;

###############  Debut de la vue SOURCE   ################
sCubeSource = 'Param_Investissement'; 

### 1. Définition de la source du processus : cube Param_Investissement
sDimSource1 = 'Exercice' ; 
sDimSource2 = 'Version' ;
sDimSource3 = 'Scenario' ; 
sDimSource4 = 'Type_Immobilisation' ; 
sDimSource = 'm_Param_Investissement' ; 

# Définition nom de vue / sous-ensemble
sVueSource = 'Vue_Source_' | GetProcessName () ;

# Le nom des sous-ensembles
sSubsetSource = 'RAZ_Subset_' | cMainProcName ; 

# Remise à 0 de la vue
IF( ViewExists( sCubeSource , sVueSource ) = 1 );
    ViewDestroy( sCubeSource , sVueSource );
ENDIF;
ViewCreate ( sCubeSource , sVueSource , nDebug ) ; 

### 2. Création des sous-ensembles des dimensions du cube source Param_Investissement
# Dim 1 : Exercice : sur l'exercice en cours
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource1 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource1 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sVueSource , sExerciceSource , 1 ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource1 , sVueSource ) ; 

# Dim 2 : Version : sur la version en cours
IF( SubsetExists( sDimSource2 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource2 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource2 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sVueSource , sVersionSource , 1 ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource2 , sVueSource ) ; 

# Dim 3 : Scenario : sur le scenario en cours
IF( SubsetExists( sDimSource3 , sVueSource ) = 1 );
    SubsetDestroy( sDimSource3 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource3 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sVueSource , sScenarioSource, 1 ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sVueSource ) ; 

# Dim 4 : Type_Immobilisation : tout
SubsetDestroy ( sDimSource4 , sVueSource ) ; 
SubsetCreateByMDX ( sVueSource , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimSource4 | ' ] ) } , 0 ) }' , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource4 , sVueSource ) ; 

# Dim  : m_Param_Investissement 
SubsetDestroy ( sDimSource , sVueSource ) ; 
SubsetCreate ( sDimSource , sVueSource , nDebug) ; 
SubsetElementInsert ( sDimSource , sVueSource , 'Montant', 1 ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sVueSource ) ; 

### 3. Périmètre de calcul (0 = Inclure / 1 = Exclure)
# On ne traite PAS les croisements égaux à zéro :
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1 ) ; 
# On ne traite PAS les croisements concernés par des règles de calculs
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSourCe , 1 ) ;
# On ne traite PAS les croisements concernés par des cellules consolidéees 
ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 1 ) ; 

### 4. Définition de la source du processus : 
DataSourceNameForServer  = sCubeSource ; 
DataSourceCubeView = sVueSource ; 

################  Fin de la vue SOURCE   ################


################  Debut de la vue CIBLE  ################
sCubeCible = 'Investissement_Saisie';

### 0. Définition des variables
sDimCible1 = 'Exercice' ; 
sDimCible2 = 'Version' ;
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Immobilisation' ; 
sDimCible5 = 'Magasin' ;
sDimCible = 'm_Investissement_Saisie' ;

### 1. Creation vue CIBLE sur MS_Globale
sVueCible = 'Vue_Cible' | GetProcessName();

# Le nom des sous-ensembles
sSubsetCible = 'RAZ_Subset_' | cMainProcName ; 

IF( ViewExists( sCubeCible , sVueCible ) = 1 );
  ViewDestroy( sCubeCible , sVueCible );
ENDIF; 
ViewCreate( sCubeCible , sVueCible , nDebug);

# Dim 1 : Exercice : sur l'exercice en cours
IF( SubsetExists( sDimCible1 , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible1 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDimCible1 , sVueCible , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sVueCible , sExerciceCible , 1  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible1 , sVueCible ) ; 

# Dim 2 : Version : sur la version en cours
IF( SubsetExists( sDimCible2 , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible2 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDimCible2 , sVueCible , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sVueCible , sVersionCible , 1  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible2 , sVueCible ) ; 

# Dim 3 : Scenario : sur le sScenarioEnCours
IF( SubsetExists( sDimCible3 , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible3 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDimCible3 , sVueCible , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sVueCible , sScenarioCible , 1  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible3 , sVueCible ) ; 

# Dim 4 : Immobilisation : Seulement les immos liées aux ouvertures 
IF( SubsetExists( sDimCible4 , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible4 , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDimCible4 , sVueCible , nDebug) ; 
SubsetMDXSet( sDimCible4, sVueCible, '{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Immobilisation] )}, 0)}, [Immobilisation].[Creation] = "Ouverture")}');
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible4 , sVueCible ) ; 

# Dim 5 : Magasin : Uniquement les magasins qui ont ouvert pendant l'exercice
IF( SubsetExists( sDimCible5 , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible5 , sVueCible ) ; 
ENDIF;
sMDX = '{FILTER( {TM1SUBSETALL( [Magasin] )}, [Magasin].[Exercice_Ouverture] = "'|sExerciceCible|'")}';
SubsetCreateByMDX ( sVueCible , sMDX , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible5 , sVueCible ) ; 

# DimCible : m_Investissement_Saisie: Tous les élements de niv 0 
IF( SubsetExists( sDimCible , sVueCible ) = 1 );
  SubsetDestroy ( sDimCible , sVueCible ) ; 
ENDIF;
SubsetCreate ( sDimCible , sVueCible , nDebug ) ; 
SubsetElementInsert ( sDimCible , sVueCible , 'Cout_Immo' , nDebug  ) ;
SubsetElementInsert ( sDimCible , sVueCible , 'Duree_Amortissement' , nDebug  ) ;
SubsetElementInsert ( sDimCible , sVueCible , 'Date_Debut' , nDebug  ) ;
SubsetElementInsert ( sDimCible , sVueCible , 'Date_Fin' , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCible , sVueCible ) ; 

# Suppression des vues et sous-ensembles
ViewZeroOut( sCubeCible, sVueCible );
ViewDestroy( sCubeCible , sVueCible ) ;
SubsetDestroy( sDimCible1 , sVueCible ) ;
SubsetDestroy( sDimCible2 , sVueCible ) ;
SubsetDestroy( sDimCible3 , sVueCible ) ;
SubsetDestroy( sDimCible4 , sVueCible ) ;
SubsetDestroy( sDimCible5 , sVueCible ) ;
SubsetDestroy( sDimCible , sVueCible ) ;

########    Fin de la vue CIBLE   ########


# Création d'un sous-ensemble dans la dimension Magasin des magasins ouverts pendant l'exercice
# 'Ouvertures 2024_2025'
sSubsetMagasinsOuverture = 'Ouvertures_' | sExerciceCible;
sMDX = '{FILTER( {TM1SUBSETALL( [Magasin] )}, [Magasin].[Exercice_Ouverture] = "'|sExerciceCible|'")}';

IF( SubsetExists( sDimMagasin , sSubsetMagasinsOuverture ) = 1 );
    SubsetDestroy( sDimMagasin , sSubsetMagasinsOuverture );
ENDIF;
SubsetCreateByMDX ( sSubsetMagasinsOuverture, sMDX , 0 ) ;

# Création d'un sous-ensemble dans la dimension Immobilisation des immobilisations fictives
# Utile pour la pickliste de suppression des immos
sSubsetImmoFictives = 'Immobilisations Fictives' ;
sMDX = '{TM1SORT( {FILTER( {TM1SUBSETALL( [Immobilisation] )}, [Immobilisation].[Fictif] = "FICTIF")}, ASC)}';

IF( SubsetExists( sDimImmo , sSubsetImmoFictives ) = 1 );
    SubsetDestroy( sDimImmo , sSubsetImmoFictives );
ENDIF;
SubsetCreateByMDX ( sSubsetImmoFictives, sMDX , 0 ) ;

#endregion
#region Metadata

#endregion
#region Data


### Création d'un matricule fictif pour toutes les immo crées
# Format Immo Fictives : AAA-F01 / AAA-F02 / AAA-F03, avec AAA = trigram magasin

### Boucle n°1 sur les magasins qui ont ouvert pendant l'exercice
nTailleBoucle = SubsetGetSize( 'Magasin', sSubsetMagasinsOuverture );
i = 1; 
WHILE (i <= nTailleBoucle );

  # Variables Source
  sMagasinNum = SubsetGetElementName( sDimMagasin, sSubsetMagasinsOuverture, i );
  sMagasinTrigram = ATTRS( 'Magasin', sMagasinNum, 'Trigram' ) ;
  nMontant = Value ; 
  nDuree = CellGetN( sCubeSource, Exercice, Version, Scenario, Type_Immobilisation, 'Duree');
  sRepartition = CellGetS( sCubeSource, Exercice, Version, Scenario, Type_Immobilisation, 'Repartition'); 
  
  # Conversion Format date source : DD/MM/YYYY en format TM1 DayNo/Date : YYYY-MM-DD
  sDateOuvertureMagasin = ATTRS( 'Magasin', sMagasinNum, 'Date_Ouverture' ) ; 
  sJourOuvertureMagasin = Subst(sDateOuvertureMagasin, 1,2);
  sMoisOuvertureMagasin = Subst(sDateOuvertureMagasin, 4,2);
  sAnneeOuvertureMagasin = Subst(sDateOuvertureMagasin, 7,4);
  nDateOuvertureMagasin = DayNo( sAnneeOuvertureMagasin |'-'| sMoisOuvertureMagasin |'-'| sJourOuvertureMagasin);

  # Déduction de la date de fin par la date de début et le nombre d'années d'ammortissement
  nDateFin = nDateOuvertureMagasin + (nDuree * 365); 
  sDateFin = Date( nDateFin , 1 ); 
  sDateDebut = sAnneeOuvertureMagasin | '-' | sMoisOuvertureMagasin | '-' | sJourOuvertureMagasin;
  
  ### Création du matricule de l'immobilisation fictive crée format : AAA-F-CAISSON_METIER_00
   
  # Création du code immo par défault 
  # AAA-F-CAISSON_METIERS_00
  sCodeImmo = sMagasinTrigram | '-F-' | Type_Immobilisation |'_'| '00' ;
  # 005 - AAA-F-CAISSON_METIERS_00
  sAlias = sMagasinNum | ' - ' | sMagasinTrigram | '-F-' | Type_Immobilisation |'_00'  ;
  
  # Si le code est libre, on ajoute l'immo avec compteur 00
  IF(DIMIX( sDimCible4, sCodeImmo ) = 0);
    DimensionElementInsertDirect( sDimCible4, '', sCodeImmo, 'N' );
    DimensionElementComponentAddDirect( sDimCible4, 'Total_Immobilisation', sCodeImmo, 1 ); 
  ENDIF;
  
  ### Alimentation de la donnée portée par l'immobilisation fictive (Cube Investissement & Dim Investissement)
 
  # Ecriture dans le cube cible : Investissement_Saisie
  CellPutN( nMontant, sCubeCible, sExerciceCible, sVersionCible, sScenarioCible, sCodeImmo, sMagasinNum ,'Cout_Immo');
  CellPutN( nDuree, sCubeCible, sExerciceCible, sVersionCible, sScenarioCible, sCodeImmo, sMagasinNum, 'Duree_Amortissement');
  CellPutS( sDateDebut, sCubeCible, sExerciceCible, sVersionCible, sScenarioCible, sCodeImmo, sMagasinNum, 'Date_Debut');
  CellPutS( sDateFin, sCubeCible, sExerciceCible, sVersionCible, sScenarioCible, sCodeImmo, sMagasinNum, 'Date_Fin');

  # Alimentation des attributs dans la dimension 'Immobilisation'
  AttrPutS( sDateDebut,  'Immobilisation', sCodeImmo, 'Date_Debut' );
  AttrPutS( sDateFin,    'Immobilisation', sCodeImmo, 'Date_Fin' );
  AttrPutS( sMagasinNum, 'Immobilisation', sCodeImmo, 'Magasin' );
  AttrPutS( 'FICTIF',    'Immobilisation', sCodeImmo, 'Fictif' );
  AttrPutS( sRepartition,'Immobilisation', sCodeImmo, 'Repartition' );
  #AttrPutS( sLibImmo,    'Immobilisation', sCodeImmo, 'Libelle' );
  AttrPutS( sAlias,    'Immobilisation', sCodeImmo, 'Alias' );
  AttrPutS( 'Ouverture',    'Immobilisation', sCodeImmo, 'Creation' );
  AttrPutN( nDuree,      'Immobilisation', sCodeImmo, 'Duree' );
  AttrPutN( nMontant,    'Immobilisation', sCodeImmo, 'Montant_Initial' );
  
  #ASCIIOutput( '..\DEBUG\Saisie_Ouverture_Magasin.csv', sMagasinNum, sDateDebut, sDateFin, sCubeCible, Exercice, Version, Scenario, sMagasinNum, sCodeImmo, sRepartition  );

  i = i + 1; 
END;
#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );
CELLPUTS( sScenarioCible|'-'|sExerciceCible, sCubeParamS , cMainProcName ,'DernRef' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion