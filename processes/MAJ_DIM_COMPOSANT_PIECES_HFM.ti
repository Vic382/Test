#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 06/12/2021
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# MAJ de la dimension des composants des pièces produites par HFM
#***********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;
sCubeParamF = 'ParametresFonctionnels' ;

#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Permet de définir l'écriture dans le bac à sable actif de l'utilisateur
SetUseActiveSandboxProperty(1) ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# nDebug pour créer des ss-ensemble et vue temporaire
# Si 1 les ss-ensemble et vue temporaire si 0 les ss-ensemble et vue ne seront pas supprimés
nDebug = 1 ;


#**********************************************************************************************************
#                                  DEBUT MAJ_DIM_COMPOSANT_PIECES_HFM
#**********************************************************************************************************


# Récupération du fichier source
sNomFichier = CellGetS ( sCubeParamP , cMainProcName , 'Txt_NomFichier' ) ;
sRepertoireSource = CellGetS ( sCubeParamP , cMainProcName , 'Txt_RepertoireSource' ) ;
sExercice= CellGetS ( sCubeParamF , 'ExerciceEnCours' , 'ValeurS' ) ;
sScenario  = CellGetS ( sCubeParamF , 'ScenarioEnCours' , 'ValeurS' ) ;
sVersion = CellGetS ( sCubeParamF , 'VersionEnCours' , 'ValeurS' ) ;
sFichierSource = sRepertoireSource | sNomFichier | '_' | sScenario  | '_' | sExercice | '_' | sVersion |  '.csv' ;

DataSourceNameForServer = sFichierSource ;
DataSourceASCIIDelimiter = ';' ;


#Définition de la dimension
sDim = 'COMPOSANT_PIECES_HFM' ;

#Test de l'existance de la dimension
IF ( DIMENSIONEXISTS ( sDim ) = 0 );

	DIMENSIONCREATE ( sDim ) ;
ENDIF ;

#DimensionDeleteAllElements ( sDim ) ;

# définition et Insertion des éléments non variables
sTotal = 'TOTAL_COMPOSANT_PIECES_HFM' ;


DIMENSIONELEMENTINSERTDIRECT ( sDim , '' , sTotal , 'C' ) ;

AttrDelete ( sDim ,  'LIBELLE' ) ;
ATTRINSERT ( sDim , '' , 'LIBELLE' , 'A' );

##Création de l'attribut Fournisseur
ATTRINSERT ( sDim , '' , 'FOURNISSEUR' , 'S' );

ATTRPUTS  ( 'TOTAL COMPOSANT PIECES HFM' , sDim , sTotal , 'LIBELLE' ) ;

# Trie de la dimension
DIMENSIONSORTORDER ( sDim , 'ByInput' , 'Ascending' ,'ByHierarchy' , 'Ascending' ) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

# Création des éléméents dans la dimension

DIMENSIONELEMENTINSERT ( sDim , '' , Code_Piece , 'N' ) ;

DIMENSIONELEMENTCOMPONENTADD ( sDim , sTotal  , Code_Piece , 1 ) ;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



##Insertion des attributs :
ATTRPUTS  ( Libelle_Piece | ' - ' | Code_Piece , sDim , Code_Piece , 'LIBELLE' ) ;
ATTRPUTS  ( Code_Fournisseur, sDim , Code_Piece , 'FOURNISSEUR' ) ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#------------------------------------------------ MONITORING  ------------------------------------------------#

## DECLARATION DES VARIABLES #

# Statut
Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');

# Fin d'exécution
Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

## EXECUTION DU MONITORING #

# UTILISATEUR
Z_UTILISATEUR = TM1User;

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

#################################
# Informations sur le processus                          #
#################################

# STATUT
CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );

# TIME
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');

# UTILISATEUR
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );
#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

#endregion