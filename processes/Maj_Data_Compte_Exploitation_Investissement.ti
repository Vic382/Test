#region Prolog

#***********************************************************************************************
# CREATEUR : CTY
# DATE DE CREATION : 11/12/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Cubes
sCubeCible = 'Compte_Exploitation' ;
sCubeSource = 'Investissement';

# Poste_Budgetaire
sCompteGIE = '681120';
sCompteLOYER = '681121';

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEnteteMag = 0 ;

# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejet = sFichierRepRejet | 'Rejet_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejet ) = 1 ) ;
  ASCIIDelete( sRejet );
ENDIF ;

###############################   FIN MONITORING   #################################

# Définition du périmètre d'écriture CIBLE
sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) );
sScenario = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ) );
sVersion = 'VF' ;

#------------------------------------------
# Définition de la VUE SOURCE "Investissement" :
sDim1 = 'Exercice' ; 
sDim2 = 'Version' ;
sDim3 = 'Scenario'; 
sDim4 = 'Mois' ;
sDim5 = 'Immobilisation' ;
sDim6 = 'Magasin' ; 
sDim  = 'm_Investissement' ; 

# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 
# Le nom des sous-ensembles
sSubsetSource = 'Source_Subset_' | Today (0) | '_' | GetProcessName () ; 

# Destruction pour recréation de la vue
IF( ViewExists( sCubeSource, sVueSourCe ) = 1 );
  ViewDestroy( sCubeSource, sVueSourCe );
ENDIF;
ViewCreate( sCubeSource, sVueSourCe , nDebug );

# Exercice : ExerciceEnCours 
IF ( SubsetExists( sDim1, sSubsetSource ) = 1);
  SubsetDestroy ( sDim1, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim1 , sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim1 , sSubsetSource , sExercice , 1 ) ;

# Version : VersionEnCours
IF ( SubsetExists( sDim2, sSubsetSource ) = 1);
  SubsetDestroy ( sDim2, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim2, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim2 , sSubsetSource , sVersion , 1 ) ; 

# Scenario : ScenarioEnCours
IF ( SubsetExists( sDim3, sSubsetSource ) = 1);
  SubsetDestroy ( sDim3, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim3, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim3 , sSubsetSource , sScenario , 1 ) ;

# Mois : tous 
IF ( SubsetExists( sDim4, sSubsetSource ) = 1);
  SubsetDestroy ( sDim4, sSubsetSource ) ;
ENDIF;
SubsetCreateByMDX ( sSubsetSource,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim4 | '] ) } , 0 ) }', nDebug ) ; 

# Immobilisations : tous
IF ( SubsetExists( sDim5, sSubsetSource ) = 1);
  SubsetDestroy ( sDim5, sSubsetSource ) ;
ENDIF; 
SubsetCreateByMDX ( sSubsetSource,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim5 | '] ) } , 0 ) }', nDebug ) ; 

# Magasin : tous 
IF ( SubsetExists( sDim6, sSubsetSource ) = 1);
  SubsetDestroy ( sDim6, sSubsetSource ) ;
ENDIF; 
SubsetCreateByMDX ( sSubsetSource,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim6 | '] ) } , 0 ) }', nDebug ) ; 

# m_Investissement : Montant
IF ( SubsetExists( sDim, sSubsetSource ) = 1);
  SubsetDestroy ( sDim, sSubsetSource ) ;
ENDIF; 
SubsetCreate ( sDim, sSubsetSource, nDebug) ; 
SubsetElementInsert ( sDim , sSubsetSource , 'Montant', 1 ) ;

# On ne traite pas les croisements égaux à zéro :
ViewExtractSkipZeroesSet ( sCubeSource , sVueSource , 1 ) ; 
# On ne traite pas les croisements concernés par des règles de calculs
ViewExtractSkipRuleValuesSet ( sCubeSource , sVueSourCe , 1 ) ;
# On ne traite pas les croisements consolidés
ViewExtractSkipCalcsSet ( sCubeSource , sVueSource , 1 ) ; 

# On assigne les sous-ensembles à leur vue
ViewSubsetAssign ( sCubeSource , sVueSource , sDim1 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim2 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim3 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim4 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim5 , sSubsetSource ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDim6 , sSubsetSource ) ; 
ViewSubsetAssign ( sCubeSource , sVueSource , sDim , sSubsetSource ) ; 

# Définition de la source du processus : 
DataSourceNameForServer  = sCubeSource ; 
DataSourceCubeView = sVueSource ; 

# ---------------------------------------------------
# Remise à zéro de la vue CIBLE : Compte_Exploitation  

sCubeCible = 'Compte_Exploitation' ; 
sDim1 = 'Exercice' ; 
sDim2 = 'Version' ;
sDim3 = 'Scenario'; 
sDim4 = 'Partenaire'; 
sDim5 = 'Mois' ; 
sDim6 = 'Magasin' ;
sDim7 = 'Poste_Budgetaire' ;
sDim  = 'm_Compte_Exploitation' ;

# Le nom de la vue du cube :
sVueDestination = 'RàZ_vue_' | Today (0) | '_' | GetProcessName () ; 
# Le nom des sous-ensembles
sSubsetDestination = 'RàZ_Subset_' | Today (0) | '_' | GetProcessName () ; 

# Destruction pour recréation de la vue 
IF( ViewExists( sCubeCible, sVueDestination ) = 1 );
  ViewDestroy( sCubeCible, sVueDestination );
ENDIF;
ViewCreate( sCubeCible, sVueDestination , nDebug );

# Création des sous-ensembles des dimensions du cube
# Exercice : sExercice
if ( SubsetExists( sDim1, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim1 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim1 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim1 , sSubsetDestination , sExercice , 1 ) ;

# Version : sVersion
if ( SubsetExists( sDim2, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim2 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim2 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim2 , sSubsetDestination , sVersion , 1 ) ;

# Scenario : sScenario
if ( SubsetExists( sDim3, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim3 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim3 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim3 , sSubsetDestination , sScenario , 1 ) ;

# Partenaire : tous
if ( SubsetExists( sDim4, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim4 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim4  | ' ] ) } , 0 ) }' , nDebug) ;

# Mois : tous
if ( SubsetExists( sDim5, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim5 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim5  | ' ] ) } , 0 ) }', nDebug ) ;

# Magasin : tous
if ( SubsetExists( sDim6, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim6 , sSubsetDestination ) ;
EndIf; 
SubsetCreateByMDX ( sSubsetDestination , '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim6  | ' ] ) } , 0 ) }', nDebug ) ;

# Poste_Budgetaire : seulement 2 comptes (681120 - DOT AMORT IMMO CORP TX GIE  &  681121 - DOT AMORT IMMO INC TX LOYER)
if ( SubsetExists( sDim7, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim7 , sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim7 , sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim7 , sSubsetDestination , sCompteGIE  , 1 ) ;
SubsetElementInsert ( sDim7 , sSubsetDestination , sCompteLOYER  , 1 ) ;

# Dimension mesure : indicateur Montant
if ( SubsetExists( sDim, sSubsetDestination ) = 1);
  SubsetDestroy ( sDim, sSubsetDestination ) ;
EndIf; 
SubsetCreate ( sDim, sSubsetDestination, nDebug) ; 
SubsetElementInsert ( sDim , sSubsetDestination , 'Montant' , 1 ) ;

# On assigne tous les sous-ensembles créés à la vue de cube
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim1 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim2 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim3 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim4 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim5 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim6 , sSubsetDestination ) ;
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim7 , sSubsetDestination ) ; 
ViewSubsetAssign ( sCubeCible , sVueDestination , sDim , sSubsetDestination ) ; 

# Suppression des données qui sont dans la vue sVueDestination
ViewZeroOut ( sCubeCible , sVueDestination ) ; 


 
#endregion
#region Metadata

#endregion
#region Data


# Allocation en fonction du type d'immo : GIE ou LOYER
sRepartition =  ATTRS( 'Immobilisation', Immobilisation, 'Repartition' );

IF (sRepartition  @= 'GIE');
   sPosteBudgetaire  = '681120' ;
ELSEIF (sRepartition @= 'LOYER') ;
   sPosteBudgetaire  = '681121' ;
ELSEIF (sRepartition @= '');
   ProcessBreak;
ENDIF;


# Mise à jour des immobilisations dans le cube Compte Exploitation reparti en fonction du partenaire
# Utilisation du cube de paramétrage Param_Partenaire avec test Total_Partenaire = 100
nTotalTaux = CellGetN( 'Param_Partenaire', sExercice, sVersion, sScenario, 'Total_Partenaire', Magasin, 'Taux' ) ;
#Asciioutput ('..\DEBUG\CDR_Investissement_TotalTaux.csv', Immobilisation, sRepartition, sPosteBudgetaire, NumberToString( nTotalTaux ), sExercice, sVersion, sScenario );


# Boucle sur la dimension Partenaire
IF ( nTotalTaux = 1 ) ;
	nmax = DIMSIZ ( 'Partenaire' );
	n=nmax;
	WHILE ( (n>0) & (nTotalTaux=1) ) ;
        
	   sPartenaire = DimNM ('Partenaire', n ) ;

       # Si Partenaire est de niv0 on pousse la valeur de l'immo (value) * taux partenaire
       IF (ElLev ( 'Partenaire' , sPartenaire ) = 0 ) ;
           
          # Attention, au 14/12/2023, les taux sont alimentés seulement en VO/BUDGET
          # taux = CellGetN( 'Param_Partenaire', sExercice, sVersion, sScenario, sPartenaire, Magasin, 'Taux' );
          taux = CellGetN( 'Param_Partenaire', sExercice, 'V0', 'Budget', sPartenaire, Magasin, 'Taux' );
           
		  CellIncrementN ( Value * taux, sCubeCible, sExercice, sVersion, sScenario, sPartenaire, Mois, Magasin, sPosteBudgetaire,'Montant' ) ;
	      #Asciioutput ('..\DEBUG\CDR_Investissement.csv', NumberToString( Value * taux ),sExercice, sVersion, sScenario, sPartenaire, Mois, Magasin, sPosteBudgetaire );
       ENDIF ;
        
	n=n-1 ;
	END;

# Mise en place d'un fichier de rejet si le total des taux des partenaire est différent de 100
ELSE ;
	IF ( nEnteteMag = 0 ) ;
		ASCIIOutput ( sRejet , 'Param_Partenaire' , 'Motif_Rejet' ) ;
		nEnteteMag = 1 ;
	ENDIF ;
	ASCIIOutput ( sRejet , Magasin , 'Pour le magasin ' | Magasin |  ', le total des taux des partenaire est différent de 100' ) ;
	nError = nError + 1 ;

ENDIF;

#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#
#endregion