#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*****************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 23/11/2020
# DESCRIPTION DU PROCESSUS : 
# Ce processus permet d'ajouter un element à une dimension
# Possibilité de rajouter en paramètre un element consolidés auquel le rattacher
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# MODIFICATION:
#*****************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes techniques
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;                                                                                                                                                                                                                                                                                                                                                  
sCubeParamT = 'ParametrageT' ;

#**********************************************************************************************************
#                                  Définition des dimensions
#***********************************************************************************************************

sDim = '}Dimensions' ;

#**********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;

# Gestion du lancement par tâche planifié
IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

cLenASCIICode = 3 ;

#**********************************************************************************************************
#                                  Définition des variables
#**********************************************************************************************************

StringGlobalVariable('sProcessReturnCode');
NumericGlobalVariable('nProcessReturnCode');

# Pour échanger avec Process.Log.Create
NumericGlobalVariable ('zLogNumero') ; 

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = 'D:\IBM\Instances\GENERIQUE\DEBUG\' ;
sDebug = sFichierRepDebug | 'test.txt' ;

#**********************************************************************************************************
#                                  Initialisation des variables
#**********************************************************************************************************

nProcessReturnCode= 0;
zLogNumero	= 1 ;

nErrors		= 0 ;

pLegacy		= 0 ;


#**********************************************************************************************************
#                                  Log start time
#***********************************************************************************************************

ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'START' ,
'pV2' , 'Ajout d' | CHAR(39) | 'element dans une dimension' ) ;


#***********************************************************************************************************
#                                  Controles des parametres
#***********************************************************************************************************

IF ( pElement @= '' % pDim @= '' % pType @= '' ) ;
  nErrors = 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
  'pV3' , 'Les paramètres obligatoires ne sont pas renseignés' ) ;
  ProcessBreak ;
ENDIF ;

IF ( DIMIX ( sDim , pDim ) = 0 ) ;
  nErrors = 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
  'pV3' , 'La dimension ' | pDim | ' n' | CHAR(39) | 'existe pas' ) ;
  ProcessBreak ;
ENDIF ;

IF ( DIMIX ( pDim , pElement ) <> 0 ) ;
  nErrors = 1 ;
  ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
  'pV3' , 'L' | CHAR (39) | 'élément ' | pElement | ' existe déjà dans la dimension ' | pDim) ;
  ProcessBreak ;
ENDIF ;

IF ( pConso @<> '' ) ;
  IF ( DIMIX ( pDim , pConso ) = 0 ) ;
    nErrors = 1 ;
    ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
    'pV3' , 'La dimension ' | pConso| ' n' | CHAR(39) | 'existe pas' ) ;
    ProcessBreak ;
  ENDIF ;
ENDIF ;

IF ( pConso @<> '' ) ;
  IF ( ELLEV ( pDim  , pConso ) = 0 ) ;
    nErrors = 1 ;
    ExecuteProcess( 'Process_Log_Create', 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'FATAL' , 'pRef' , nErrors ,
    'pV3' , 'Le paramètre ' | pConso| ' n' | CHAR(39) | 'est pas un élément consolidé de la dimension ' |pDim ) ;
    ProcessBreak ;
  ENDIF ;
ENDIF ;

#***********************************************************************************************************
#                                  Debut de Process_Dim_Ajout_Element
#***********************************************************************************************************

DimensionElementInsert ( pDim , pPosition , pElement , pType ) ;



IF ( pConso @<> '' ) ;
  DimensionElementComponentAdd ( pDim , pConso , pElement , pPonderation ) ;
ENDIF ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****






#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#__________________________________________________________________________________________
#
#                                 Contrôle des erreurs                                            
#__________________________________________________________________________________________

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'END' ) ;

IF ( nErrors = 0 ) ;
ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , If ( GetProcessErrorFilename @= '' , 'OK' , 'KO' ) ,
	'pV1' , 'Process exécuté en ' , 'pV2' , cUtilisateur , 'pV3' , 'L' | CHAR (39) | 'élément ' | pElement | ' a été ajouté à la dimension ' | pDim ) ;
ENDIF ;

ExecuteProcess( 'Process_Log_Create' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess , 'pNumero' , zLogNumero , 'pType' , 'LOG' , 'pStatus' , 'BYE' ) ;
	
#__________________________________________________________________________________________
#
#                                 Création des fichiers de suivi depuis le cube Processes_Log et envoi email                         
#__________________________________________________________________________________________

	
ExecuteProcess( 'Process_Log_Export' , 'pProcesses' , cMainProcName , 'pDateExec' , cTimeProcess ) ;

IF ( nErrors > 0 ) ;
  ProcessQuit();
ENDIF ;
#endregion