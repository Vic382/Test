#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



#***********************************************************************************************************
# CREATEUR : DIMO SOFTWARE - BNS
# DATE DE CREATION : 12/01/2024
# DERNIERE MODIFICATION EFFECTUEE PAR :
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : 
# Alimentation du cube Cout de production pieces hfm par le cube couts pieces hfm
#***********************************************************************************************************

#***********************************************************************************************************
#                                  Définition des cubes
#***********************************************************************************************************

sCubeParamP = 'ParametresSources' ;
sCubeParamT = 'ParametrageT' ;
sCubeParamF = 'ParametresFonctionnels' ;

sCubePallocTemps = 'P_ALLOC_TEMPS' ;
sCubeTemps = 'TEMPS' ;

sCubeAttrScenario = '}ElementAttributes_Scenario' ; 
#***********************************************************************************************************
#                                  Définition des constantes
#***********************************************************************************************************

cMainProcName = GetProcessName();
cRepertoireRacine = GetProcessErrorFileDirectory;
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess = cTimeStamp | '_' | cRandomInt;
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Lanceur' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

# Permet de définir l'écriture dans le bac à sable actif de l'utilisateur
SetUseActiveSandboxProperty(1) ;

#***********************************************************************************************************
#                                  Définition des variables
#***********************************************************************************************************

# nDebug pour créer des ss-ensemble et vue temporaire
# Si 1 les ss-ensemble et vue temporaire si 0 les ss-ensemble et vue ne seront pas supprimés
nDebug = 1 ;

nCpteurMTP = 1;


#**********************************************************************************************************
#                                  DEBUT ALIM CUBE
#**********************************************************************************************************
###***Définition de la phase en cours 
sExercice = CellGetS ( sCubeParamF , 'ExerciceEnCours' , 'ValeurS' ) ; 
sVersion = CellGetS ( sCubeParamF , 'VersionEnCours' , 'ValeurS' ) ;
sScenario = pScenario ;

sMoisFrcst =  CellGetS ( sCubeAttrScenario , sScenario , 'Mois_Prevesionnels' ) ; 
nNumMoisFrcst  = DIMIX ( 'MOIS', sMoisFrcst )  ;

sDimPieceHFM = 'PIECES_HFM' ;


###########################################
## Creation vue zero
###########################################

# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | Today (0) | '_' | GetProcessName () ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | Today (0) | '_' | GetProcessName () ; 

# Declaration des variables du cube cible
sCubeCible = 'COUTS_PRODUCTION_PIECES_HFM' ;
sDimCible1 = 'EXERCICES' ;
sDimCible2 = 'Scenario' ;
sDimCible3 = 'Version' ;
sDimCible4 = 'COST' ;
sDimCible5 = 'MOIS_YTD' ;
sDimCible6 = 'MOIS' ;
sDimCible7 = 'PIECES_HFM' ;
sDimCible = 'm_COUTS_PRODUCTION_PIECES_HFM' ;

IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );


#Création des sous-ensembles des dimensions du cube

# EXERCICES
IF( SubsetExists( sDimCible1 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible1 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible1 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sVueZero , sExercice , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sVueZero ) ; 

# Scenario
IF( SubsetExists( sDimCible2 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible2 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible2 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sVueZero , sScenario , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sVueZero ) ; 

# Version
IF( SubsetExists( sDimCible3 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible3 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible3 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sVueZero , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sVueZero ) ; 

# Cost
IF( SubsetExists( sDimCible4 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible4 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible4 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible4 , sVueZero , 'MATERIAL_COST' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sVueZero ) ;

# MOIS_YTD
IF( SubsetExists( sDimCible5 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible5 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible5 , sVueZero , nDebug ) ; 
SubsetElementInsert ( sDimCible5 , sVueZero , 'M' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sVueZero ) ; 

# MOIS
IF( SubsetExists( sDimCible6 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible6 , sVueZero );
ENDIF;
SubsetCreate ( sDimCible6 , sVueZero , nDebug ) ; 

i = 1 ;

nTailleBoucle = Dimsiz ( sDimCible6 ) ;

WHILE ( nTailleBoucle >= i ) ;

  sElement = DIMNM ( sDimCible6 , i ) ;

  IF ( ELLEV ( sDimCible6 , sElement ) = 0 ) ;

    nNumMois =  DIMIX ( sDimCible6 , sElement )  ;  

    IF ( nNumMois >= nNumMoisFrcst ) ;

      SubsetElementInsert ( sDimCible6 , sVueZero , sElement , nDebug ) ;

    ENDIF; 

  ENDIF;

  i = i + 1 ;

END;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sVueZero ) ; 

#PIECES_HFM
IF( SubsetExists( sDimCible7 , sVueZero ) = 1 );
  SubsetDestroy( sDimCible7 , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible7|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible7 , sVueZero );

# m_COUTS_PRODUCTION_PIECES_HFM
IF( SubsetExists( sDimCible , sVueZero ) = 1 );
 SubsetDestroy( sDimCible , sVueZero );
ENDIF;
SubsetCreatebyMDX( sVueZero , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimCible|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeCible , sVueZero , sDimCible , sVueZero );


# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero ) ;



###########################################
## Creation vue Source
###########################################

# Declaration des variables du cube source

sCubeSource = 'PIECES_HFM_COST' ; 
sDimSource1 = 'EXERCICES' ; 
sDimSource2 = 'Scenario' ;
sDimSource3 = 'Version' ;
sDimSource4 ='PIECES_HFM'  ;
sDimSource5 = 'MOIS' ;
sDimSource = 'm_PIECES_HFM_COST' ;


# Le nom de la vue du cube :
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 

# Destruction pour recréation de la vue
 ViewDestroy ( sCubeSource , sVueSource ) ;
 ViewCreate ( sCubeSource , sVueSource , nDebug ) ; 

# Création des sous-ensembles des dimensions du cube

# EXERCICES
IF( SubsetExists( sDimSource1 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource1 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource1 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource1 , sVueSource , sExercice , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource1 , sVueSource );

# Scenario
IF( SubsetExists( sDimSource2 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource2 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource2 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource2 , sVueSource , sScenario , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource2 , sVueSource );

# Version
IF( SubsetExists( sDimSource3 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource3 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource3 , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource3 , sVueSource , sVersion , nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource3 , sVueSource ) ; 

# PIECES_HFM
IF( SubsetExists( sDimSource4 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource4 , sVueSource );
ENDIF;
SubsetCreatebyMDX( sVueSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['|sDimSource4|'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource4 , sVueSource );

# MOIS
IF( SubsetExists( sDimSource5 , sVueSource ) = 1 );
  SubsetDestroy( sDimSource5 , sVueSource );
ENDIF;
SubsetCreate ( sDimSource5 , sVueSource , nDebug ) ; 

i = 1 ;

nTailleBoucle = Dimsiz ( sDimSource5 ) ;

WHILE ( nTailleBoucle >= i ) ;

  sElement = DIMNM ( sDimSource5 , i ) ;

  IF ( ELLEV ( sDimSource5 , sElement ) = 0 ) ;

    nNumMois =  DIMIX ( sDimSource5 , sElement )  ;  

    IF ( nNumMois >= nNumMoisFrcst ) ;

      SubsetElementInsert ( sDimSource5 , sVueSource , sElement , nDebug ) ;

    ENDIF; 

  ENDIF;

  i = i + 1 ;

END;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource5 , sVueSource ) ; 

# m_PIECES_HFM_COST
IF( SubsetExists( sDimSource , sVueSource ) = 1 );
  SubsetDestroy( sDimSource , sVueSource );
ENDIF;
SubsetCreate ( sDimSource , sVueSource , nDebug ) ; 
SubsetElementInsert ( sDimSource , sVueSource , 'Depreciation_DIE' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Parts_Cost' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Packing' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Paint' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Oil' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Petrol' , nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Carriage_Duties', nDebug ) ;
SubsetElementInsert ( sDimSource , sVueSource , 'Over_Costs', nDebug ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSource , sVueSource ) ; 

#### Uniquement pour une vue source ####
ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 0 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 0 );

#Définition de la source
DataSourceNameForServer = sCubeSource ;
DatasourceCubeView = sVueSource ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#Chargement des coûts pièces dans le cube de coût de production 
IF ( m_PIECES_HFM_COST @= 'Depreciation_DIE' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Depreciation DIE' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Parts_Cost' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Parts Cost' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Packing' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Packing' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Paint' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Paint' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Oil' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Oil' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Petrol' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Petrol' ) ;
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Carriage_Duties' ) ; 
	CellIncrementN( Value , sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Carriage and Duties' ) ; 
ENDIF ; 

IF ( m_PIECES_HFM_COST @= 'Over_Costs' ) ; 
	CellIncrementN( Value ,  sCubeCible , EXERCICES , Scenario , Version , 'MATERIAL_COST' ,  'M' ,   MOIS , PIECES_HFM ,  'Over Costs' ) ;
ENDIF ; 
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#------------------------------------------------ MONITORING  ------------------------------------------------#

## DECLARATION DES VARIABLES #

# Statut
Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');

# Fin d'exécution
Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;

## EXECUTION DU MONITORING #

# UTILISATEUR
Z_UTILISATEUR = TM1User;

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

# HEURE D'EXECUTION
Z_LOCAL_TIME=   today(1) | '  -  ' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);

# PERIODE (TODAY = Année - Mois )
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

#################################
# Informations sur le processus                          #
#################################

# STATUT
CELLPUTS( Z_STATUS , sCubeParamP , cMainProcName , 'Statut' );

# TIME
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamP ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamP , cMainProcName ,'DernExe');

# UTILISATEUR
CELLPUTS( Z_UTILISATEUR, sCubeParamP , cMainProcName ,'txt_Utilisateur' );


#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

#endregion