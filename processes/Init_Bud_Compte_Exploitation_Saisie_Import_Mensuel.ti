#region Prolog

#***********************************************************************************************
# CREATEUR : VRT
# DATE DE CREATION : 18/03/2024
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : Initialisation des comptes exploitation pour la méthode de saisie Import_Annuel
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.csv' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejetMag = sFichierRepRejet | 'Rejet_Magasin_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejetMag ) = 1 ) ;
  ASCIIDelete( sRejetMag );
ENDIF ;


###############################   FIN MONITORING   #################################

### 1. Déclaration des variables

nEnteteMag = 0 ;
nError = 0 ;

# Cubes
sCubeParam_Methode = 'Param_Methode_Saisie' ;

# Dimensions
sDimMethode = 'Methode_Saisie' ;

# Définition du périmètre
# La source est toujours le Réel N-1 et la cible budget ou forecast

# On récupère l'exercice en cours dans le cube paramètrefonctionnel
sExerciceSource = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));

# On récupère l'index de l'exercice en cours pour récupérer l'exercice précédent dans la dimension
nIndex = DIMIX( 'Exercice', sExerciceSource );
sExerciceSource = DIMNM( 'Exercice', nIndex -1 );

sScenarioSource = 'REEL' ;
sVersionSource = 'VF' ;

sScenarioCible = DimensionElementPrincipalName ( 'Scenario' , CellGetS( 'ParametresFonctionnels', 'ScenarioEnCours' , 'ValeurS' ));
sExerciceCible = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ));
sVersionCible = DimensionElementPrincipalName ( 'Version' , CellGetS( 'ParametresFonctionnels', 'VersionEnCours' , 'ValeurS' ));

# Controle du scénario cible
# Si Réel, on ne fait rien
nErrorScenario = 0 ;

IF ( sScenarioCible @= 'REEL' ) ;
    nErrorScenario = 1 ;
    ProcessBreak;
ENDIF ;

###########################################
## Définition du fichier source
###########################################

# Répertoire fichier source
sRepertoire = CellGetS ( sCubeParamS , cMainProcName , 'Txt_RepertoireSource' ) ;

# Contrôle du répertoire

IF ( sRepertoire @= '' ) ;
  ItemReject( 'Le répertoire ou le nom du fichier n'| CHAR(39)|'est pas renseigné dans le cube ParamètreSources' );
  ProcessBreak;
ENDIF ;

# Renommage du fichier source selon les paramètres utilisateur
sNomFichier = pCompte | '_' | sExerciceCible | '_' | sScenarioCible | '_' | sVersionCible | '.csv'  ;
sNomComplet = sRepertoire | sNomFichier ;

# Controle de la présence du fichier source dans le répertoire
IF ( FileExists( sNomComplet ) = 0 ) ;
  ItemReject( 'Le fichier source ' | sNomFichier | ' n' | CHAR ( 39) | 'est pas présent dans le répertoire ' | sRepertoire );
  ProcessBreak;
ENDIF ;

# Définition du fichier comme source
DatasourceNameForServer = sNomComplet ;
DataSourceASCIIDelimiter = ';' ;
DatasourceASCIIDecimalSeparator=',';


###########################################
## Creation vue CIBLE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeCible = 'Compte_Exploitation_Saisie';
sDimCible1 = 'Exercice';
sDimCible2 = 'Version' ; 
sDimCible3 = 'Scenario' ; 
sDimCible4 = 'Mois' ; 
sDimCible5 = 'Magasin' ; 
sDimCible6= 'Poste_Budgetaire' ; 
sDimCible = 'm_Compte_Exploitation';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice
SubsetDestroy ( sDimCible1 , sSubsetZero ) ;
SubsetCreate ( sDimCible1 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible1 , sSubsetZero , sExerciceCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible1 , sSubsetZero ) ; 

# Version
SubsetDestroy ( sDimCible2 , sSubsetZero ) ;
SubsetCreate ( sDimCible2 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible2 , sSubsetZero , sVersionCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible2 , sSubsetZero ) ; 

# Scenario
SubsetDestroy ( sDimCible3 , sSubsetZero ) ;
SubsetCreate ( sDimCible3 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible3 , sSubsetZero , sScenarioCible , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible3 , sSubsetZero ) ; 

# Mois : si le scénario est budget alors tous les mois sinon que les mois prev
SubsetDestroy ( sDimCible4 , sSubsetZero ) ; 
IF ( sScenarioCible @= 'BUDGET' ) ;
  StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible4 | ' ] ) } , 0 ) }' ;
  SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ELSE ;

  SubsetCreate ( sDimCible4 , sSubsetZero , nDebug ) ; 

  # Récupération du 1er mois de simulation dans les attributs
  sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioCible , 'Premier_Mois_Prev'  );
  nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );

  # Boucle sur la dimension mois
  nTailleBoucle = DIMSIZ( sDimCible4 );
  i = 1 ;

  WHILE ( i <= nTailleBoucle ) ;

    sMois = DIMNM( sDimCible4 , i );
  
    # Contrôle avec l'index du 1er mois simulation
    IF ( ELLEV ( sDimCible4 , sMois ) = 0 & i >= nFirstMoisPrev ) ;
      SubsetElementInsert( sDimCible4 , sSubsetZero , sMois , 1 );
    ENDIF ;
  
    i = i + 1 ;
  
  END ;

ENDIF ;

ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible4 , sSubsetZero ) ; 

# Magasin
SubsetDestroy ( sDimCible5 , sSubsetZero ) ; 
StringMDX = '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDimCible5 | ' ] ) } , 0 ) }' ;
SubsetCreateByMDX ( sSubsetZero , StringMDX , nDebug  ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible5 , sSubsetZero ) ; 

# Poste_Budgétaire : Compte en paramètre
SubsetDestroy ( sDimCible6 , sSubsetZero ) ; 
SubsetCreate ( sDimCible6 , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible6 , sSubsetZero , pCompte , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible6 , sSubsetZero ) ; 

# m_Compte_Exploitation
SubsetDestroy ( sDimCible , sSubsetZero ) ; 
SubsetCreate ( sDimCible , sSubsetZero , nDebug ) ; 
SubsetElementInsert ( sDimCible , sSubsetZero , 'Montant' , nDebug ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDimCible , sSubsetZero ) ;

# Pas de RAZ car présent dans le master
#ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Data

# Controle du nombre de caractère code magasin ( doit être sur 3 caractère )
nLong = LONG( N );

IF ( nLong = 1 ) ;
  sMagasin = '00' | N ;
ELSEIF ( nLong = 2 ) ;
  sMagasin = '0' | N ;
ELSEIF ( nLong = 3 ) ;
  sMagasin = N ;
ENDIF ;

# Mise en place d'un fichier de rejet si des magasins n'existent pas dans la dimension magasin

IF ( DIMIX ( 'Magasin' , sMagasin ) =0 ) ;
  IF ( nEnteteMag = 0 ) ;
  ASCIIOutput ( sRejetMag , 'Code_Magasin' , 'Motif_Rejet' ) ;
  nEnteteMag = 1 ;
  ENDIF ;
  ASCIIOutput ( sRejetMag , sMagasin , 'Le magasin n' | CHAR ( 39 ) | 'est pas présent dans la dimension Magasin' ) ;
  nError = nError + 1 ;
  ItemSkip ;
ENDIF ;


CellPutN( P1 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M04' , sMagasin , pCompte, 'Montant' );
CellPutN( P2 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M05' , sMagasin , pCompte, 'Montant' );
CellPutN( P3 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M06' , sMagasin , pCompte, 'Montant' );
CellPutN( P4 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M07' , sMagasin , pCompte, 'Montant' );
CellPutN( P5 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M08' , sMagasin , pCompte, 'Montant' );
CellPutN( P6 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M09' , sMagasin , pCompte, 'Montant' );
CellPutN( P7 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M10' , sMagasin , pCompte, 'Montant' );
CellPutN( P8 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M11' , sMagasin , pCompte, 'Montant' );
CellPutN( P9 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M12' , sMagasin , pCompte, 'Montant' );
CellPutN( P10 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M01' , sMagasin , pCompte, 'Montant' );
CellPutN( P11 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M02' , sMagasin , pCompte, 'Montant' );
CellPutN( P12 , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, 'M03' , sMagasin , pCompte, 'Montant' );


# Initialisation d'une boucle sur la dimension mois

nTailleBoucle = DIMSIZ( 'Mois' );
i = 1 ;

WHILE ( i <= nTailleBoucle) ;

    sMois = DIMNM( 'Mois' , i );

    IF ( ELLEV( 'Mois', sMois ) = 0 ) ;
        
        # Si le scénario est Forecast, remsie à jour du réel
        IF ( sScenarioCible @<> 'BUDGET' % sScenarioCible @<> 'REEL' % sScenarioCible @<> 'Atterissage' ) ;
            
            # Récupération du 1er mois de simulation dans les attributs
            sFirstMoisPrev = CellGetS( '}ElementAttributes_Scenario', sScenarioCible , 'Premier_Mois_Prev'  );
            nFirstMoisPrev = DIMIX( 'Mois' , sFirstMoisPrev );
            nMois = DIMIX( 'Mois' , sMois );
            
            # Si le mois est antérieure au 1er mois prev on skip
            IF ( nMois < nFirstMoisPrev ) ;
                nMontant = CellGetN( 'Compte_Exploitation_Saisie', sExerciceCible, 'VF', 'Reel', sMois , sMagasin , pCompte, 'Montant' );
                CellPutN( nMontant , 'Compte_Exploitation_Saisie', sExerciceCible, sVersionCible, sScenarioCible, sMois , sMagasin , pCompte, 'Montant' );
            ENDIF ;

        ENDIF ;

    ENDIF ;

    i = i + 1 ;

END ;


#endregion
#region Epilog

#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Si le scénario n'est pas prévisionnel, on génère un message d'erreur
IF ( nErrorScenario <> 0 ) ;
    ItemReject( 'Le scénario sélectionné dans le cube Fonctionnel n' | CHAR ( 39 ) | 'est pas un scénario prévisionnel' ) ;
ENDIF ;




#endregion