#region Prolog
#***********************************************************************************************
# CREATEUR : YMD
# DATE DE CREATION : 13/11/2023
# DERNIERE MODIFICATION EFFECTUEE PAR : 
# DATE DE DERNIERE MODIFICATION : 
# DESCRIPTION DU PROCESSUS : MAJ des données du cube Compte Exploitation Saisie
#************************************************************************************************

###############################   MONITORING   #################################

### 0.Définition des variables du monitoring
Z_DEBUT_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
sCubeParamS	             = 'ParametresSources' ;
sCubeParamT	             = 'ParametrageT' ;
cMainProcName       = GetProcessName();
cRepertoireRacine   = GetProcessErrorFileDirectory;
cTimeStamp          = TimSt( Now, '\Y\m\d\h\i\s' );
cRandomInt          = NumberToString( INT( RAND( ) * 1000 ));
cTimeProcess        = cTimeStamp | '_' | cRandomInt;
sSource = '' ;
sNomFichier =  '' ;
nErrors = 0 ;
nErrorsSource = 0 ; 
zLogNumero         = 1 ;
nErrors          = 0;
vMessage              = '';

IF ( SUBST ( TM1User() , 1 , 2 ) @= 'R*' ) ;
	cUtilisateur = 'Admin' ;
ELSE ;
	cUtilisateur        = TM1User();
ENDIF ;

sDate = TimSt( Now, '\Y\m\d' );

sUser = ATTRS( '}Clients' , cUtilisateur , '}TM1_DefaultDisplayValue' );
nLong = LONG ( sUser ) ;
sUser = SUBST ( sUser , 20 , nLong - 19 ) ;

### 1. Déclaration des variables

# Pour suppression des vues et ss ensemble temporaire
nDebug = 1 ;

# Pour entête dans le fichier de rejet
nEnteteMag = 0 ;
nEntetePosteBudgetaire = 0 ;
nEnteteMois = 0 ;


# Compteur d'erreur
nError = 0 ; 

#**Fichier Debug
sFichierRepDebug = CellGetS ( sCubeParamT , 'Txt_RepertoireDebug' , 'ValeurS' );
sDebug = sFichierRepDebug | 'test'|cMainProcName|'.txt' ;

#**Fichier Rejet
sFichierRepRejet = CellGetS ( sCubeParamT , 'Txt_RepertoireRejet' , 'ValeurS' );
sRejetMag = sFichierRepRejet | 'Rejet_Magasin_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;
sRejetPoste = sFichierRepRejet | 'Rejet_Poste_Bud_'| '_' | sUser | '_' | sDate | '_' | cMainProcName|'.csv' ;

# Suppression du fichier de rejet si Existant
IF ( FileExists( sRejetMag ) = 1 ) ;
  ASCIIDelete( sRejetMag );
ENDIF ;

IF ( FileExists( sRejetPoste ) = 1 ) ;
  ASCIIDelete( sRejetPoste );
ENDIF ;

###############################   FIN MONITORING   #################################

# Déclaration des variables 

# Définition du périmètre
# que du Reel
sExercice = DimensionElementPrincipalName ( 'Exercice' , CellGetS( 'ParametresFonctionnels', 'ExerciceEnCours' , 'ValeurS' ) ) ;
sScenario = 'Reel' ;
sVersion = 'VF' ;

#Récupération Mois et Année

spMois = CellGetS ( 'ParametresFonctionnels' , 'MoisEnCours' , 'ValeurS' ) ;

IF (DIMIX ('Mois', spMois) < DIMIX ('Mois', 'M01')) ;
  spAnnee = subst( sExercice, 1,4 );
ELSE ;
  spAnnee = subst( sExercice, 6,10 );
ENDIF;



###########################################
## Définition du fichier source
###########################################

# Répertoire fichier source
sRepertoire = CellGetS ( sCubeParamS , cMainProcName , 'Txt_RepertoireSource' ) ;
sNomFichier = CellGetS ( sCubeParamS , cMainProcName , 'txt_NomFichier' ) ;

# Contrôle du répertoire

IF ( sRepertoire @= '' % sNomFichier @= '' ) ;
  ItemReject( 'Le répertoire ou le nom du fichier n'| CHAR(39)|'est pas renseigné dans le cube ParamètreSources' );
  ProcessBreak;
ENDIF ;

# Renommage du fichier source selon les paramètres utilisateur
    sNomFichier = sNomFichier | '_LUX_' | subst(spMois,2,3) | '_' | spAnnee | '.txt'  ;
sNomComplet = sRepertoire | sNomFichier ;

# Controle de la présence du fichier source dans le répertoire
IF ( FileExists( sNomComplet ) = 0 ) ;
  ItemReject( 'Le fichier source ' | sNomFichier | ' n' | CHAR ( 39) | 'est pas présent dans le répertoire ' | sRepertoire );
  ProcessBreak;
ENDIF ;

# Définition du fichier comme source
DatasourceNameForServer = sNomComplet ;
DataSourceASCIIDelimiter = ';' ;
DatasourceASCIIDecimalSeparator='.';


###########################################
## Creation vue CIBLE sur Compte_Exploitation_Saisie
###########################################

### Déclaration des variables
sCubeCible = 'Compte_Exploitation_Saisie';
sDim1 = 'Exercice';
sDim2 = 'Version' ; 
sDim3 = 'Scenario' ; 
sDim4 = 'Mois' ; 
sDim5 = 'Magasin' ; 
sDim6 = 'Poste_Budgetaire' ; 
sDim = 'm_Compte_Exploitation';


# Le nom de la vue du cube :
sVueZero = 'RAZ_vue_' | cMainProcName ; 

# Le nom des sous-ensembles
sSubsetZero = 'RAZ_Subset_' | cMainProcName ; 

# Création de la vue cible
IF( ViewExists( sCubeCible, sVueZero ) = 1 );
  ViewDestroy( sCubeCible, sVueZero );
ENDIF;
ViewCreate( sCubeCible, sVueZero , nDebug );

# Exercice : ExerciceEncours
IF ( SubsetExists( sDim1, sSubsetZero ) = 1);
  SubsetDestroy ( sDim1, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDim1 , sSubsetZero, nDebug) ; 
SubsetElementInsert ( sDim1 , sSubsetZero, sExercice , 1 ) ;

# Version : Reel
IF ( SubsetExists( sDim2, sSubsetZero ) = 1);
  SubsetDestroy ( sDim2, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDim2, sSubsetZero, nDebug) ; 
SubsetElementInsert ( sDim2 , sSubsetZero, sVersion , 1 ) ;

# Scenario : Version Finale (VF)
IF ( SubsetExists( sDim3, sSubsetZero ) = 1);
  SubsetDestroy ( sDim3, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDim3, sSubsetZero, nDebug) ; 
SubsetElementInsert ( sDim3 , sSubsetZero, sScenario, 1 ) ;


IF ( SubsetExists( sDim4, sSubsetZero ) = 1);
  SubsetDestroy ( sDim4, sSubsetZero ) ;
ENDIF;
SubsetCreate ( sDim4, sSubsetZero, nDebug) ; 
SubsetElementInsert ( sDim4 , sSubsetZero, spMois , 1 ) ;

# Magasin : Attribut Pays = FR
IF ( SubsetExists( sDim5, sSubsetZero ) = 1);
  SubsetDestroy ( sDim5, sSubsetZero ) ;
ENDIF; 
SubsetCreateByMDX ( sSubsetZero,  '{FILTER({TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim5 | '] ) } , 0 ) },[ '| sDim5 | '].[Pays] = "LUX")}', nDebug ) ; 

# Poste Budgetaire
IF ( SubsetExists( sDim6, sSubsetZero ) = 1);
  SubsetDestroy ( sDim6, sSubsetZero ) ;
ENDIF;
SubsetCreateByMDX ( sSubsetZero,  '{TM1FILTERBYLEVEL ( { TM1SUBSETALL ( [ '| sDim6 | '] ) } , 0 ) }', nDebug ) ; 
#SubsetCreateByMDX ( sSubsetZero,  '{ EXCEPT( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Poste_Budgetaire] )}, 0)}, {  [Poste_Budgetaire].[606100], [Poste_Budgetaire].[603700], [Poste_Budgetaire].[607100],  [Poste_Budgetaire].[707100] }) }', nDebug ) ;


# m_Compte_Exploitation
IF ( SubsetExists( sDim, sSubsetZero ) = 1);
  SubsetDestroy ( sDim, sSubsetZero ) ;
ENDIF; 
SubsetCreate ( sDim, sSubsetZero, nDebug) ; 
SubsetElementInsert ( sDim , sSubsetZero , 'Montant', 1 ) ;

# On assigne les sous-ensembles à leur vue
ViewSubsetAssign ( sCubeCible , sVueZero , sDim1 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDim2 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDim3 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDim4 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDim5 , sSubsetZero ) ;
ViewSubsetAssign ( sCubeCible , sVueZero , sDim6 , sSubsetZero ) ; 
ViewSubsetAssign ( sCubeCible , sVueZero , sDim , sSubsetZero ) ;

# RAZ de la vue zero
ViewZeroOut( sCubeCible, sVueZero );
#endregion
#region Data


# Controle du nombre de caractère code magasin ( doit être sur 3 caractère )
nLong = LONG( Code_du_GIE );

IF ( nLong = 1 ) ;
  sMagasin = '00' | Code_du_GIE ;
ELSEIF ( nLong = 2 ) ;
  sMagasin = '0' | Code_du_GIE ;
ELSEIF ( nLong = 3 ) ;
  sMagasin = Code_du_GIE ;
ENDIF ;

# Mise en place d'un fichier de rejet si des magasins n'existent pas dans la dimension magasin

IF ( DIMIX ( 'Magasin' , sMagasin ) =0 ) ;
  IF ( nEnteteMag = 0 ) ;
  ASCIIOutput ( sRejetMag , 'Code_Magasin' , 'Motif_Rejet' ) ;
  nEnteteMag = 1 ;
  ENDIF ;
  ASCIIOutput ( sRejetMag , sMagasin , 'Le magasin n' | CHAR ( 39 ) | 'est pas présent dans la dimension Magasin' ) ;
  nError = nError + 1 ;
  ItemSkip ;
ENDIF ;

# Filtre sur les magasins selon le pays en paramètre
# Si le pays est différents alors itemskip
sPaysMagasin = CellGetS ( '}ElementAttributes_Magasin', sMagasin, 'Pays' ) ;

IF ( sPaysMagasin @<> 'LUX' ) ;
    ItemSkip ;
ENDIF ;

# Récupération du mapping compte

sPosteBud = CellGetS( '}ElementAttributes_Poste_Budgetaire_LUX', Poste_Budgetaire, 'Mapping' );


# Mise en place d'un fichier de rejet si le Poste Budgetaire n'existent pas dans la dimension Poste_Budgetaire

IF ( DIMIX ( 'Poste_Budgetaire' , sPosteBud ) =0 ) ;
  IF ( nEntetePosteBudgetaire = 0 ) ;
    ASCIIOutput ( sRejetPoste , 'Poste_Budgetaire' , 'Motif_Rejet' ) ;
    nEnteteMag = 1 ;
  ENDIF ;
  ASCIIOutput ( sRejetPoste , sPosteBud , 'Le Poste Budgetaire n' | CHAR ( 39 ) | 'est pas présent dans la dimension Poste Budgétaire' ) ;
  nError = nError + 1 ;
  ItemSkip ;
ENDIF ;

# Récupération du mois

IF (LONG(TRIM(Mois)) = 1) ;
        sMois = 'M0' | TRIM(Mois) ;
ELSE ;
        sMois = 'M' | TRIM(Mois) ;
ENDIF ;

# Comparaision du mois dans le nom du fichier par rapport au mois contenu dans le fichier

IF ( spMois @= sMois ) ;

  # Mise à jour du Montant dans le cube Compte_Exploitation_Saisie

  IF ( signe @= '-') ;
     nMontant = (-1) * Montant ;
  ELSE ; 
     nMontant = Montant ;
  ENDIF;
  CellPutN ( nMontant, sCubeCible, sExercice, sVersion, sScenario, sMois, sMagasin, Poste_Budgetaire, 'Montant' ) ;
ELSE ;
  IF ( nEnteteMois = 0 ) ;
    ASCIIOutput ( sRejetMag , 'Poste_Budgetaire' , 'Motif_Rejet' ) ;
    nEnteteMois = 1 ;
  ENDIF ;
  ASCIIOutput ( sRejetMag , 'Mois utilisé:' | spMois | ' / Mois dans fichier: ' | Mois , 'Le mois utilisé est différent de celui indiqué dans le fichier' ) ;
  nError = nError + 1 ;
ENDIF;



#endregion
#region Epilog
#------------------------------------------------ MONITORING  ------------------------------------------------#

# Declaration variables et constantes

Z_FIN_EXE =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
Z_PERIODE=subst(TODAY(1),1,4) | subst(TODAY(1),6,2);

Z_STATUS=IF(GetProcessErrorFilename@='','OK','KO');
Z_TEMPS_EXECUTION= Z_FIN_EXE - Z_DEBUT_EXE;
# HEURE D'EXECUTION
nNewFormatId  =  NewDateFormatter ( 'fr-FR' , 'Europe/Paris' , 'serial' , 'medium' , 'datetime' );
Z_LOCAL_TIME = FormatDate ( NOW () , 'yyyy-MM-dd H:mm' , nNewFormatId );
Z_UTILISATEUR = TM1User;

# Ecriture des informations sur le processus dans le cube ParametresSources                       

nDebut= SCAN( 'pans:u:', Z_UTILISATEUR );
nDebutLong = LONG('pans:u:');
nStart = nDebut + nDebutLong ;
nTotal = LONG(Z_UTILISATEUR) ;
Z_UTILISATEUR = SUBST(Z_UTILISATEUR, nStart, nTotal - nStart - 1) ;

CELLPUTS( Z_STATUS , sCubeParamS , cMainProcName , 'Statut' );
CELLPUTN( Z_TEMPS_EXECUTION , sCubeParamS ,  cMainProcName ,'TempsExe');
CELLPUTS( Z_LOCAL_TIME, sCubeParamS , cMainProcName ,'DernExe');
CELLPUTS( Z_UTILISATEUR, sCubeParamS , cMainProcName ,'txt_Utilisateur' );

#------------------------------------------------ FIN - MONITORING  ------------------------------------------------#

# Message si erreur du processus
IF ( nError > 0 ) ;
  sMessage = 'Des rejets ont été générés, veuillez consulter le répertoire pour plus de détail' ;
  ItemReject( sMessage );
  ProcessQuit ;
ENDIF ;
#endregion